#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é –≤ Railway
"""
import os
import sys
from pathlib import Path

def print_section(title):
    print(f"\n{'='*60}")
    print(f"  {title}")
    print(f"{'='*60}")

def check_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print_section("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤")
    
    required_files = [
        "Dockerfile.prod",
        "railway.toml",
        "requirements.txt",
        "src/main.py",
        "frontend/Dockerfile.railway",
        "frontend/package.json",
        "alembic.ini",
        "alembic/env.py"
    ]
    
    missing_files = []
    for file_path in required_files:
        if not Path(file_path).exists():
            missing_files.append(file_path)
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {file_path}")
        else:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω: {file_path}")
    
    return len(missing_files) == 0

def check_railway_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Railway"""
    print_section("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Railway")
    
    try:
        with open("railway.toml", "r") as f:
            content = f.read()
            
        if "backend" in content:
            print("‚úÖ –°–µ—Ä–≤–∏—Å backend –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            print("‚ùå –°–µ—Ä–≤–∏—Å backend –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ railway.toml")
            return False
            
        if "frontend" in content:
            print("‚úÖ –°–µ—Ä–≤–∏—Å frontend –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            print("‚ùå –°–µ—Ä–≤–∏—Å frontend –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ railway.toml")
            return False
            
        if "Dockerfile.prod" in content:
            print("‚úÖ Dockerfile.prod —É–∫–∞–∑–∞–Ω –¥–ª—è backend")
        else:
            print("‚ùå Dockerfile.prod –Ω–µ —É–∫–∞–∑–∞–Ω –¥–ª—è backend")
            
        if "Dockerfile.railway" in content:
            print("‚úÖ Dockerfile.railway —É–∫–∞–∑–∞–Ω –¥–ª—è frontend")
        else:
            print("‚ùå Dockerfile.railway –Ω–µ —É–∫–∞–∑–∞–Ω –¥–ª—è frontend")
            
        return True
        
    except FileNotFoundError:
        print("‚ùå railway.toml –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

def check_dockerfiles():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º Dockerfile'—ã"""
    print_section("–ü—Ä–æ–≤–µ—Ä–∫–∞ Dockerfile'–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º backend Dockerfile
    try:
        with open("Dockerfile.prod", "r") as f:
            content = f.read()
            
        if "python:" in content:
            print("‚úÖ Dockerfile.prod –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Python")
        else:
            print("‚ùå Dockerfile.prod –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Python")
            
        if "requirements.txt" in content:
            print("‚úÖ Dockerfile.prod —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        else:
            print("‚ùå Dockerfile.prod –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç requirements.txt")
            
        if "${PORT" in content or "$PORT" in content:
            print("‚úÖ Dockerfile.prod –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PORT")
        else:
            print("‚ùå Dockerfile.prod –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PORT")
            
    except FileNotFoundError:
        print("‚ùå Dockerfile.prod –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º frontend Dockerfile
    try:
        with open("frontend/Dockerfile.railway", "r") as f:
            content = f.read()
            
        if "node:" in content:
            print("‚úÖ Dockerfile.railway –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Node.js")
        else:
            print("‚ùå Dockerfile.railway –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Node.js")
            
        if "npm run build" in content:
            print("‚úÖ Dockerfile.railway —Å–æ–±–∏—Ä–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        else:
            print("‚ùå Dockerfile.railway –Ω–µ —Å–æ–±–∏—Ä–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
            
        if "serve" in content:
            print("‚úÖ Dockerfile.railway –∏—Å–ø–æ–ª—å–∑—É–µ—Ç serve –¥–ª—è —Å—Ç–∞—Ç–∏–∫–∏")
        else:
            print("‚ùå Dockerfile.railway –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç serve")
            
    except FileNotFoundError:
        print("‚ùå frontend/Dockerfile.railway –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    return True

def check_environment_variables():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print_section("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    print("üìù –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ Railway –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
    print()
    
    required_vars = [
        ("DATABASE_URL", "PostgreSQL connection string"),
        ("SECRET_KEY", "Secret key for JWT tokens"),
        ("ENVIRONMENT", "production"),
        ("SCRAPERAPI_KEY", "ScraperAPI key for web scraping"),
    ]
    
    optional_vars = [
        ("TELEGRAM_BOT_TOKEN", "Telegram bot token"),
        ("SENTRY_DSN", "Sentry error tracking"),
        ("REDIS_URL", "Redis connection string"),
    ]
    
    print("üî¥ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
    for var, description in required_vars:
        print(f"   {var} - {description}")
    
    print("\nüü° –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
    for var, description in optional_vars:
        print(f"   {var} - {description}")
    
    print("\nüí° –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Railway Dashboard –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞")
    
    return True

def check_git_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å git"""
    print_section("–ü—Ä–æ–≤–µ—Ä–∫–∞ Git —Å—Ç–∞—Ç—É—Å–∞")
    
    import subprocess
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        result = subprocess.run(["git", "status", "--porcelain"], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            if result.stdout.strip():
                print("‚ö†Ô∏è  –ï—Å—Ç—å –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
                print(result.stdout)
                print("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å –∫–æ–º–º–∏—Ç –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º")
            else:
                print("‚úÖ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–æ–º–º–∏—á–µ–Ω—ã")
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É
            result = subprocess.run(["git", "branch", "--show-current"], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                branch = result.stdout.strip()
                print(f"üìç –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: {branch}")
                if branch != "main":
                    print("‚ö†Ô∏è  –í—ã –Ω–µ –Ω–∞ –≤–µ—Ç–∫–µ main. Railway –¥–µ–ø–ª–æ–∏—Ç —Å main")
            
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ git —Å—Ç–∞—Ç—É—Å–∞")
            return False
            
    except FileNotFoundError:
        print("‚ùå Git –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

def main():
    print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é –≤ Railway")
    print("=" * 60)
    
    checks = [
        ("–§–∞–π–ª—ã", check_files),
        ("Railway –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", check_railway_config),
        ("Dockerfile'—ã", check_dockerfiles),
        ("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", check_environment_variables),
        ("Git —Å—Ç–∞—Ç—É—Å", check_git_status),
    ]
    
    results = []
    
    for name, check_func in checks:
        try:
            result = check_func()
            results.append((name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {name}: {e}")
            results.append((name, False))
    
    print_section("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏")
    
    all_passed = True
    for name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù–û" if result else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"{name}: {status}")
        if not result:
            all_passed = False
    
    print()
    if all_passed:
        print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –ì–æ—Ç–æ–≤–æ –∫ –¥–µ–ø–ª–æ—é –≤ Railway")
        print()
        print("üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ Railway")
        print("2. –°–¥–µ–ª–∞–π—Ç–µ push –≤ main –≤–µ—Ç–∫—É: git push origin main")
        print("3. Railway –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–¥–µ–ø–ª–æ–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è")
        print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–µ–ø–ª–æ—è –≤ Railway Dashboard")
        return 0
    else:
        print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 