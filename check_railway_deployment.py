#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Railway
"""

import os
import json
import sys
from pathlib import Path

def check_file_exists(filepath, description):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
    if os.path.exists(filepath):
        print(f"‚úÖ {description}: {filepath}")
        return True
    else:
        print(f"‚ùå {description} –ù–ï –ù–ê–ô–î–ï–ù: {filepath}")
        return False

def check_railway_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Railway"""
    print("üöÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Railway:")
    
    if not check_file_exists("railway.toml", "Railway –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ railway.toml
    try:
        with open("railway.toml", "r") as f:
            content = f.read()
            
        if "[[services]]" in content and "name = \"backend\"" in content and "name = \"frontend\"" in content:
            print("‚úÖ Railway –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±–∞ —Å–µ—Ä–≤–∏—Å–∞ (backend –∏ frontend)")
        else:
            print("‚ùå Railway –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è railway.toml: {e}")
        return False
    
    return True

def check_dockerfiles():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Dockerfile —Ñ–∞–π–ª–æ–≤"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ Dockerfile —Ñ–∞–π–ª–æ–≤:")
    
    all_good = True
    all_good &= check_file_exists("Dockerfile.prod", "Backend Production Dockerfile")
    all_good &= check_file_exists("frontend/Dockerfile.railway", "Frontend Railway Dockerfile")
    
    return all_good

def check_frontend_package():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ package.json frontend"""
    print("\n‚öõÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend:")
    
    if not check_file_exists("frontend/package.json", "Frontend package.json"):
        return False
    
    try:
        with open("frontend/package.json", "r") as f:
            package = json.load(f)
        
        if "build" in package.get("scripts", {}):
            print("‚úÖ Frontend —Å–æ–¥–µ—Ä–∂–∏—Ç build script")
        else:
            print("‚ùå Frontend –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç build script")
            return False
            
        if "vite" in package.get("devDependencies", {}):
            print("‚úÖ Frontend –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Vite")
        else:
            print("‚ùå Frontend –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Vite")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json: {e}")
        return False
    
    return True

def check_python_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Python requirements"""
    print("\nüêç –ü—Ä–æ–≤–µ—Ä–∫–∞ Python requirements:")
    
    if not check_file_exists("requirements.txt", "Python requirements"):
        return False
    
    try:
        with open("requirements.txt", "r") as f:
            requirements = f.read()
        
        required_packages = ["fastapi", "uvicorn", "python-dotenv"]
        missing_packages = []
        
        for package in required_packages:
            if package not in requirements:
                missing_packages.append(package)
        
        if missing_packages:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
            return False
        else:
            print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è requirements.txt: {e}")
        return False
    
    return True

def check_cors_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ CORS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    
    if not check_file_exists("src/main.py", "Backend main.py"):
        return False
    
    try:
        with open("src/main.py", "r") as f:
            content = f.read()
        
        if "allow_origin_regex" in content and "railway" in content:
            print("‚úÖ CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è Railway –¥–æ–º–µ–Ω–æ–≤")
        else:
            print("‚ùå CORS –ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è Railway –¥–æ–º–µ–Ω–æ–≤")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è main.py: {e}")
        return False
    
    return True

def check_git_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Git —Å—Ç–∞—Ç—É—Å–∞"""
    print("\nüìù –ü—Ä–æ–≤–µ—Ä–∫–∞ Git —Å—Ç–∞—Ç—É—Å–∞:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ git
    if not os.path.exists(".git"):
        print("‚ùå Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return False
    
    print("‚úÖ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞–π–¥–µ–Ω")
    print("‚ÑπÔ∏è  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–æ–º–º–∏—á–µ–Ω—ã –∏ –∑–∞–ø—É—à–µ–Ω—ã!")
    
    return True

def print_deployment_checklist():
    """–ü–µ—á–∞—Ç—å —á–µ–∫–ª–∏—Å—Ç–∞ –¥–ª—è –¥–µ–ø–ª–æ—è"""
    print("\n" + "="*60)
    print("üìã –ß–ï–ö–õ–ò–°–¢ –î–õ–Ø –î–ï–ü–õ–û–Ø –ù–ê RAILWAY")
    print("="*60)
    print()
    print("1. üöÇ –ó–∞–π–¥–∏—Ç–µ –Ω–∞ https://railway.app")
    print("2. üìÅ –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –∏–∑ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")
    print("3. üîß Railway –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç 2 —Å–µ—Ä–≤–∏—Å–∞:")
    print("   ‚Ä¢ backend (FastAPI)")
    print("   ‚Ä¢ frontend (React)")
    print()
    print("4. ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è backend:")
    print("   ‚Ä¢ ENVIRONMENT=production")
    print("   ‚Ä¢ SECRET_KEY=your-secret-key")
    print("   ‚Ä¢ DATABASE_URL=${{Postgres.DATABASE_URL}}")
    print()
    print("5. üóÑÔ∏è –î–æ–±–∞–≤—å—Ç–µ PostgreSQL –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:")
    print("   ‚Ä¢ New ‚Üí Database ‚Üí Add PostgreSQL")
    print()
    print("6. üåê –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è frontend:")
    print("   ‚Ä¢ VITE_API_URL=https://your-backend.railway.app")
    print()
    print("7. ‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ–ø–ª–æ–π:")
    print("   ‚Ä¢ Backend: /health endpoint")
    print("   ‚Ä¢ Frontend: –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
    print()
    print("üìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: RAILWAY_DEPLOYMENT.md")
    print()

def main():
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Railway\n")
    
    all_checks = [
        check_railway_config(),
        check_dockerfiles(),
        check_frontend_package(),
        check_python_requirements(),
        check_cors_config(),
        check_git_status()
    ]
    
    if all(all_checks):
        print("\n" + "="*50)
        print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Railway!")
        print_deployment_checklist()
        return 0
    else:
        print("\n" + "="*50)
        print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!")
        print("–ò—Å–ø—Ä–∞–≤—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤—ã—à–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º.")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 