#!/usr/bin/env python3
"""
üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
- –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –ë–î
- –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è  
- –§–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –õ–æ–≥–∏–∫—É —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
"""
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from src.db.database import SessionLocal
from src.db.models import User, Filter, Listing, SentNotification
from src.crud.crud_listing import listing as crud_listing
from sqlalchemy import func, desc, and_
from datetime import datetime, timedelta
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)


def check_recent_listings():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    print("\n" + "="*60)
    print("üÜï –ü–û–°–õ–ï–î–ù–ò–ï –û–ë–™–Ø–í–õ–ï–ù–ò–Ø (–∑–∞ 2 —á–∞—Å–∞)")
    print("="*60)
    
    db = SessionLocal()
    try:
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞
        since_2h = datetime.utcnow() - timedelta(hours=2)
        
        recent_listings = db.query(Listing).filter(
            Listing.created_at >= since_2h,
            Listing.is_active == True
        ).order_by(desc(Listing.created_at)).limit(20).all()
        
        if not recent_listings:
            print("‚ùå –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return []
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(recent_listings)} –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∑–∞ 2 —á–∞—Å–∞:")
        
        source_stats = {}
        for listing in recent_listings:
            source = listing.source or 'unknown'
            source_stats[source] = source_stats.get(source, 0) + 1
            
            created_time = listing.created_at.strftime("%H:%M:%S") if listing.created_at else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            price = f"{listing.price}‚Ç¨" if listing.price else "–±–µ–∑ —Ü–µ–Ω—ã"
            
            print(f"   {listing.id}. [{source.upper()}] {listing.title[:50]}...")
            print(f"      üí∞ {price} | üìç {listing.city} | ‚è∞ {created_time}")
        
        print(f"\nüìä –ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º: {source_stats}")
        return recent_listings
        
    finally:
        db.close()


def check_user_filters():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("\n" + "="*60)
    print("üîç –§–ò–õ–¨–¢–†–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
    print("="*60)
    
    db = SessionLocal()
    try:
        users = db.query(User).filter(
            User.is_active == True,
            User.telegram_chat_id.isnot(None)
        ).all()
        
        for user in users:
            print(f"\nüë§ {user.email}:")
            print(f"   Chat ID: {user.telegram_chat_id}")
            
            filters = db.query(Filter).filter(Filter.user_id == user.id).all()
            active_filters = [f for f in filters if f.is_active]
            
            print(f"   –§–∏–ª—å—Ç—Ä–æ–≤: {len(filters)} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_filters)})")
            
            for filter_obj in active_filters:
                last_sent = filter_obj.last_notification_sent
                last_sent_str = last_sent.strftime("%d.%m %H:%M") if last_sent else "–Ω–∏–∫–æ–≥–¥–∞"
                
                print(f"\n   üîç –§–∏–ª—å—Ç—Ä {filter_obj.id}: '{filter_obj.name}'")
                print(f"      üèôÔ∏è –ì–æ—Ä–æ–¥: {filter_obj.city}")
                print(f"      üí∞ –¶–µ–Ω–∞: {filter_obj.min_price}-{filter_obj.max_price}‚Ç¨")
                print(f"      üè† –¢–∏–ø: {filter_obj.property_type}")
                print(f"      üö™ –ö–æ–º–Ω–∞—Ç—ã: {filter_obj.min_rooms}-{filter_obj.max_rooms}")
                print(f"      üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {last_sent_str}")
                print(f"      ‚è∞ –ß–∞—Å—Ç–æ—Ç–∞: {filter_obj.notification_frequency_hours}—á")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                check_matching_listings(db, filter_obj, user.id)
                
    finally:
        db.close()


def check_matching_listings(db, filter_obj: Filter, user_id: int):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∫–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–¥—Ö–æ–¥—è—Ç –ø–æ–¥ —Ñ–∏–ª—å—Ç—Ä"""
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
    search_params = {
        "city": filter_obj.city,
        "min_price": filter_obj.min_price,
        "max_price": filter_obj.max_price,
        "property_type": filter_obj.property_type,
        "min_rooms": filter_obj.min_rooms,
        "max_rooms": filter_obj.max_rooms,
    }
    
    # –£–¥–∞–ª—è–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è
    search_params = {k: v for k, v in search_params.items() if v is not None}
    
    # –ò—â–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    since_24h = datetime.utcnow() - timedelta(hours=24)
    all_listings = crud_listing.search(db, limit=50, **search_params)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
    fresh_listings = []
    for listing in all_listings:
        if listing.created_at and listing.created_at >= since_24h:
            fresh_listings.append(listing)
    
    print(f"      üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞ 24—á: {len(fresh_listings)}")
    
    if fresh_listings:
        source_stats = {}
        for listing in fresh_listings:
            source = listing.source or 'unknown'
            source_stats[source] = source_stats.get(source, 0) + 1
        print(f"      üìå –ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º: {source_stats}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    sent_listing_ids = set(
        row[0] for row in 
        db.query(SentNotification.listing_id)
        .filter(SentNotification.user_id == user_id)
        .all()
    )
    
    # –ù–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ)
    new_listings = [
        listing for listing in fresh_listings 
        if listing.id not in sent_listing_ids
    ]
    
    print(f"      ‚úÖ –ù–æ–≤—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {len(new_listings)}")
    print(f"      üìã –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {len(fresh_listings) - len(new_listings)}")
    
    if new_listings:
        new_source_stats = {}
        for listing in new_listings:
            source = listing.source or 'unknown'
            new_source_stats[source] = new_source_stats.get(source, 0) + 1
        print(f"      üÜï –ù–æ–≤—ã–µ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º: {new_source_stats}")
        
        print(f"      üìã –ü—Ä–∏–º–µ—Ä—ã –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π:")
        for listing in new_listings[:3]:
            print(f"         - ID {listing.id}: {listing.title[:30]}... ({listing.source})")


def check_sent_notifications():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    print("\n" + "="*60)
    print("üì® –û–¢–ü–†–ê–í–õ–ï–ù–ù–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø")
    print("="*60)
    
    db = SessionLocal()
    try:
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        since_24h = datetime.utcnow() - timedelta(hours=24)
        
        recent_notifications = db.query(SentNotification).filter(
            SentNotification.sent_at >= since_24h
        ).order_by(desc(SentNotification.sent_at)).limit(20).all()
        
        print(f"üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ 24 —á–∞—Å–∞: {len(recent_notifications)}")
        
        if recent_notifications:
            print(f"\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
            for notif in recent_notifications:
                sent_time = notif.sent_at.strftime("%d.%m %H:%M") if notif.sent_at else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                print(f"   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {notif.user_id}, –æ–±—ä—è–≤–ª–µ–Ω–∏–µ {notif.listing_id} - {sent_time}")
        
        # –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        total_notifications = db.query(func.count(SentNotification.id)).scalar()
        print(f"\nüìà –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ: {total_notifications}")
        
    finally:
        db.close()


def suggest_fixes():
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è"""
    print("\n" + "="*60)
    print("üîß –í–û–ó–ú–û–ñ–ù–´–ï –†–ï–®–ï–ù–ò–Ø")
    print("="*60)
    
    print("1. üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É sent_notifications:")
    print("   DELETE FROM sent_notifications WHERE sent_at < NOW() - INTERVAL '7 days';")
    
    print("\n2. üêõ –í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏:")
    print("   DEBUG_NOTIFICATIONS=true")
    
    print("\n3. ‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö:")
    print("   notification_frequency_hours = 1 (–≤–º–µ—Å—Ç–æ 24)")
    
    print("\n4. üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å notification worker")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ITA_RENT_BOT")
    print("=" * 60)
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    recent_listings = check_recent_listings()
    check_user_filters()
    check_sent_notifications()
    suggest_fixes()
    
    print("\n" + "="*60)
    print("‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("="*60)


if __name__ == "__main__":
    main() 