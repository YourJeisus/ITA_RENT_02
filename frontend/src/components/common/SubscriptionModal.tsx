import React, { useState } from 'react';
import './SubscriptionModal.scss';
import apiClient from '../../services/apiClient';

interface SubscriptionModalProps {
  isOpen: boolean;
  onClose: () => void;
  filters: {
    city?: string;
    min_price?: number;
    max_price?: number;
    min_rooms?: number;
    max_rooms?: number;
    property_type?: string;
    min_area?: number;
    max_area?: number;
  };
}

interface SubscriptionForm {
  email: string;
  first_name: string;
  filter_name: string;
}

const SubscriptionModal: React.FC<SubscriptionModalProps> = ({
  isOpen,
  onClose,
  filters,
}) => {
  const [form, setForm] = useState<SubscriptionForm>({
    email: '',
    first_name: '',
    filter_name: '',
  });
  const [loading, setLoading] = useState(false);
  const [step, setStep] = useState<'form' | 'success'>('form');
  const [telegramUrl, setTelegramUrl] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    try {
      const response = await apiClient.post('/notifications/subscribe', {
        email: form.email,
        first_name: form.first_name,
        filter_name: form.filter_name || '–ú–æ–π –ø–æ–∏—Å–∫',
        filters: filters,
      });

      const data = response.data;

      if (data.success) {
        setTelegramUrl(data.telegram_url);
        setStep('success');
      } else {
        alert('–û—à–∏–±–∫–∞: ' + data.message);
      }
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
      const errorMessage =
        error.response?.data?.detail ||
        error.message ||
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏';
      alert('–û—à–∏–±–∫–∞: ' + errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setForm({
      ...form,
      [e.target.name]: e.target.value,
    });
  };

  const handleTelegramRedirect = () => {
    window.open(telegramUrl, '_blank');
    onClose();
  };

  const renderFiltersPreview = () => {
    return (
      <div className="filters-preview">
        <h4>üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:</h4>
        <ul>
          {filters.city && <li>üèô –ì–æ—Ä–æ–¥: {filters.city}</li>}
          {(filters.min_price || filters.max_price) && (
            <li>
              üí∞ –¶–µ–Ω–∞: {filters.min_price || 0}‚Ç¨ - {filters.max_price || '‚àû'}‚Ç¨
            </li>
          )}
          {(filters.min_rooms || filters.max_rooms) && (
            <li>
              üö™ –ö–æ–º–Ω–∞—Ç: {filters.min_rooms || 0} - {filters.max_rooms || '‚àû'}
            </li>
          )}
          {filters.property_type && <li>üè† –¢–∏–ø: {filters.property_type}</li>}
          {(filters.min_area || filters.max_area) && (
            <li>
              üìê –ü–ª–æ—â–∞–¥—å: {filters.min_area || 0}–º¬≤ - {filters.max_area || '‚àû'}
              –º¬≤
            </li>
          )}
        </ul>
      </div>
    );
  };

  if (!isOpen) return null;

  return (
    <div className="subscription-modal-overlay" onClick={onClose}>
      <div className="subscription-modal" onClick={(e) => e.stopPropagation()}>
        <div className="modal-header">
          <h2>üîî –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h2>
          <button className="close-btn" onClick={onClose}>
            √ó
          </button>
        </div>

        {step === 'form' && (
          <div className="modal-content">
            <p className="modal-description">
              –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö –≤ Telegram! –ú—ã –±—É–¥–µ–º
              –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–¥ –≤–∞—à–∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã.
            </p>

            {renderFiltersPreview()}

            <form onSubmit={handleSubmit} className="subscription-form">
              <div className="form-group">
                <label htmlFor="email">üìß Email –∞–¥—Ä–µ—Å *</label>
                <input
                  type="email"
                  id="email"
                  name="email"
                  value={form.email}
                  onChange={handleInputChange}
                  required
                  placeholder="your@email.com"
                />
              </div>

              <div className="form-group">
                <label htmlFor="first_name">üë§ –ò–º—è</label>
                <input
                  type="text"
                  id="first_name"
                  name="first_name"
                  value={form.first_name}
                  onChange={handleInputChange}
                  placeholder="–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?"
                />
              </div>

              <div className="form-group">
                <label htmlFor="filter_name">üìã –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞</label>
                <input
                  type="text"
                  id="filter_name"
                  name="filter_name"
                  value={form.filter_name}
                  onChange={handleInputChange}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –†–∏–º–∞"
                />
              </div>

              <div className="benefits">
                <h4>‚ú® –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</h4>
                <ul>
                  <li>üöÄ –ü–µ—Ä–≤—ã–º —É–∑–Ω–∞–≤–∞–π—Ç–µ –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö</li>
                  <li>üéØ –¢–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–¥ –≤–∞—à–∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã</li>
                  <li>üì± –£–¥–æ–±–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram</li>
                  <li>üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞</li>
                </ul>
              </div>

              <div className="form-actions">
                <button
                  type="button"
                  onClick={onClose}
                  className="btn-secondary"
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
                <button
                  type="submit"
                  disabled={loading}
                  className="btn-primary"
                >
                  {loading ? '–û—Ñ–æ—Ä–º–ª—è–µ–º...' : 'üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è'}
                </button>
              </div>
            </form>
          </div>
        )}

        {step === 'success' && (
          <div className="modal-content success-step">
            <div className="success-icon">üéâ</div>
            <h3>–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!</h3>
            <p>
              –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Telegram –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ
              –∞–∫—Ç–∏–≤–∞—Ü–∏—é. –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.
            </p>

            <div className="telegram-instructions">
              <h4>üì± –ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:</h4>
              <ol>
                <li>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–π—Ç–∏ –≤ Telegram"</li>
                <li>–ù–∞–∂–º–∏—Ç–µ "START" –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º</li>
                <li>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø–æ–¥–ø–∏—Å–∫–∏</li>
                <li>–ì–æ—Ç–æ–≤–æ! –ñ–¥–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä–∞—Ö</li>
              </ol>
            </div>

            <div className="form-actions">
              <button onClick={onClose} className="btn-secondary">
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
              <button onClick={handleTelegramRedirect} className="btn-telegram">
                üì± –ü–µ—Ä–µ–π—Ç–∏ –≤ Telegram
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default SubscriptionModal;
