#!/usr/bin/env python3
"""
üéØ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–†–û–î–ê–ö–®–ï–ù –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ITA_RENT_BOT

–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç:
- –ù–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –ë–î
- –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
- –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é
- –†–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —É—Å–ª–æ–≤–∏—è
"""
import time
import sqlalchemy
from sqlalchemy.orm import sessionmaker
from datetime import datetime, timedelta

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ–Ω–ª–∞–π–Ω –ë–î Railway
DATABASE_URL = 'postgresql://postgres:TAkDvHCdDTxVzutQsNNfJgbcSttzrgzN@caboose.proxy.rlwy.net:15179/railway'
engine = sqlalchemy.create_engine(DATABASE_URL, echo=False)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

def get_stats():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    db = SessionLocal()
    
    try:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_listings = db.execute(sqlalchemy.text("SELECT COUNT(*) FROM listings")).scalar()
        total_notifications = db.execute(sqlalchemy.text("SELECT COUNT(*) FROM sent_notifications")).scalar()
        
        # –û–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        hour_ago = datetime.now() - timedelta(hours=1)
        recent_listings = db.execute(sqlalchemy.text("""
            SELECT COUNT(*) FROM listings 
            WHERE created_at > :hour_ago
        """), {"hour_ago": hour_ago}).scalar()
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        recent_notifications = db.execute(sqlalchemy.text("""
            SELECT COUNT(*) FROM sent_notifications 
            WHERE sent_at > :hour_ago
        """), {"hour_ago": hour_ago}).scalar()
        
        # –ù–æ–≤—ã–µ –¥–æ–º–∞ –≤ –†–∏–º–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å (–ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–¥ —Ñ–∏–ª—å—Ç—Ä)
        new_roma_houses = db.execute(sqlalchemy.text("""
            SELECT COUNT(*) FROM listings 
            WHERE city = 'Roma' 
            AND property_type = 'house' 
            AND created_at > :hour_ago
        """), {"hour_ago": hour_ago}).scalar()
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        last_notifications = db.execute(sqlalchemy.text("""
            SELECT listing_id, sent_at 
            FROM sent_notifications 
            WHERE user_id = 1
            ORDER BY sent_at DESC 
            LIMIT 3
        """)).fetchall()
        
        return {
            "total_listings": total_listings,
            "total_notifications": total_notifications,
            "recent_listings": recent_listings,
            "recent_notifications": recent_notifications,
            "new_roma_houses": new_roma_houses,
            "last_notifications": last_notifications,
            "timestamp": datetime.now()
        }
        
    finally:
        db.close()

def print_stats(stats):
    """–ö—Ä–∞—Å–∏–≤–æ –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    print(f"\nüïê {stats['timestamp'].strftime('%H:%M:%S')} - –ü–†–û–î–ê–ö–®–ï–ù –¢–ï–°–¢ ITA_RENT_BOT")
    print("=" * 60)
    print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   üè† –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {stats['total_listings']}")
    print(f"   üì® –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {stats['total_notifications']}")
    print()
    print(f"üî• –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å:")
    print(f"   ‚ûï –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {stats['recent_listings']}")
    print(f"   üì± –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {stats['recent_notifications']}")
    print(f"   üè† –î–æ–º–æ–≤ –≤ –†–∏–º–µ: {stats['new_roma_houses']} (–ø–æ–¥—Ö–æ–¥—è—Ç –ø–æ–¥ —Ñ–∏–ª—å—Ç—Ä)")
    print()
    
    if stats['last_notifications']:
        print(f"üì® –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:")
        for listing_id, sent_at in stats['last_notifications']:
            time_ago = datetime.now() - sent_at.replace(tzinfo=None)
            minutes_ago = int(time_ago.total_seconds() / 60)
            print(f"   üè† Listing {listing_id} - {minutes_ago} –º–∏–Ω –Ω–∞–∑–∞–¥")
    else:
        print(f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –µ—â–µ –Ω–µ –±—ã–ª–æ")
    
    print()

def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("üéØ –ó–ê–ü–£–°–ö –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ü–†–û–î–ê–ö–®–ï–ù –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print("   DEBUG_NOTIFICATIONS = false (–ø—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–µ–∂–∏–º)")
    print("   NOTIFICATION_INTERVAL_SECONDS = 300 (5 –º–∏–Ω—É—Ç)")
    print("   –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è: ‚úÖ –≤–∫–ª—é—á–µ–Ω–∞")
    print("   –§–∏–ª—å—Ç—Ä: –¥–æ–º–∞ –≤ –†–∏–º–µ")
    print("=" * 60)
    
    try:
        iteration = 0
        while True:
            iteration += 1
            print(f"\nüîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è #{iteration}")
            
            try:
                stats = get_stats()
                print_stats(stats)
                
                # –ê–Ω–∞–ª–∏–∑
                if stats['new_roma_houses'] > 0:
                    print(f"‚úÖ –ï—Å—Ç—å –Ω–æ–≤—ã–µ –¥–æ–º–∞ –≤ –†–∏–º–µ! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–π—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç.")
                elif stats['recent_notifications'] > 0:
                    print(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                else:
                    print(f"‚è≥ –û–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            
            print(f"‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥...")
            time.sleep(60)
            
    except KeyboardInterrupt:
        print(f"\n‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

if __name__ == "__main__":
    main() 