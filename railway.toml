# Railway конфигурация для полного деплоя ITA_RENT_BOT
[[services]]
name = "backend"
source = "."
build.builder = "dockerfile"
build.dockerfilePath = "Dockerfile.prod"

[services.backend.deploy]
healthcheckPath = "/health"
healthcheckTimeout = 300
restartPolicyType = "always"

[services.backend.env]
PYTHONPATH = "/app"
ENVIRONMENT = "production"

[[services]]
name = "frontend"
source = "frontend"
build.builder = "dockerfile"
build.dockerfilePath = "Dockerfile.railway"

[services.frontend.deploy]
healthcheckPath = "/"
healthcheckTimeout = 300
restartPolicyType = "always"

# ENV переменные уже настроены в Dockerfile.railway

# Автоматический парсинг всех источников через Cron Jobs
[[crons]]
cmd = "python cron_all_scrapers.py"
schedule = "0 */2 * * *"  # Каждые 2 часа

# Диспетчер уведомлений через Cron Jobs  
[[crons]]
cmd = "python cron_notifications.py"
schedule = "*/15 * * * *"  # Каждые 15 минут

# Telegram бот сервис
[[services]]
name = "telegram-bot"
source = "."
build.builder = "dockerfile"
build.dockerfilePath = "Dockerfile.prod"
build.buildCommand = "echo 'Telegram bot service'"

[services.telegram-bot.deploy]
startCommand = "python run_telegram_bot.py"
healthcheckPath = ""
healthcheckTimeout = 300
restartPolicyType = "always"

[services.telegram-bot.env]
PYTHONPATH = "/app"
ENVIRONMENT = "production"
SERVICE_TYPE = "telegram-bot"

# Диспетчер уведомлений (постоянный worker)
[[services]]
name = "notification-worker"
source = "."
build.builder = "dockerfile"
build.dockerfilePath = "Dockerfile.prod"
build.buildCommand = "echo 'Notification worker service'"

[services.notification-worker.deploy]
startCommand = "python run_notification_worker.py"
healthcheckPath = ""
healthcheckTimeout = 300
restartPolicyType = "always"

[services.notification-worker.env]
PYTHONPATH = "/app"
ENVIRONMENT = "production"
SERVICE_TYPE = "notification-worker"
DEBUG_NOTIFICATIONS = "true"
NOTIFICATION_INTERVAL_SECONDS = "300"

# PostgreSQL база данных (создается автоматически в Railway)
# [[services]]
# name = "postgres"
# ... 