#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ notification worker –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ
–ó–∞–º–µ–Ω–∞ –¥–ª—è shell –∫–æ–º–∞–Ω–¥—ã while true –≤ Docker
"""
import os
import sys
import time
import asyncio
import logging
import subprocess
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def load_environment():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    try:
        from dotenv import load_dotenv
        load_dotenv()
        logger.info("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except ImportError:
        logger.info("üìù python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")

def check_required_env_vars():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    required_vars = {
        "TELEGRAM_BOT_TOKEN": "–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞",
        "DATABASE_URL": "URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
        "SECRET_KEY": "–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á"
    }
    
    missing_vars = []
    for var, description in required_vars.items():
        if not os.getenv(var):
            missing_vars.append(f"{var} ({description})")
    
    if missing_vars:
        logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        for var in missing_vars:
            logger.error(f"   - {var}")
        return False
    
    logger.info("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True

async def run_notification_dispatcher():
    """–ó–∞–ø—É—Å–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        logger.info("üîî –ó–∞–ø—É—Å–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        from src.services.notification_service import run_notification_dispatcher
        
        result = await run_notification_dispatcher()
        logger.info(f"‚úÖ –î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª notification worker"""
    logger.info("üîî –ó–∞–ø—É—Å–∫ Notification Worker...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_environment()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not check_required_env_vars():
        sys.exit(1)
    
    # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏ (30 –º–∏–Ω—É—Ç = 1800 —Å–µ–∫—É–Ω–¥)
    interval_seconds = int(os.getenv("NOTIFICATION_INTERVAL_SECONDS", "1800"))
    logger.info(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {interval_seconds} —Å–µ–∫—É–Ω–¥ ({interval_seconds//60} –º–∏–Ω—É—Ç)")
    
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
    iteration = 0
    while True:
        iteration += 1
        logger.info(f"üîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è #{iteration} - –∑–∞–ø—É—Å–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            success = await run_notification_dispatcher()
            
            if success:
                logger.info(f"‚úÖ –ò—Ç–µ—Ä–∞—Ü–∏—è #{iteration} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.warning(f"‚ö†Ô∏è –ò—Ç–µ—Ä–∞—Ü–∏—è #{iteration} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏ #{iteration}: {e}")
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {interval_seconds} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞...")
        await asyncio.sleep(interval_seconds)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 