#!/usr/bin/env python3
"""
üîç –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –°–ö–†–ò–ü–¢ - –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –°–ò–°–¢–ï–ú–´

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
- –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤  
- –†–∞–±–æ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
- –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/debug_system_status.py
"""
import sys
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
ROOT_DIR = Path(__file__).resolve().parent.parent
if str(ROOT_DIR) not in sys.path:
    sys.path.insert(0, str(ROOT_DIR))

from src.db.database import SessionLocal
from src.services.scraping_service import ScrapingService
from src.services.notification_service import NotificationService
from src.db.models import User, Filter, Listing, SentNotification
from src.crud.crud_listing import listing as crud_listing
from sqlalchemy import func, desc
from datetime import datetime, timedelta
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


def print_database_statistics():
    """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\n" + "="*60)
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("="*60)
    
    db = SessionLocal()
    try:
        scraping_service = ScrapingService()
        stats = scraping_service.get_database_statistics(db)
        
        print(f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {stats['total_listings']}")
        print(f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_listings']}")
        print(f"   ‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {stats['inactive_listings']}")
        
        print(f"\nüìå –ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:")
        for source, source_stats in stats['by_source'].items():
            print(f"   ‚Ä¢ {source.upper()}:")
            print(f"     - –í—Å–µ–≥–æ: {source_stats['total']}")
            print(f"     - –ê–∫—Ç–∏–≤–Ω—ã—Ö: {source_stats['active']}")
            print(f"     - –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {source_stats['inactive']}")
        
        print(f"\n‚è∞ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:")
        if stats['recent_24h']:
            for source, count in stats['recent_24h'].items():
                print(f"   ‚Ä¢ {source.upper()}: {count} –Ω–æ–≤—ã—Ö")
        else:
            print("   ‚Ä¢ –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        print(f"\nüìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:")
        if stats['recent_week']:
            for source, count in stats['recent_week'].items():
                print(f"   ‚Ä¢ {source.upper()}: {count} –Ω–æ–≤—ã—Ö")
        else:
            print("   ‚Ä¢ –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    finally:
        db.close()


def print_users_and_filters_status():
    """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    print("\n" + "="*60)
    print("üë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –ò –§–ò–õ–¨–¢–†–´")
    print("="*60)
    
    db = SessionLocal()
    try:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        total_users = db.query(func.count(User.id)).scalar()
        active_users = db.query(func.count(User.id)).filter(User.is_active == True).scalar()
        telegram_users = db.query(func.count(User.id)).filter(
            User.is_active == True,
            User.telegram_chat_id.isnot(None)
        ).scalar()
        
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ: {total_users}")
        print(f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}")
        print(f"   ‚Ä¢ –° Telegram: {telegram_users}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        total_filters = db.query(func.count(Filter.id)).scalar()
        active_filters = db.query(func.count(Filter.id)).filter(Filter.is_active == True).scalar()
        
        print(f"\nüîç –§–∏–ª—å—Ç—Ä—ã:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ: {total_filters}")
        print(f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_filters}")
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Telegram
        if telegram_users > 0:
            print(f"\nüì± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å Telegram:")
            telegram_user_list = db.query(User).filter(
                User.is_active == True,
                User.telegram_chat_id.isnot(None)
            ).all()
            
            for user in telegram_user_list:
                user_filters = db.query(Filter).filter(Filter.user_id == user.id).all()
                active_user_filters = [f for f in user_filters if f.is_active]
                
                print(f"   ‚Ä¢ {user.email}:")
                print(f"     - Chat ID: {user.telegram_chat_id}")
                print(f"     - –§–∏–ª—å—Ç—Ä–æ–≤: {len(user_filters)} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_user_filters)})")
                
                for filter_obj in active_user_filters:
                    last_sent = filter_obj.last_notification_sent
                    last_sent_str = last_sent.strftime("%d.%m %H:%M") if last_sent else "–Ω–∏–∫–æ–≥–¥–∞"
                    print(f"       ‚Ä¢ '{filter_obj.name}' (ID: {filter_obj.id}, –ø–æ—Å–ª–µ–¥–Ω–µ–µ: {last_sent_str})")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    finally:
        db.close()


def print_recent_listings():
    """–í—ã–≤–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    print("\n" + "="*60)
    print("üÜï –ü–û–°–õ–ï–î–ù–ò–ï –û–ë–™–Ø–í–õ–ï–ù–ò–Ø")
    print("="*60)
    
    db = SessionLocal()
    try:
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        recent_listings = db.query(Listing).filter(
            Listing.is_active == True
        ).order_by(desc(Listing.created_at)).limit(10).all()
        
        if not recent_listings:
            print("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
            
        print(f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(recent_listings)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π:")
        
        for i, listing in enumerate(recent_listings, 1):
            created_date = listing.created_at.strftime("%d.%m %H:%M") if listing.created_at else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            price = f"{listing.price}‚Ç¨" if listing.price else "—Ü–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            
            print(f"   {i}. [{listing.source.upper()}] {listing.title[:50]}...")
            print(f"      üí∞ {price} | üìç {listing.city} | üìÖ {created_date}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {e}")
    finally:
        db.close()


def print_notifications_status():
    """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    print("\n" + "="*60)
    print("üîî –°–¢–ê–¢–ò–°–¢–ò–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô")
    print("="*60)
    
    db = SessionLocal()
    try:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        total_notifications = db.query(func.count(SentNotification.id)).scalar()
        
        # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        since_24h = datetime.utcnow() - timedelta(hours=24)
        recent_notifications = db.query(func.count(SentNotification.id)).filter(
            SentNotification.sent_at >= since_24h
        ).scalar()
        
        # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
        since_week = datetime.utcnow() - timedelta(days=7)
        week_notifications = db.query(func.count(SentNotification.id)).filter(
            SentNotification.sent_at >= since_week
        ).scalar()
        
        print(f"üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_notifications}")
        print(f"   ‚Ä¢ –ó–∞ 24 —á–∞—Å–∞: {recent_notifications}")
        print(f"   ‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {week_notifications}")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        recent_sent = db.query(SentNotification).order_by(
            desc(SentNotification.sent_at)
        ).limit(5).all()
        
        if recent_sent:
            print(f"\nüì® –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
            for notif in recent_sent:
                sent_time = notif.sent_at.strftime("%d.%m %H:%M") if notif.sent_at else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                print(f"   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {notif.user_id}, –æ–±—ä—è–≤–ª–µ–Ω–∏–µ {notif.listing_id} - {sent_time}")
        else:
            print(f"\nüì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    finally:
        db.close()


async def test_notification_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    print("\n" + "="*60)
    print("üß™ –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô")
    print("="*60)
    
    try:
        notification_service = NotificationService()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        print("üîî –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        result = await notification_service.process_all_notifications()
        
        if result:
            print(f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:")
            print(f"   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result.get('users_processed', 0)}")
            print(f"   ‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {result.get('notifications_sent', 0)}")
            print(f"   ‚Ä¢ –û—à–∏–±–æ–∫: {result.get('errors', 0)}")
        else:
            print("‚ùå –¢–µ—Å—Ç –Ω–µ —É–¥–∞–ª—Å—è - –¥–∏—Å–ø–µ—Ç—á–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ ITA_RENT_BOT")
    print("=" * 60)
    print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    try:
        from src.core.config import settings
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        print(f"   ‚Ä¢ DEBUG_NOTIFICATIONS: {settings.DEBUG_NOTIFICATIONS}")
        print(f"   ‚Ä¢ SCRAPERAPI_KEY: {'–Ω–∞—Å—Ç—Ä–æ–µ–Ω' if settings.SCRAPERAPI_KEY else '–ù–ï –ù–ê–°–¢–†–û–ï–ù'}")
        print(f"   ‚Ä¢ TELEGRAM_BOT_TOKEN: {'–Ω–∞—Å—Ç—Ä–æ–µ–Ω' if settings.TELEGRAM_BOT_TOKEN else '–ù–ï –ù–ê–°–¢–†–û–ï–ù'}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    print_database_statistics()
    print_users_and_filters_status()
    print_recent_listings()
    print_notifications_status()
    await test_notification_system()
    
    print("\n" + "="*60)
    print("‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("="*60)


if __name__ == "__main__":
    asyncio.run(main()) 