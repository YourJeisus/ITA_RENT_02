#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞ –¥–ª—è ITA_RENT_BOT
"""
import os
import sys
import asyncio
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
ROOT_DIR = Path(__file__).resolve().parent.parent
if str(ROOT_DIR) not in sys.path:
    sys.path.insert(0, str(ROOT_DIR))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def load_environment():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    try:
        from dotenv import load_dotenv
        load_dotenv(dotenv_path=ROOT_DIR / '.env')
        logger.info("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except ImportError:
        logger.info("üìù python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")

def check_required_env_vars():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    required_vars = {
        "TELEGRAM_BOT_TOKEN": "–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞",
        "DATABASE_URL": "URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
        "SECRET_KEY": "–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á"
    }
    
    missing_vars = []
    for var, description in required_vars.items():
        if not os.getenv(var):
            missing_vars.append(f"{var} ({description})")
    
    if missing_vars:
        logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        for var in missing_vars:
            logger.error(f"   - {var}")
        return False
    
    logger.info("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True

async def check_database_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å —Ä–µ—Ç—Ä–∞—è–º–∏"""
    max_retries = 10
    retry_delay = 5
    
    for attempt in range(max_retries):
        try:
            from src.db.database import get_db
            from src.db.models import User
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
            db = next(get_db())
            
            # –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
            count = db.query(User).count()
            logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}")
            db.close()
            return True
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –Ω–µ—É—Å–ø–µ—à–Ω–∞: {e}")
            
            if attempt < max_retries - 1:
                logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {retry_delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                await asyncio.sleep(retry_delay)
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return False
    
    return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ ITA_RENT_BOT Telegram Bot...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_environment()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not check_required_env_vars():
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    if not await check_database_connection():
        logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        from telegram import Update
        from telegram.ext import Application, CommandHandler, ContextTypes
        from src.db.models import User
        from src.db.database import get_db
        import secrets
        import string
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(os.getenv("TELEGRAM_BOT_TOKEN")).build()
        
        # ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ==========
        
        async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
            """
            –ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
            """
            user = update.effective_user
            chat_id = update.effective_chat.id
            
            logger.info(f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram: {user.username} (ID: {user.id})")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –¥–ª—è —Å–≤—è–∑–∫–∏
            code = ''.join(secrets.choice(string.ascii_uppercase + string.digits) for _ in range(8))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –∏—Å–ø–æ–ª—å–∑—É—è —Å–µ—Ä–≤–∏—Å
            from src.services.telegram_linking_service import telegram_linking_service
            telegram_linking_service.store_code(code, user.id, user.username, chat_id)
            
            message = f"""
üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ITA Rent Bot!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö –ø—Ä—è–º–æ –≤ Telegram.

**–î–ª—è —Å–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:**
1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ITA Rent –Ω–∞ —Å–∞–π—Ç–µ
2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "Link Telegram"
4. –í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥: `{code}`

–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 24 —á–∞—Å–∞.

**–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã:**
/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
/status - —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≤—è–∑–∫–∏
/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            """
            
            await update.message.reply_text(message, parse_mode='Markdown')
            logger.info(f"‚úÖ –ö–æ–¥ —Å–≤—è–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username}: {code}")
        
        async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
            """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
            help_text = """
ü§ñ **–ö–æ–º–∞–Ω–¥—ã ITA Rent Bot:**

/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –∏ –∫–æ–¥ —Å–≤—è–∑–∫–∏
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
/settings - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/unlink - –û—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –æ—Ç Telegram

**–ö–∞–∫ –Ω–∞—á–∞—Ç—å:**
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞
2. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ
3. –ì–æ—Ç–æ–≤–æ! –ù–∞—á–Ω–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            """
            await update.message.reply_text(help_text, parse_mode='Markdown')
        
        async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
            """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–≤—è–∑–∫–∏"""
            try:
                user_id = update.effective_user.id
                db = next(get_db())
                
                user = db.query(User).filter(User.telegram_chat_id == str(user_id)).first()
                
                if user:
                    status_text = f"""
‚úÖ **–ê–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω!**

Email: `{user.email}`
–ò–º—è: {user.first_name} {user.last_name or ''}
Telegram: @{user.telegram_username or 'unknown'}

–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
‚Ä¢ Telegram: {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if user.telegram_notifications_enabled else '‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã'}
‚Ä¢ Email: {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if user.email_notifications_enabled else '‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã'}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    """
                else:
                    status_text = """
‚ùå **–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω**

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ —Å–≤—è–∑–∫–∏
                    """
                
                db.close()
                await update.message.reply_text(status_text, parse_mode='Markdown')
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞")
        
        async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
            """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
            try:
                user_id = update.effective_user.id
                db = next(get_db())
                
                user = db.query(User).filter(User.telegram_chat_id == str(user_id)).first()
                
                if not user:
                    await update.message.reply_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                    db.close()
                    return
                
                settings_text = f"""
‚öôÔ∏è **–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:**

*–ö–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:*
‚Ä¢ Telegram: {'‚úÖ ON' if user.telegram_notifications_enabled else '‚ùå OFF'}
‚Ä¢ Email: {'‚úÖ ON' if user.email_notifications_enabled else '‚ùå OFF'}

*–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:*
https://ita-rent-02.vercel.app/settings

–¢–∞–º –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ:
- –î–æ–±–∞–≤–ª—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
- –í—ã–±–∏—Ä–∞—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
- –£–ø—Ä–∞–≤–ª—è—Ç—å –∞–¥—Ä–µ—Å–æ–º email
                """
                
                db.close()
                await update.message.reply_text(settings_text, parse_mode='Markdown')
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
        async def unlink_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
            """–û—Ç–≤—è–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
            try:
                user_id = update.effective_user.id
                db = next(get_db())
                
                user = db.query(User).filter(User.telegram_chat_id == str(user_id)).first()
                
                if not user:
                    await update.message.reply_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω")
                    db.close()
                    return
                
                user.telegram_chat_id = None
                user.telegram_username = None
                db.commit()
                
                db.close()
                await update.message.reply_text("‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω –æ—Ç Telegram")
                logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç –æ—Ç–≤—è–∑–∞–Ω: {user.email}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤—è–∑–∫–µ: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("status", status_command))
        application.add_handler(CommandHandler("settings", settings_command))
        application.add_handler(CommandHandler("unlink", unlink_command))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("üöÄ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
        await application.run_polling()
        
    except ImportError:
        logger.error("‚ùå Telegram –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        logger.info("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-telegram-bot")
        sys.exit(1)
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main()) 