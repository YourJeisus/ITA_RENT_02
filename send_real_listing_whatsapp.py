#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ WhatsApp
"""
import os
import sys
import asyncio
import logging
from datetime import datetime, timedelta
from typing import List, Dict

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.core.config import settings
from src.db.database import get_db, SessionLocal
from src.crud.crud_user import create_user, link_whatsapp
from src.crud.crud_listing import create_listing
from src.crud.crud_filter import create_filter
from src.services.whatsapp_service import WhatsAppService
from src.schemas.user import UserCreate
from src.schemas.listing import ListingCreate
from src.schemas.filter import FilterCreate

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –¢–µ—Å—Ç–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
SAMPLE_LISTINGS = [
    {
        "external_id": "idealista_12345",
        "source": "idealista",
        "title": "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –≤ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–º —Ü–µ–Ω—Ç—Ä–µ –†–∏–º–∞",
        "description": "–ü—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Å–∞–º–æ–º —Å–µ—Ä–¥—Ü–µ –†–∏–º–∞, —Ä—è–¥–æ–º —Å –ü–∞–Ω—Ç–µ–æ–Ω–æ–º. –ü–æ–ª–Ω–æ—Å—Ç—å—é –º–µ–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è, —Å –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–º –∏ WiFi. –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ç—É—Ä–∏—Å—Ç–æ–≤ –∏ –±–∏–∑–Ω–µ—Å-–ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤.",
        "price": 1800.0,
        "price_currency": "EUR",
        "property_type": "apartment",
        "rooms": 3,
        "bedrooms": 2,
        "bathrooms": 1,
        "area": 85.0,
        "floor": 2,
        "total_floors": 4,
        "furnished": True,
        "pets_allowed": False,
        "address": "Via del Corso, 123",
        "city": "Roma",
        "district": "Centro Storico",
        "latitude": 41.9028,
        "longitude": 12.4964,
        "images": [
            "https://img3.idealista.it/blur/WEB_LISTING-M/0/id.pro.es.image.master/ff/c4/dc/1234567890.webp",
            "https://img3.idealista.it/blur/WEB_LISTING-M/0/id.pro.es.image.master/ff/c4/dc/1234567891.webp"
        ],
        "url": "https://www.idealista.it/immobile/12345678/"
    },
    {
        "external_id": "immobiliare_67890",
        "source": "immobiliare",
        "title": "–°—Ç—É–¥–∏—è —É –º–æ—Ä—è –≤ –†–∏–º–∏–Ω–∏",
        "description": "–£—é—Ç–Ω–∞—è —Å—Ç—É–¥–∏—è –≤ 50 –º–µ—Ç—Ä–∞—Ö –æ—Ç –ø–ª—è–∂–∞ –≤ –†–∏–º–∏–Ω–∏. –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ–±–µ–ª—å, –±–∞–ª–∫–æ–Ω —Å –≤–∏–¥–æ–º –Ω–∞ –º–æ—Ä–µ, –ø–∞—Ä–∫–æ–≤–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ.",
        "price": 1200.0,
        "price_currency": "EUR",
        "property_type": "studio",
        "rooms": 1,
        "bedrooms": 1,
        "bathrooms": 1,
        "area": 45.0,
        "floor": 3,
        "total_floors": 5,
        "furnished": True,
        "pets_allowed": True,
        "address": "Via Marina, 45",
        "city": "Rimini",
        "district": "Marina Centro",
        "latitude": 44.0678,
        "longitude": 12.5695,
        "images": [
            "https://img3.immobiliare.it/floorplans/1234/apartment_1234_main.jpg"
        ],
        "url": "https://www.immobiliare.it/annunci/67890123/"
    },
    {
        "external_id": "subito_11111",
        "source": "subito",
        "title": "–¢–∞—É–Ω—Ö–∞—É—Å —Å —Å–∞–¥–æ–º –≤ –¢–æ—Å–∫–∞–Ω–µ",
        "description": "–ü—Ä–æ—Å—Ç–æ—Ä–Ω—ã–π —Ç–∞—É–Ω—Ö–∞—É—Å –≤ –∂–∏–≤–æ–ø–∏—Å–Ω–æ–π —Ç–æ—Å–∫–∞–Ω—Å–∫–æ–π –¥–µ—Ä–µ–≤–Ω–µ. –ß–∞—Å—Ç–Ω—ã–π —Å–∞–¥, –≥–∞—Ä–∞–∂, –≤–∏–Ω–Ω—ã–π –ø–æ–≥—Ä–µ–±. –¢–∏—Ö–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —Å–µ–º–µ–π–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞.",
        "price": 2500.0,
        "price_currency": "EUR",
        "property_type": "house",
        "rooms": 4,
        "bedrooms": 3,
        "bathrooms": 2,
        "area": 120.0,
        "floor": 0,
        "total_floors": 2,
        "furnished": False,
        "pets_allowed": True,
        "address": "Via Verde, 78",
        "city": "Siena",
        "district": "Chianti",
        "latitude": 43.3181,
        "longitude": 11.3307,
        "images": [
            "https://img.subito.it/images/large/123/123456789.jpg"
        ],
        "url": "https://www.subito.it/affitto/casa_123456789.htm"
    }
]

async def create_test_user_and_data():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞–Ω–Ω—ã–µ"""
    logger.info("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞–Ω–Ω—ã—Ö...")
    
    db = SessionLocal()
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from src.core.security import get_password_hash
        
        user = create_user(
            db, 
            email="test_whatsapp@example.com",
            hashed_password=get_password_hash("test123456"),
            first_name="–¢–µ—Å—Ç",
            last_name="WhatsApp",
            is_active=True
        )
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {user.email} (ID: {user.id})")
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º WhatsApp
        user = link_whatsapp(db, user.id, "+79992394439")
        logger.info(f"üì± WhatsApp –ø—Ä–∏–≤—è–∑–∞–Ω: {user.whatsapp_phone}")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
        filter_data = {
            "name": "–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è WhatsApp",
            "city": "Roma",
            "min_price": 1000.0,
            "max_price": 3000.0,
            "property_type": "apartment",
            "min_rooms": 2,
            "max_rooms": 4,
            "notification_enabled": True
        }
        
        filter_obj = create_filter(db, filter_data, user.id)
        logger.info(f"üîç –§–∏–ª—å—Ç—Ä —Å–æ–∑–¥–∞–Ω: {filter_obj.name} (ID: {filter_obj.id})")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        created_listings = []
        for listing_data in SAMPLE_LISTINGS:
            listing = create_listing(db, listing_data)
            created_listings.append(listing)
            logger.info(f"üè† –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {listing.title} (ID: {listing.id})")
        
        db.commit()
        return user, filter_obj, created_listings
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        db.rollback()
        return None, None, []
    finally:
        db.close()

def format_listings_message(listings: List, filter_name: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ –¥–ª—è WhatsApp"""
    
    message_parts = [
        "üè† *–ù–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è!*",
        "",
        f"üìç –§–∏–ª—å—Ç—Ä: _{filter_name}_",
        f"üìä –ù–∞–π–¥–µ–Ω–æ: {len(listings)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π",
        ""
    ]
    
    for i, listing in enumerate(listings, 1):
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        title = listing.title[:40] + "..." if len(listing.title) > 40 else listing.title
        
        parts = [f"*{i}. {title}*"]
        
        # –¶–µ–Ω–∞ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        price_info = f"üí∞ {listing.price}‚Ç¨/–º–µ—Å"
        if listing.rooms:
            price_info += f" ‚Ä¢ üö™ {listing.rooms} –∫–æ–º–Ω."
        if listing.area:
            price_info += f" ‚Ä¢ üìê {listing.area} –º¬≤"
        parts.append(price_info)
        
        # –ê–¥—Ä–µ—Å
        parts.append(f"üìç {listing.address}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        extra_info = []
        if listing.furnished:
            extra_info.append("ü™ë –ú–µ–±–ª–∏—Ä.")
        if listing.pets_allowed:
            extra_info.append("üêï –ü–∏—Ç–æ–º—Ü—ã –û–ö")
        if listing.floor is not None:
            extra_info.append(f"üè¢ {listing.floor} —ç—Ç.")
            
        if extra_info:
            parts.append(" ‚Ä¢ ".join(extra_info))
        
        # –°—Å—ã–ª–∫–∞
        domain = listing.url.split('/')[2] if listing.url else listing.source
        parts.append(f"üîó {domain}")
        
        message_parts.append("\n".join(parts))
        message_parts.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
    
    message_parts.append("üì± –ò—Å—Ç–æ—á–Ω–∏–∫: ITA_RENT_BOT")
    
    return "\n".join(message_parts)

async def send_real_listing():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ WhatsApp"""
    logger.info("üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ WhatsApp")
    logger.info("=" * 60)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        user, filter_obj, listings = await create_test_user_and_data()
        
        if not user or not listings:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WhatsApp —Å–µ—Ä–≤–∏—Å
        whatsapp_service = WhatsAppService()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = format_listings_message(listings, filter_obj.name)
        
        logger.info("üìù –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:")
        logger.info("-" * 40)
        logger.info(message)
        logger.info("-" * 40)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–æ–º–µ—Ä {user.whatsapp_phone}")
        
        success = await whatsapp_service.send_text_message(
            user.whatsapp_phone,
            message
        )
        
        if success:
            logger.info("‚úÖ –†–µ–∞–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ WhatsApp!")
            logger.info(f"üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ WhatsApp –Ω–∞ –Ω–æ–º–µ—Ä–µ {user.whatsapp_phone}")
            return True
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üéØ –û–¢–ü–†–ê–í–ö–ê –†–ï–ê–õ–¨–ù–û–ì–û –û–ë–™–Ø–í–õ–ï–ù–ò–Ø –í WHATSAPP")
    logger.info("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not settings.WHATSAPP_ENABLED:
        logger.error("‚ùå WhatsApp –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        return
    
    logger.info("‚úÖ WhatsApp –≤–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
    logger.info(f"üì± Twilio Account: {settings.WHATSAPP_BUSINESS_ACCOUNT_ID}")
    logger.info(f"üìû Sender: {settings.WHATSAPP_PHONE_NUMBER_ID}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    success = await send_real_listing()
    
    if success:
        logger.info("\nüéâ –£–°–ü–ï–•! –†–µ–∞–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        logger.info("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ WhatsApp –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –Ω–æ–º–µ—Ä–µ")
    else:
        logger.info("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
    
    logger.info("\n" + "=" * 60)

if __name__ == "__main__":
    asyncio.run(main()) 