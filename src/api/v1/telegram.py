"""
API endpoints –¥–ª—è Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
MVP –≤–µ—Ä—Å–∏—è –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
"""
import logging
from typing import Any, Dict

from fastapi import APIRouter, Depends, HTTPException, status, Request
from sqlalchemy.orm import Session

from src.api.deps import get_current_active_user, get_db
from src.core.config import settings
from src.crud.crud_user import link_telegram, unlink_telegram
from src.db.models import User
from src.schemas.user import UserTelegramLink, UserResponse

logger = logging.getLogger(__name__)

router = APIRouter()


@router.post("/link", response_model=UserResponse)
def link_telegram_account(
    link_data: UserTelegramLink,
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
) -> Any:
    """
    –ü—Ä–∏–≤—è–∑–∫–∞ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç chat_id –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        from src.crud.crud_user import get_by_telegram_chat_id
        existing_user = get_by_telegram_chat_id(db, telegram_chat_id=link_data.telegram_chat_id)
        
        if existing_user and existing_user.id != current_user.id:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–≠—Ç–æ—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
            )
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Telegram –∫ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        updated_user = link_telegram(
            db=db,
            user_id=current_user.id,
            telegram_chat_id=link_data.telegram_chat_id,
            telegram_username=link_data.telegram_username
        )
        
        logger.info(f"Telegram –ø—Ä–∏–≤—è–∑–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.email}: {link_data.telegram_chat_id}")
        
        return updated_user
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ Telegram: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞"
        )


@router.delete("/unlink", response_model=UserResponse)
def unlink_telegram_account(
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
) -> Any:
    """
    –û—Ç–≤—è–∑–∫–∞ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        if not current_user.telegram_chat_id:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Telegram –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω"
            )
        
        updated_user = unlink_telegram(db=db, user_id=current_user.id)
        
        logger.info(f"Telegram –æ—Ç–≤—è–∑–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.email}")
        
        return updated_user
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤—è–∑–∫–∏ Telegram: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤—è–∑–∫–µ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞"
        )


@router.get("/status")
def get_telegram_status(
    current_user: User = Depends(get_current_active_user)
) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    """
    return {
        "is_linked": bool(current_user.telegram_chat_id),
        "telegram_username": current_user.telegram_username,
        "chat_id": current_user.telegram_chat_id if current_user.telegram_chat_id else None
    }


@router.post("/webhook")
async def telegram_webhook(
    request: Request,
    db: Session = Depends(get_db)
) -> Dict[str, str]:
    """
    Webhook endpoint for Telegram Bot API
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram (–¥–ª—è production)
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
        update_data = await request.json()
        
        # –í MVP –≤–µ—Ä—Å–∏–∏ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º polling, –ø–æ—ç—Ç–æ–º—É webhook –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º
        logger.info(f"–ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Telegram: {update_data}")
        
        # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ telegram_bot —Å–µ—Ä–≤–∏—Å
        # await telegram_bot.process_update(Update.de_json(update_data, bot.bot))
        
        return {"status": "ok"}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram webhook: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook"
        )


@router.post("/test-notification")
async def send_test_notification(
    current_user: User = Depends(get_current_active_user)
) -> Dict[str, str]:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    """
    if not current_user.telegram_chat_id:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Telegram –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω"
        )
    
    try:
        from src.services.telegram_bot import send_notification_to_user
        
        test_message = (
            "üß™ *–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ*\n\n"
            f"–ü—Ä–∏–≤–µ—Ç, {current_user.first_name or '–¥—Ä—É–≥'}!\n\n"
            "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n"
            "–ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –≤—Å—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ! ‚úÖ\n\n"
            "üîî –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö "
            "—Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º –ø–æ–∏—Å–∫–∞."
        )
        
        success = await send_notification_to_user(
            telegram_chat_id=current_user.telegram_chat_id,
            message=test_message
        )
        
        if success:
            return {"status": "sent", "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"}
        else:
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        ) 