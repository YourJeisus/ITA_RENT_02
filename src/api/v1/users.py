"""
API endpoints –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
"""
import logging
from typing import Any

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session

from src.api.deps import get_current_active_user, get_db
from src.crud.crud_user import user as crud_user
from src.db.models import User
from src.schemas.user import UserResponse, UserUpdate

logger = logging.getLogger(__name__)

router = APIRouter()


@router.get("/me", response_model=UserResponse)
def get_current_user_profile(
    current_user: User = Depends(get_current_active_user)
) -> Any:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    return UserResponse(
        id=current_user.id,
        email=current_user.email,
        notification_email=current_user.notification_email,
        first_name=current_user.first_name,
        last_name=current_user.last_name,
        subscription_type=current_user.subscription_type,
        is_active=current_user.is_active,
        created_at=current_user.created_at,
        updated_at=current_user.updated_at,
        telegram_chat_id=current_user.telegram_chat_id,
        telegram_username=current_user.telegram_username,
        email_notifications_enabled=current_user.email_notifications_enabled,
        telegram_notifications_enabled=current_user.telegram_notifications_enabled
    )


@router.put("/me", response_model=UserResponse)
def update_current_user_profile(
    user_update: UserUpdate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
) -> Any:
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        updated_user = crud_user.update(db, db_obj=current_user, obj_in=user_update)
        logger.info(f"User profile updated: {updated_user.email}")
        
        return UserResponse(
            id=updated_user.id,
            email=updated_user.email,
            first_name=updated_user.first_name,
            last_name=updated_user.last_name,
            subscription_type=updated_user.subscription_type,
            is_active=updated_user.is_active,
            created_at=updated_user.created_at,
            updated_at=updated_user.updated_at
        )
    except Exception as e:
        logger.error(f"Error updating user profile: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"
        )


@router.get("/subscription")
def get_user_subscription(
    current_user: User = Depends(get_current_active_user)
) -> Any:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    return {
        "subscription_type": current_user.subscription_type,
        "subscription_expires_at": current_user.subscription_expires_at,
        "is_active": current_user.is_active,
        "limits": get_subscription_limits(current_user.subscription_type)
    }


def get_subscription_limits(subscription_type: str) -> dict:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    """
    limits = {
        "free": {
            "max_filters": 1,
            "max_notifications_per_day": 10,
            "notification_interval_hours": 24
        },
        "premium": {
            "max_filters": 10,
            "max_notifications_per_day": 100,
            "notification_interval_hours": 1
        }
    }
    return limits.get(subscription_type, limits["free"])


@router.get("/notifications/settings")
def get_notification_settings(
    current_user: User = Depends(get_current_active_user)
) -> Any:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    return {
        "email_notifications_enabled": current_user.email_notifications_enabled,
        "telegram_notifications_enabled": current_user.telegram_notifications_enabled,
        "has_telegram": bool(current_user.telegram_chat_id),
        "has_whatsapp": bool(current_user.whatsapp_phone),
        "whatsapp_enabled": current_user.whatsapp_enabled,
        "email_verified_at": current_user.email_verified_at,
        "email_last_sent_at": current_user.email_last_sent_at
    }


@router.put("/notifications/settings")
def update_notification_settings(
    settings_update: dict,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
) -> Any:
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
        if "email_notifications_enabled" in settings_update:
            current_user.email_notifications_enabled = settings_update["email_notifications_enabled"]
        
        if "telegram_notifications_enabled" in settings_update:
            current_user.telegram_notifications_enabled = settings_update["telegram_notifications_enabled"]
        
        db.add(current_user)
        db.commit()
        db.refresh(current_user)
        
        logger.info(f"Notification settings updated for user: {current_user.email}")
        
        return {
            "success": True,
            "email_notifications_enabled": current_user.email_notifications_enabled,
            "telegram_notifications_enabled": current_user.telegram_notifications_enabled
        }
    except Exception as e:
        logger.error(f"Error updating notification settings: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
        )


@router.post("/notifications/test-email")
async def send_test_email_notification(
    current_user: User = Depends(get_current_active_user)
) -> dict:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º notification_email –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏–Ω–∞—á–µ –æ—Å–Ω–æ–≤–Ω–æ–π email
    notification_email = current_user.notification_email or current_user.email
    
    if not notification_email:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Email –Ω–µ —É–∫–∞–∑–∞–Ω –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"
        )
    
    if not current_user.email_notifications_enabled:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã"
        )
    
    try:
        from src.services.email_service import email_service
        
        if not email_service.is_enabled():
            raise HTTPException(
                status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
                detail="Email —Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            )
        
        success = await email_service.send_test_email(notification_email)
        
        if success:
            return {"status": "sent", "message": "–¢–µ—Å—Ç–æ–≤–æ–µ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"}
        else:
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email"
            )
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error sending test email: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ email"
        )


# ========== EMAIL CHANGE ==========

import secrets
import string
from datetime import datetime, timedelta

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–¥–æ–≤ (–≤ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
_email_change_codes = {}

def generate_verification_code(length: int = 6) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 6-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    digits = string.digits
    return ''.join(secrets.choice(digits) for _ in range(length))


@router.post("/email/change-request")
async def request_email_change(
    new_notification_email: str,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
) -> dict:
    """
    –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É email –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    –≠—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π email –æ—Ç —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏!
    """
    if not new_notification_email or "@" not in new_notification_email:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å"
        )
    
    if new_notification_email == current_user.notification_email:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–≠—Ç–æ —É–∂–µ —Ç–µ–∫—É—â–∏–π email –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"
        )
    
    try:
        from src.services.email_service import email_service
        
        if not email_service.is_enabled():
            raise HTTPException(
                status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
                detail="Email —Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        code = generate_verification_code()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        code_key = f"{current_user.id}:notification_email:{new_notification_email}"
        _email_change_codes[code_key] = {
            'code': code,
            'created_at': datetime.now(),
            'expires_at': datetime.now() + timedelta(minutes=15)
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ –Ω–æ–≤—ã–π email
        subject = "üîê ITA Rent: –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ–Ω—ã email –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"
        body = f"""
–ü—Ä–∏–≤–µ—Ç!

–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ email –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ —Å–µ—Ä–≤–∏—Å–µ ITA Rent.

–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {code}

–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 15 –º–∏–Ω—É—Ç.

–ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∏ –Ω–µ –≤—ã, –∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ ITA Rent
        """
        
        html_body = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
        </head>
        <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
            <div style="max-width: 500px; margin: 0 auto;">
                <h2>üîê –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ–Ω—ã email –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</h2>
                <p>–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ email –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ —Å–µ—Ä–≤–∏—Å–µ ITA Rent.</p>
                
                <div style="background: #f0f0f0; padding: 20px; border-radius: 8px; text-align: center; margin: 20px 0;">
                    <p style="font-size: 24px; font-weight: bold; letter-spacing: 4px;">{code}</p>
                </div>
                
                <p>–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω <strong>15 –º–∏–Ω—É—Ç</strong>.</p>
                <p>–ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∏ –Ω–µ –≤—ã, –∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
                
                <hr style="border: none; border-top: 1px solid #ddd; margin: 20px 0;">
                <p style="font-size: 12px; color: #666;">
                    –° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>
                    <strong>–ö–æ–º–∞–Ω–¥–∞ ITA Rent</strong>
                </p>
            </div>
        </body>
        </html>
        """
        
        success = await email_service.send_email(new_notification_email, subject, body, html_body)
        
        if success:
            return {
                "status": "code_sent",
                "message": f"–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {new_notification_email}",
                "new_email": new_notification_email
            }
        else:
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"
            )
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error requesting notification email change: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–º–µ–Ω—ã email"
        )


@router.post("/email/change-confirm")
def confirm_email_change(
    new_notification_email: str,
    code: str,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
) -> dict:
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–º–µ–Ω—ã email –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –∫–æ–¥—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    """
    if not code or len(code) != 6 or not code.isdigit():
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"
        )
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
        code_key = f"{current_user.id}:notification_email:{new_notification_email}"
        
        if code_key not in _email_change_codes:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ó–∞–ø—Ä–æ—Å —Å–º–µ–Ω—ã email –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ."
            )
        
        request_data = _email_change_codes[code_key]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        if datetime.now() > request_data['expires_at']:
            del _email_change_codes[code_key]
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥."
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
        if request_data['code'] != code:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º email –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–ù–ï –º–µ–Ω—è–µ–º email –¥–ª—è –ª–æ–≥–∏–Ω–∞!)
        old_notification_email = current_user.notification_email
        current_user.notification_email = new_notification_email
        current_user.email_verified_at = datetime.now()
        
        db.add(current_user)
        db.commit()
        db.refresh(current_user)
        
        # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        del _email_change_codes[code_key]
        
        logger.info(f"Notification email changed for user {current_user.id}: {old_notification_email} -> {new_notification_email}")
        
        return {
            "status": "success",
            "message": "Email –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω",
            "new_email": new_notification_email
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error confirming notification email change: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å–º–µ–Ω—ã email"
        )


# ========== TELEGRAM LINKING ==========

@router.post("/telegram/link")
def link_telegram_account(
    code: str,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
) -> dict:
    """
    –ü—Ä–∏–≤—è–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –∫ Telegram —á–µ—Ä–µ–∑ –∫–æ–¥ –∏–∑ –±–æ—Ç–∞
    
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:
    1. –ü–∏—à–µ—Ç –±–æ—Ç—É /start
    2. –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–¥ —Å–≤—è–∑–∫–∏
    3. –í–≤–æ–¥–∏—Ç –∫–æ–¥ –∑–¥–µ—Å—å
    4. –ê–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç—Å—è
    """
    if not code or len(code) < 6:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥"
        )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–¥–µ –∏–∑ –±–æ—Ç–∞ (–Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–ª–∏ Redis)
        # –î–ª—è MVP –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –º–µ—Ö–∞–Ω–∏–∑–º - –±–æ—Ç —Ö—Ä–∞–Ω–∏—Ç –∫–æ–¥—ã –≤ –ø–∞–º—è—Ç–∏
        # –í production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis
        
        from src.services.telegram_linking_service import telegram_linking_service
        
        linking_data = telegram_linking_service.get_code(code)
        
        if not linking_data:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫"
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Telegram –¥–∞–Ω–Ω—ã–º–∏
        current_user.telegram_chat_id = str(linking_data['chat_id'])
        current_user.telegram_username = linking_data['telegram_username']
        current_user.telegram_notifications_enabled = True  # –í–∫–ª—é—á–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        db.add(current_user)
        db.commit()
        db.refresh(current_user)
        
        # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
        telegram_linking_service.remove_code(code)
        
        logger.info(f"‚úÖ Telegram –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É {current_user.email} (ID: {linking_data['chat_id']})")
        
        return {
            "status": "success",
            "message": "Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É",
            "telegram_username": current_user.telegram_username
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error linking telegram: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ Telegram"
        )


@router.post("/telegram/unlink")
def unlink_telegram_account(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
) -> dict:
    """
    –û—Ç–≤—è–∑–∫–∞ Telegram –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞
    """
    try:
        current_user.telegram_chat_id = None
        current_user.telegram_username = None
        
        db.add(current_user)
        db.commit()
        db.refresh(current_user)
        
        logger.info(f"‚úÖ Telegram –æ—Ç–≤—è–∑–∞–Ω –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ {current_user.email}")
        
        return {
            "status": "success",
            "message": "Telegram —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞"
        }
        
    except Exception as e:
        logger.error(f"Error unlinking telegram: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤—è–∑–∫–µ Telegram"
        ) 