"""
API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è WhatsApp —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
"""
import logging
from typing import Any, Dict, Optional
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from pydantic import BaseModel, Field

from src.api.deps import get_current_active_user, get_db
from src.db.models import User
from src.crud.crud_user import link_whatsapp, unlink_whatsapp, toggle_whatsapp_notifications
from src.core.config import settings

logger = logging.getLogger(__name__)

router = APIRouter(tags=["whatsapp"])


# –°—Ö–µ–º—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
class WhatsAppLinkRequest(BaseModel):
    phone_number: str = Field(..., description="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ", example="+393401234567")
    instance_id: Optional[str] = Field(None, description="ID –∏–Ω—Å—Ç–∞–Ω—Å–∞ WhatsApp (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")

class WhatsAppStatusResponse(BaseModel):
    enabled: bool
    phone_number: Optional[str]
    instance_id: Optional[str]
    verified: bool = False

class WhatsAppToggleRequest(BaseModel):
    enabled: bool = Field(..., description="–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å WhatsApp —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

class WhatsAppTestRequest(BaseModel):
    phone_number: str = Field(..., description="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")


@router.get("/status", response_model=WhatsAppStatusResponse)
async def get_whatsapp_status(
    current_user: User = Depends(get_current_active_user)
) -> WhatsAppStatusResponse:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å WhatsApp —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    return WhatsAppStatusResponse(
        enabled=current_user.whatsapp_enabled or False,
        phone_number=current_user.whatsapp_phone,
        instance_id=current_user.whatsapp_instance_id,
        verified=bool(current_user.whatsapp_phone)
    )


@router.post("/link")
async def link_whatsapp_account(
    request: WhatsAppLinkRequest,
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
) -> Dict[str, Any]:
    """
    –ü—Ä–∏–≤—è–∑–∞—Ç—å WhatsApp –Ω–æ–º–µ—Ä –∫ –∞–∫–∫–∞—É–Ω—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if not settings.WHATSAPP_ENABLED:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="WhatsApp —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
        )
    
    try:
        # –û—á–∏—â–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        clean_phone = ''.join(filter(str.isdigit, request.phone_number))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞
        if len(clean_phone) < 10 or len(clean_phone) > 15:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not clean_phone.startswith(('7', '39', '1', '44', '49', '33')):
            clean_phone = '39' + clean_phone  # –ò—Ç–∞–ª–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä
        from src.crud.crud_user import get_by_whatsapp_phone
        existing_user = get_by_whatsapp_phone(db, whatsapp_phone=clean_phone)
        if existing_user and existing_user.id != current_user.id:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É"
            )
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä
        updated_user = link_whatsapp(
            db=db,
            user_id=current_user.id,
            whatsapp_phone=clean_phone,
            whatsapp_instance_id=request.instance_id,
            enabled=True
        )
        
        logger.info(f"WhatsApp –Ω–æ–º–µ—Ä {clean_phone[:3]}***{clean_phone[-3:]} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {current_user.email}")
        
        return {
            "success": True,
            "message": "WhatsApp –Ω–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω",
            "phone_number": clean_phone,
            "enabled": True
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ WhatsApp –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.email}: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ WhatsApp –Ω–æ–º–µ—Ä–∞"
        )


@router.delete("/unlink")
async def unlink_whatsapp_account(
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
) -> Dict[str, Any]:
    """
    –û—Ç–≤—è–∑–∞—Ç—å WhatsApp –Ω–æ–º–µ—Ä –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        updated_user = unlink_whatsapp(db=db, user_id=current_user.id)
        
        logger.info(f"WhatsApp –Ω–æ–º–µ—Ä –æ—Ç–≤—è–∑–∞–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.email}")
        
        return {
            "success": True,
            "message": "WhatsApp –Ω–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω"
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤—è–∑–∫–∏ WhatsApp –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.email}: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤—è–∑–∫–µ WhatsApp –Ω–æ–º–µ—Ä–∞"
        )


@router.post("/toggle")
async def toggle_whatsapp_notifications(
    request: WhatsAppToggleRequest,
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
) -> Dict[str, Any]:
    """
    –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å WhatsApp —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    """
    if not current_user.whatsapp_phone:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ WhatsApp –Ω–æ–º–µ—Ä"
        )
    
    try:
        updated_user = toggle_whatsapp_notifications(
            db=db,
            user_id=current_user.id,
            enabled=request.enabled
        )
        
        action = "–≤–∫–ª—é—á–µ–Ω—ã" if request.enabled else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        logger.info(f"WhatsApp —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {action} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.email}")
        
        return {
            "success": True,
            "message": f"WhatsApp —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {action}",
            "enabled": request.enabled
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ WhatsApp –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.email}: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ WhatsApp"
        )


@router.post("/test")
async def test_whatsapp_notification(
    request: WhatsAppTestRequest,
    current_user: User = Depends(get_current_active_user)
) -> Dict[str, Any]:
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ WhatsApp —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    """
    if not settings.WHATSAPP_ENABLED:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="WhatsApp —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
        )
    
    try:
        from src.services.whatsapp_service import send_whatsapp_notification
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä
        clean_phone = ''.join(filter(str.isdigit, request.phone_number))
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        test_message = (
            f"üè† *–¢–µ—Å—Ç WhatsApp —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ITA_RENT_BOT*\n\n"
            f"–ü—Ä–∏–≤–µ—Ç, {current_user.first_name or '–¥—Ä—É–≥'}!\n\n"
            f"–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ WhatsApp —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n"
            f"–ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ! ‚úÖ\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö –ø–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º.\n\n"
            f"üí° _–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π._"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        success = await send_whatsapp_notification(clean_phone, test_message)
        
        if success:
            logger.info(f"–¢–µ—Å—Ç–æ–≤–æ–µ WhatsApp —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {current_user.email}")
            return {
                "success": True,
                "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ",
                "phone_number": clean_phone
            }
        else:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            )
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ WhatsApp —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {current_user.email}: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"
        )


@router.get("/settings")
async def get_whatsapp_settings() -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WhatsApp –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    """
    return {
        "enabled": settings.WHATSAPP_ENABLED,
        "features": {
            "text_messages": True,
            "template_messages": settings.WHATSAPP_ENABLED,
            "rich_media": False  # –ü–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º
        },
        "limits": {
            "max_listings_per_message": 3,
            "message_length_limit": 4096
        }
    } 