"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ITA_RENT_BOT
"""
import logging
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy.pool import StaticPool

from src.core.config import settings

logger = logging.getLogger(__name__)

logger.info(f"üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
logger.info(f"üìä URL: {settings.DATABASE_URL[:50]}...")

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤–∏–∂–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def create_database_engine():
    try:
        if "sqlite" in settings.DATABASE_URL:
            logger.info("üóÉÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
            engine = create_engine(
                settings.DATABASE_URL,
                connect_args={"check_same_thread": False},
                poolclass=StaticPool,
                echo=settings.DEBUG  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ debug —Ä–µ–∂–∏–º–µ
            )
        elif "postgresql" in settings.DATABASE_URL or "postgres" in settings.DATABASE_URL:
            logger.info("üêò –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
            engine = create_engine(
                settings.DATABASE_URL,
                pool_size=10,
                max_overflow=20,
                pool_pre_ping=True,
                echo=settings.DEBUG
            )
        else:
            logger.warning("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            engine = create_engine(settings.DATABASE_URL, echo=settings.DEBUG)
        
        logger.info("‚úÖ –î–≤–∏–∂–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return engine
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–≤–∏–∂–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

# –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫
engine = create_database_engine()

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π
SessionLocal = sessionmaker(
    autocommit=False,
    autoflush=False,
    bind=engine
)

# –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–¥–µ–ª–µ–π
Base = declarative_base()

# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ë–î
def get_db():
    """
    Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
def create_tables():
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    logger.info("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    try:
        Base.metadata.create_all(bind=engine)
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
        raise

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
async def check_database_connection():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        db = SessionLocal()
        db.execute("SELECT 1")
        db.close()
        return True
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False 