"""
–°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""
import logging
from sqlalchemy.orm import Session

from src.db.database import SessionLocal, create_tables
from src.crud.crud_user import user as crud_user
from src.schemas.user import UserCreate
from src.core.config import settings

logger = logging.getLogger(__name__)


def init_db(db: Session = None) -> None:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –∏ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    create_tables()
    
    if db is None:
        db = SessionLocal()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        superuser = crud_user.get_by_email(db, email="admin@itarent.com")
        
        if not superuser:
            logger.info("üë§ –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
            user_in = UserCreate(
                email="admin@itarent.com",
                password="admin123456",  # –í production –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω
                first_name="Admin",
                last_name="User"
            )
            superuser = crud_user.create(db, obj_in=user_in)
            
            # –î–µ–ª–∞–µ–º –µ–≥–æ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            superuser.is_superuser = True
            superuser.subscription_type = "premium"
            db.add(superuser)
            db.commit()
            db.refresh(superuser)
            
            logger.info(f"‚úÖ –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {superuser.email}")
        else:
            logger.info("üë§ –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise
    finally:
        db.close()


def create_sample_data(db: Session = None) -> None:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    """
    if settings.ENVIRONMENT != "development":
        logger.warning("‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ –≤ development –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
        return
    
    logger.info("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    if db is None:
        db = SessionLocal()
    
    try:
        from src.crud.crud_listing import listing as crud_listing
        from src.schemas.listing import ListingCreate
        from datetime import datetime
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        sample_listings = [
            {
                "external_id": "test_1",
                "source": "idealista",
                "url": "https://www.idealista.it/test/1",
                "title": "–£—é—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –†–∏–º–∞",
                "description": "–ü—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–º —Ü–µ–Ω—Ç—Ä–µ",
                "price": 1500.0,
                "property_type": "apartment",
                "rooms": 2,
                "area": 80.0,
                "city": "Roma",
                "address": "Via del Corso, 123",
                "images": ["https://example.com/image1.jpg"],
                "is_active": True
            },
            {
                "external_id": "test_2", 
                "source": "idealista",
                "url": "https://www.idealista.it/test/2",
                "title": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç—É–¥–∏—è –≤ –ú–∏–ª–∞–Ω–µ",
                "description": "–°—Ç–∏–ª—å–Ω–∞—è —Å—Ç—É–¥–∏—è –≤ –¥–µ–ª–æ–≤–æ–º —Ä–∞–π–æ–Ω–µ",
                "price": 1200.0,
                "property_type": "studio",
                "rooms": 1,
                "area": 45.0,
                "city": "Milano",
                "address": "Via Brera, 456",
                "images": ["https://example.com/image2.jpg"],
                "is_active": True
            },
            {
                "external_id": "test_3",
                "source": "immobiliare",
                "url": "https://www.immobiliare.it/test/3",
                "title": "–î–æ–º —Å —Å–∞–¥–æ–º –≤–æ –§–ª–æ—Ä–µ–Ω—Ü–∏–∏",
                "description": "–ö—Ä–∞—Å–∏–≤—ã–π –¥–æ–º —Å —á–∞—Å—Ç–Ω—ã–º —Å–∞–¥–æ–º",
                "price": 2200.0,
                "property_type": "house",
                "rooms": 4,
                "area": 150.0,
                "city": "Firenze",
                "address": "Via dei Giardini, 789",
                "images": ["https://example.com/image3.jpg"],
                "furnished": True,
                "pets_allowed": True,
                "is_active": True
            }
        ]
        
        for listing_data in sample_listings:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            existing = crud_listing.get_by_external_id(
                db, 
                source=listing_data["source"], 
                external_id=listing_data["external_id"]
            )
            
            if not existing:
                listing_in = ListingCreate(**listing_data)
                crud_listing.create(db, obj_in=listing_in)
                logger.info(f"üìù –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: {listing_data['title']}")
        
        logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise
    finally:
        db.close()


if __name__ == "__main__":
    """
    –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    """
    logging.basicConfig(level=logging.INFO)
    
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ITA_RENT_BOT...")
    init_db()
    
    if settings.ENVIRONMENT == "development":
        print("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        create_sample_data()
    
    print("‚úÖ –ì–æ—Ç–æ–≤–æ!") 