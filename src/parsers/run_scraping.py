#!/usr/bin/env python3
"""
üöÄ –°–ö–†–ò–ü–¢ –î–õ–Ø –ó–ê–ü–£–°–ö–ê –ü–ê–†–°–ò–ù–ì–ê IMMOBILIARE.IT

–ü–∞—Ä—Å–∏—Ç –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É https://www.immobiliare.it/affitto-case/roma/
–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    cd src/parsers
    python run_scraping.py
    
–ò–ª–∏ –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞:
    python src/parsers/run_scraping.py
"""
import sys
import asyncio
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

from src.parsers.immobiliare_parser import ImmobiliareParser
from src.services.scraping_service import ScrapingService
from src.db.database import SessionLocal

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
    """
    print("üöÄ –ó–ê–ü–£–°–ö –ü–ê–†–°–ò–ù–ì–ê IMMOBILIARE.IT")
    print("=" * 60)
    print("üéØ –¶–µ–ª—å: https://www.immobiliare.it/affitto-case/roma/")
    print("üìã –ó–∞–¥–∞—á–∞: –°–ø–∞—Ä—Å–∏—Ç—å –í–°–ï –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –í–°–ï —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
    print("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    
    # –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    import sys
    enable_geocoding = True
    
    if len(sys.argv) > 1 and sys.argv[1] == "--no-geo":
        enable_geocoding = False
        print("üöÄ –†–ï–ñ–ò–ú: –ë–ï–ó –ì–ï–û–ö–û–î–ò–†–û–í–ê–ù–ò–Ø (—É—Å–∫–æ—Ä–µ–Ω–∏–µ ~4%)")
    else:
        print("üó∫Ô∏è  –†–ï–ñ–ò–ú: –° –ì–ï–û–ö–û–î–ò–†–û–í–ê–ù–ò–ï–ú (–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
    
    print("üí° –î–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –Ω–∞ 4%: python run_scraping.py --no-geo")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    parser = ImmobiliareParser(enable_geocoding=enable_geocoding)
    scraping_service = ScrapingService()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ScraperAPI –∫–ª—é—á
    if not parser.scraperapi_key:
        print("‚ùå –û–®–ò–ë–ö–ê: SCRAPERAPI_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        print("üí° –î–æ–±–∞–≤—å—Ç–µ SCRAPERAPI_KEY –≤ —Ñ–∞–π–ª .env")
        return
    
    print(f"‚úÖ ScraperAPI –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ (–º–∞–∫—Å–∏–º—É–º 10 —Å—Ç—Ä–∞–Ω–∏—Ü)
        print(f"\nüîÑ –ù–ê–ß–ò–ù–ê–ï–ú –ê–°–ò–ù–•–†–û–ù–ù–´–ô –ü–ê–†–°–ò–ù–ì...")
        print(f"‚ö° –í—Å–µ {10} —Å—Ç—Ä–∞–Ω–∏—Ü –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ!")
        
        import time
        start_time = time.time()
        
        listings = await parser.scrape_all_listings(max_pages=10)
        
        end_time = time.time()
        execution_time = end_time - start_time
        
        if not listings:
            print("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–°–ò–ù–•–†–û–ù–ù–û–ì–û –ü–ê–†–°–ò–ù–ì–ê:")
        print(f"   üìã –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(listings)}")
        print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"   ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {len(listings)/execution_time:.2f} –æ–±—ä—è–≤–ª–µ–Ω–∏–π/—Å–µ–∫")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º
        total_photos = sum(len(listing.get('images', [])) for listing in listings)
        listings_with_photos = sum(1 for listing in listings if listing.get('images'))
        
        print(f"   üì∏ –í—Å–µ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {total_photos}")
        print(f"   üñºÔ∏è  –û–±—ä—è–≤–ª–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ: {listings_with_photos}/{len(listings)}")
        print(f"   üì∑ –°—Ä–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: {total_photos/len(listings):.1f}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
        with_coords = sum(1 for listing in listings if listing.get('latitude') and listing.get('longitude'))
        print(f"   üó∫Ô∏è  –° –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: {with_coords}/{len(listings)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ë–ê–ó–£ –î–ê–ù–ù–´–•...")
        
        db = SessionLocal()
        try:
            saved_stats = scraping_service.save_listings_to_db(listings, db)
            
            print(f"‚úÖ –°–û–•–†–ê–ù–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û:")
            print(f"   ‚ûï –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö: {saved_stats['created']}")
            print(f"   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {saved_stats['updated']}")
            print(f"   ‚ùå –û—à–∏–±–æ–∫: {saved_stats['errors']}")
            
        finally:
            db.close()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        print(f"\nüè† –ü–†–ò–ú–ï–†–´ –û–ë–™–Ø–í–õ–ï–ù–ò–ô:")
        print("-" * 60)
        
        for i, listing in enumerate(listings[:3], 1):
            print(f"{i}. {listing.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:50]}...")
            print(f"   üÜî ID: {listing.get('external_id', 'N/A')}")
            print(f"   üí∞ –¶–µ–Ω–∞: {listing.get('price', 'N/A')}‚Ç¨/–º–µ—Å—è—Ü")
            print(f"   üìê –ü–ª–æ—â–∞–¥—å: {listing.get('area', 'N/A')} –º¬≤")
            print(f"   üö™ –ö–æ–º–Ω–∞—Ç: {listing.get('rooms', 'N/A')}")
            print(f"   üì∏ –§–æ—Ç–æ: {len(listing.get('images', []))} —à—Ç.")
            print(f"   üó∫Ô∏è  –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {'‚úÖ' if listing.get('latitude') else '‚ùå'}")
            print(f"   üîó URL: {listing.get('url', 'N/A')}")
            print()
        
        print("üéâ –ü–ê–†–°–ò–ù–ì –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")


if __name__ == "__main__":
    asyncio.run(main()) 