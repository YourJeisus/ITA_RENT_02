#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢–û–í–´–ô –°–ö–†–ò–ü–¢ –î–õ–Ø –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ê–°–ò–ù–•–†–û–ù–ù–û–ì–û –ü–ê–†–°–ï–†–ê
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—É—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É ScraperAPI
- ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (~20+ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ)
- ‚úÖ –£–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–Ω—É—é –ª–æ–≥–∏–∫—É —Ç–∏–ø–æ–≤ –∂–∏–ª—å—è –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
- ‚úÖ –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ OpenStreetMap API

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python src/parsers/test_enhanced_async_scraper.py [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å—Ç—Ä–∞–Ω–∏—Ü]
    
–ü—Ä–∏–º–µ—Ä—ã:
    python src/parsers/test_enhanced_async_scraper.py 1    # –¢–µ—Å—Ç 1 —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    python src/parsers/test_enhanced_async_scraper.py 2    # –¢–µ—Å—Ç 2 —Å—Ç—Ä–∞–Ω–∏—Ü
"""
import sys
import os
import asyncio
import logging
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))

from src.parsers.immobiliare_parser_async import ImmobiliareAsyncParser
from src.core.config import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler(f'enhanced_async_test_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log')
    ]
)

logger = logging.getLogger(__name__)


async def test_photo_extraction():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    logger.info("üß™ –¢–ï–°–¢ 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
    
    parser = ImmobiliareAsyncParser(enable_geocoding=False)  # –ë–µ–∑ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        listings = await parser.scrape_listings(max_pages=1)
        
        if not listings:
            logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
            return False
        
        logger.info(f"üìä –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è {len(listings)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π:")
        
        photo_counts = []
        property_types = {}
        
        for i, listing in enumerate(listings[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            photos = listing.get('images', [])
            photo_count = len(photos)
            photo_counts.append(photo_count)
            
            prop_type = listing.get('property_type', 'unknown')
            property_types[prop_type] = property_types.get(prop_type, 0) + 1
            
            logger.info(f"   {i}. {listing.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:50]}...")
            logger.info(f"      üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {photo_count}")
            logger.info(f"      üè† –¢–∏–ø: {prop_type}")
            logger.info(f"      üí∞ –¶–µ–Ω–∞: {listing.get('price', 'N/A')}‚Ç¨")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            if photos:
                logger.info(f"      üîó –ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ç–æ:")
                for j, photo_url in enumerate(photos[:3], 1):
                    logger.info(f"         {j}. {photo_url}")
        
        if photo_counts:
            avg_photos = sum(photo_counts) / len(photo_counts)
            max_photos = max(photo_counts)
            min_photos = min(photo_counts)
            
            logger.info(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:")
            logger.info(f"   üìä –°—Ä–µ–¥–Ω–µ–µ: {avg_photos:.1f} —Ñ–æ—Ç–æ/–æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
            logger.info(f"   üìà –ú–∞–∫—Å–∏–º—É–º: {max_photos} —Ñ–æ—Ç–æ")
            logger.info(f"   üìâ –ú–∏–Ω–∏–º—É–º: {min_photos} —Ñ–æ—Ç–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Å—Ä–µ–¥–Ω–µ–º –ø–æ–ª—É—á–∞–µ–º –º–Ω–æ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            if avg_photos >= 15:
                logger.info("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π ({avg_photos:.1f}) –º–µ–Ω—å—à–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ (15+)")
                return False
        
        logger.info(f"üè† –¢–∏–ø—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:")
        for prop_type, count in property_types.items():
            logger.info(f"   {prop_type}: {count}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {e}")
        return False


async def test_property_type_classification():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é —Ç–∏–ø–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
    logger.info("üß™ –¢–ï–°–¢ 2: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
    
    parser = ImmobiliareAsyncParser(enable_geocoding=False)
    
    try:
        listings = await parser.scrape_listings(max_pages=2)
        
        if not listings:
            logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤")
            return False
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        property_types = {}
        type_examples = {}
        
        for listing in listings:
            prop_type = listing.get('property_type', 'unknown')
            title = listing.get('title', '')
            
            property_types[prop_type] = property_types.get(prop_type, 0) + 1
            
            if prop_type not in type_examples:
                type_examples[prop_type] = []
            if len(type_examples[prop_type]) < 2:  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ 2 –ø—Ä–∏–º–µ—Ä–∞ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
                type_examples[prop_type].append(title[:60])
        
        logger.info(f"üè† –ù–∞–π–¥–µ–Ω–æ —Ç–∏–ø–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: {len(property_types)}")
        
        expected_types = ['apartment', 'house', 'studio', 'room']
        found_expected_types = 0
        
        for prop_type, count in property_types.items():
            logger.info(f"   {prop_type}: {count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
            if prop_type in type_examples:
                logger.info(f"      –ü—Ä–∏–º–µ—Ä—ã:")
                for example in type_examples[prop_type]:
                    logger.info(f"        ‚Ä¢ {example}...")
            
            if prop_type in expected_types:
                found_expected_types += 1
        
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤: {found_expected_types}/{len(expected_types)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç
        if found_expected_types >= 2:  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–∞
            logger.info("‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return True
        else:
            logger.warning("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –º–∞–ª–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
            return False
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        return False


async def test_geocoding():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ OpenStreetMap"""
    logger.info("üß™ –¢–ï–°–¢ 3: –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ OpenStreetMap")
    
    parser = ImmobiliareAsyncParser(enable_geocoding=True)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger.info("üó∫Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤...")
        
        test_addresses = [
            "Via del Corso 123",
            "Piazza di Spagna 1", 
            "Via Nazionale 50"
        ]
        
        geocoding_results = []
        for address in test_addresses:
            logger.info(f"   –ì–µ–æ–∫–æ–¥–∏—Ä—É–µ–º: {address}")
            lat, lon = await parser._geocode_address(address, "Roma, Italy")
            
            if lat and lon:
                logger.info(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {lat:.6f}, {lon:.6f}")
                geocoding_results.append(True)
            else:
                logger.info(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å")
                geocoding_results.append(False)
        
        geocoding_success_rate = sum(geocoding_results) / len(geocoding_results) * 100
        logger.info(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {geocoding_success_rate:.1f}%")
        
        # –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö
        logger.info("üè† –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö...")
        
        listings = await parser.scrape_listings(max_pages=1)
        
        if not listings:
            logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è")
            return geocoding_success_rate >= 50  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä—è–º–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        
        coords_from_json = 0
        coords_from_geocoding = 0
        no_coords = 0
        
        for listing in listings[:10]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10
            lat = listing.get('latitude')
            lon = listing.get('longitude')
            address = listing.get('address', '')
            
            if lat and lon:
                if address and len(address) > 10:
                    coords_from_geocoding += 1
                    logger.debug(f"üó∫Ô∏è –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ: {address} -> {lat:.6f}, {lon:.6f}")
                else:
                    coords_from_json += 1
                    logger.debug(f"üìç –ò–∑ JSON: {lat:.6f}, {lon:.6f}")
            else:
                no_coords += 1
                logger.debug(f"‚ùå –ë–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {listing.get('title', 'N/A')[:50]}")
        
        total_tested = coords_from_json + coords_from_geocoding + no_coords
        coords_success_rate = (coords_from_json + coords_from_geocoding) / total_tested * 100
        
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è {total_tested} –æ–±—ä—è–≤–ª–µ–Ω–∏–π:")
        logger.info(f"   üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ JSON: {coords_from_json}")
        logger.info(f"   üó∫Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ: {coords_from_geocoding}")
        logger.info(f"   ‚ùå –ë–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {no_coords}")
        logger.info(f"   üìà –û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {coords_success_rate:.1f}%")
        
        # –°—á–∏—Ç–∞–µ–º —Ç–µ—Å—Ç —É—Å–ø–µ—à–Ω—ã–º, –µ—Å–ª–∏ >= 70% –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–º–µ—é—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        if coords_success_rate >= 70:
            logger.info("‚úÖ –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
            return True
        else:
            logger.warning(f"‚ö†Ô∏è –ù–∏–∑–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {coords_success_rate:.1f}%")
            return False
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False


async def test_full_integration(max_pages: int = 1):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    logger.info(f"üß™ –¢–ï–°–¢ 4: –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ({max_pages} —Å—Ç—Ä–∞–Ω–∏—Ü)")
    
    parser = ImmobiliareAsyncParser(enable_geocoding=True)
    
    try:
        start_time = asyncio.get_event_loop().time()
        listings = await parser.scrape_listings(max_pages=max_pages)
        end_time = asyncio.get_event_loop().time()
        
        elapsed_time = end_time - start_time
        
        if not listings:
            logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ç–µ—Å—Ç–µ")
            return False
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        photo_counts = [len(listing.get('images', [])) for listing in listings]
        coords_count = sum(1 for listing in listings if listing.get('latitude') and listing.get('longitude'))
        property_types = {}
        
        for listing in listings:
            prop_type = listing.get('property_type', 'unknown')
            property_types[prop_type] = property_types.get(prop_type, 0) + 1
        
        avg_photos = sum(photo_counts) / len(photo_counts) if photo_counts else 0
        coords_percentage = (coords_count / len(listings)) * 100
        
        logger.info(f"üéâ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ê:")
        logger.info(f"   ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_time:.1f}—Å")
        logger.info(f"   üìã –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(listings)}")
        logger.info(f"   üì∏ –°—Ä–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ/–æ–±—ä—è–≤–ª–µ–Ω–∏–µ: {avg_photos:.1f}")
        logger.info(f"   üó∫Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏–π —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: {coords_count}/{len(listings)} ({coords_percentage:.1f}%)")
        logger.info(f"   üè† –¢–∏–ø–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: {len(property_types)}")
        
        for prop_type, count in property_types.items():
            logger.info(f"      {prop_type}: {count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
        logger.info(f"   üìù –ü—Ä–∏–º–µ—Ä—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π:")
        for i, listing in enumerate(listings[:3], 1):
            logger.info(f"      {i}. {listing.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:50]}...")
            logger.info(f"         üí∞ {listing.get('price', 'N/A')}‚Ç¨ | üè† {listing.get('property_type', 'N/A')}")
            logger.info(f"         üì∏ {len(listing.get('images', []))} —Ñ–æ—Ç–æ | üó∫Ô∏è {'‚úÖ' if listing.get('latitude') else '‚ùå'} –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        success_criteria = [
            avg_photos >= 10,  # –í —Å—Ä–µ–¥–Ω–µ–º >= 10 —Ñ–æ—Ç–æ
            coords_percentage >= 50,  # >= 50% —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
            len(property_types) >= 2,  # >= 2 —Ç–∏–ø–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
            len(listings) >= 5  # >= 5 –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ
        ]
        
        passed_criteria = sum(success_criteria)
        logger.info(f"üìä –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {passed_criteria}/{len(success_criteria)}")
        
        if passed_criteria >= 3:
            logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ü–†–û–ô–î–ï–ù!")
            return True
        else:
            logger.warning("‚ö†Ô∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ù–ï –ü–†–û–ô–î–ï–ù")
            return False
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ç–µ—Å—Ç–µ: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ê–°–ò–ù–•–†–û–ù–ù–û–ì–û –ü–ê–†–°–ï–†–ê")
    logger.info(f"üîë SCRAPERAPI_KEY –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {'‚úÖ' if settings.SCRAPERAPI_KEY else '‚ùå'}")
    
    if not settings.SCRAPERAPI_KEY:
        logger.error("‚ùå SCRAPERAPI_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    max_pages = 1
    if len(sys.argv) > 1:
        try:
            max_pages = int(sys.argv[1])
        except ValueError:
            logger.warning("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º 1 —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    logger.info(f"üìÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å {max_pages} —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏")
    
    tests_results = []
    
    # –¢–µ—Å—Ç 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    try:
        result1 = await test_photo_extraction()
        tests_results.append(("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π", result1))
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ 1: {e}")
        tests_results.append(("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π", False))
    
    # –¢–µ—Å—Ç 2: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–æ–≤
    try:
        result2 = await test_property_type_classification()
        tests_results.append(("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–æ–≤", result2))
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ 2: {e}")
        tests_results.append(("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–æ–≤", False))
    
    # –¢–µ—Å—Ç 3: –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
    try:
        result3 = await test_geocoding()
        tests_results.append(("–ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ", result3))
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ 3: {e}")
        tests_results.append(("–ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ", False))
    
    # –¢–µ—Å—Ç 4: –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    try:
        result4 = await test_full_integration(max_pages)
        tests_results.append(("–ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", result4))
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ 4: {e}")
        tests_results.append(("–ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    passed = 0
    for test_name, result in tests_results:
        status = "‚úÖ –ü–†–û–®–ï–õ" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        logger.info(f"   {status}: {test_name}")
        if result:
            passed += 1
    
    total_tests = len(tests_results)
    logger.info(f"üìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ ({(passed/total_tests)*100:.1f}%)")
    
    if passed == total_tests:
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
    elif passed >= total_tests * 0.75:
        logger.info("‚úÖ –ë–û–õ–¨–®–ò–ù–°–¢–í–û –¢–ï–°–¢–û–í –ü–†–û–®–õ–ò! –ü–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ.")
    else:
        logger.warning("‚ö†Ô∏è –ú–ù–û–ì–ò–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ò–õ–ò–°–¨. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")


if __name__ == "__main__":
    asyncio.run(main()) 