#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢–û–í–´–ô –°–ö–†–ò–ü–¢ –¢–û–õ–¨–ö–û –î–õ–Ø FALLBACK –ú–ï–¢–û–î–ê
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—ã—á–Ω—ã–π ScraperAPI –±–µ–∑ async —Ñ—É–Ω–∫—Ü–∏–π

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python src/parsers/test_fallback_only.py
"""
import sys
import os
import asyncio
import logging
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))

from src.parsers.immobiliare_parser_async import ImmobiliareAsyncParser
from src.core.config import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler(f'fallback_test_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log')
    ]
)

logger = logging.getLogger(__name__)


async def test_fallback_only():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ fallback –º–µ—Ç–æ–¥ –Ω–∞ 3 —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö"""
    logger.info("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –¢–û–õ–¨–ö–û FALLBACK –ú–ï–¢–û–î–ê")
    logger.info(f"üîë SCRAPERAPI_KEY –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {'‚úÖ' if settings.SCRAPERAPI_KEY else '‚ùå'}")
    
    if not settings.SCRAPERAPI_KEY:
        logger.error("‚ùå SCRAPERAPI_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ .env —Ñ–∞–π–ª–µ")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä –±–µ–∑ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    parser = ImmobiliareAsyncParser(enable_geocoding=False)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º fallback –Ω–∞ 3 —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
    max_pages = 3
    logger.info(f"üìÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º fallback –Ω–∞ {max_pages} —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö...")
    
    start_time = asyncio.get_event_loop().time()
    
    try:
        all_listings = []
        successful_pages = 0
        
        # –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ fallback
        for page_num in range(1, max_pages + 1):
            logger.info(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_num}...")
            
            page_listings = await parser.scrape_page_fallback(page_num)
            
            if page_listings:
                all_listings.extend(page_listings)
                successful_pages += 1
                logger.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}: –Ω–∞–π–¥–µ–Ω–æ {len(page_listings)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
            else:
                logger.warning(f"‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}: –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        end_time = asyncio.get_event_loop().time()
        elapsed_time = end_time - start_time
        
        # –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è
        unique_listings = []
        seen_ids = set()
        
        for listing in all_listings:
            listing_id = listing.get('external_id')
            if listing_id and listing_id not in seen_ids:
                seen_ids.add(listing_id)
                unique_listings.append(listing)
        
        logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ FALLBACK –¢–ï–°–¢–ê:")
        logger.info(f"   ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {elapsed_time:.1f}—Å")
        logger.info(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü: {successful_pages}/{max_pages}")
        logger.info(f"   üìã –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(all_listings)}")
        logger.info(f"   üîÑ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(unique_listings)}")
        
        if unique_listings:
            # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            photo_counts = [len(listing.get('images', [])) for listing in unique_listings]
            avg_photos = sum(photo_counts) / len(photo_counts) if photo_counts else 0
            
            property_types = {}
            for listing in unique_listings:
                prop_type = listing.get('property_type', 'unknown')
                property_types[prop_type] = property_types.get(prop_type, 0) + 1
            
            logger.info(f"   üì∏ –°—Ä–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ/–æ–±—ä—è–≤–ª–µ–Ω–∏–µ: {avg_photos:.1f}")
            logger.info(f"   üè† –¢–∏–ø—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: {list(property_types.keys())}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
            logger.info(f"   üìù –ü—Ä–∏–º–µ—Ä—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π:")
            for i, listing in enumerate(unique_listings[:3], 1):
                title = listing.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:50]
                price = listing.get('price', 'N/A')
                prop_type = listing.get('property_type', 'N/A')
                photos = len(listing.get('images', []))
                
                logger.info(f"      {i}. {title}...")
                logger.info(f"         üí∞ {price}‚Ç¨ | üè† {prop_type} | üì∏ {photos} —Ñ–æ—Ç–æ")
            
            # –û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
            if len(unique_listings) >= 5 and successful_pages >= 1:
                logger.info("üéâ FALLBACK –¢–ï–°–¢ –£–°–ü–ï–®–ï–ù! –ú–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
                return True
            else:
                logger.warning("‚ö†Ô∏è FALLBACK –¢–ï–°–¢ –ß–ê–°–¢–ò–ß–ù–û –£–°–ü–ï–®–ï–ù.")
                return len(unique_listings) > 0
        else:
            logger.error("‚ùå FALLBACK –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù. –û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return False
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ fallback —Ç–µ—Å—Ç–µ: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    result = await test_fallback_only()
    
    if result:
        logger.info("‚úÖ Fallback —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        logger.error("‚ùå Fallback —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ!")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main()) 