"""
Email —Å–µ—Ä–≤–∏—Å –¥–ª—è ITA_RENT_BOT
–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–µ —á–µ—Ä–µ–∑ Mailtrap Email API –∏–ª–∏ SMTP
"""
import logging
import asyncio
import requests
from typing import Optional
from datetime import datetime

from src.core.config import settings

logger = logging.getLogger(__name__)


class EmailService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Mailtrap API"""
    
    def __init__(self):
        self.provider = settings.EMAIL_API_PROVIDER
        self.mailtrap_token = settings.MAILTRAP_API_TOKEN
        self.mailtrap_account_id = settings.MAILTRAP_ACCOUNT_ID
        self.sender_email = settings.MAILTRAP_SENDER_EMAIL
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if self.provider == "mailtrap":
            if not all([self.mailtrap_token, self.mailtrap_account_id]):
                logger.warning("‚ö†Ô∏è Mailtrap Email API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
                self.enabled = False
            else:
                self.enabled = True
                logger.info(f"‚úÖ Email —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: Mailtrap Email API")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π email provider: {self.provider}")
            self.enabled = False
    
    def is_enabled(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ email —Å–µ—Ä–≤–∏—Å–∞"""
        return self.enabled
    
    async def send_email(
        self,
        to_email: str,
        subject: str,
        body: str,
        html_body: Optional[str] = None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ email —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Mailtrap API
        
        Args:
            to_email: Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            subject: –¢–µ–º–∞ –ø–∏—Å—å–º–∞
            body: –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞
            html_body: HTML –≤–µ—Ä—Å–∏—è –ø–∏—Å—å–º–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        if not self.enabled:
            logger.warning("Email —Å–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É")
            return False
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio.to_thread –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
            result = await asyncio.to_thread(
                self._send_via_mailtrap_api,
                to_email,
                subject,
                body,
                html_body
            )
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –Ω–∞ {to_email}: {e}")
            return False
    
    def _send_via_mailtrap_api(
        self,
        to_email: str,
        subject: str,
        body: str,
        html_body: Optional[str] = None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Mailtrap API (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥)
        """
        try:
            url = f"https://send.api.mailtrap.io/api/send"
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º payload
            payload = {
                "from": {
                    "email": self.sender_email,
                    "name": "ITA Rent Bot"
                },
                "to": [
                    {
                        "email": to_email
                    }
                ],
                "subject": subject,
                "text": body,
                "category": "notification"
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º HTML –µ—Å–ª–∏ –µ—Å—Ç—å
            if html_body:
                payload["html"] = html_body
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            headers = {
                "Authorization": f"Bearer {self.mailtrap_token}",
                "Content-Type": "application/json"
            }
            
            response = requests.post(url, json=payload, headers=headers, timeout=10)
            
            if response.status_code in [200, 201]:
                logger.info(f"‚úÖ Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {to_email}")
                return True
            else:
                logger.error(f"‚ùå Mailtrap API –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Mailtrap API –¥–ª—è {to_email}: {e}")
            return False
    
    async def send_listing_notification_email(
        self,
        to_email: str,
        listings: List[dict],
        filter_name: str
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö
        
        Args:
            to_email: Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            listings: –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            filter_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        if not listings:
            return False
        
        subject = f"üè† ITA Rent: {len(listings)} –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ —Ñ–∏–ª—å—Ç—Ä—É '{filter_name}'"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        body = self._format_listings_text(listings, filter_name)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º HTML –≤–µ—Ä—Å–∏—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        html_body = self._format_listings_html(listings, filter_name)
        
        return await self.send_email(to_email, subject, body, html_body)
    
    def _format_listings_text(self, listings: List[dict], filter_name: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        lines = [
            f"–ù–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —Ñ–∏–ª—å—Ç—Ä—É: {filter_name}",
            f"–ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(listings)}",
            "",
            "=" * 50,
            ""
        ]
        
        for i, listing in enumerate(listings[:10], 1):  # –ú–∞–∫—Å–∏–º—É–º 10 –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            lines.append(f"{i}. {listing.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            lines.append(f"   –¶–µ–Ω–∞: ‚Ç¨{listing.get('price', 'N/A')}")
            
            if listing.get('rooms'):
                lines.append(f"   –ö–æ–º–Ω–∞—Ç: {listing.get('rooms')}")
            
            if listing.get('area'):
                lines.append(f"   –ü–ª–æ—â–∞–¥—å: {listing.get('area')} –º¬≤")
            
            if listing.get('address'):
                lines.append(f"   –ê–¥—Ä–µ—Å: {listing.get('address')}")
            
            if listing.get('city'):
                lines.append(f"   –ì–æ—Ä–æ–¥: {listing.get('city')}")
            
            if listing.get('url'):
                lines.append(f"   –°—Å—ã–ª–∫–∞: {listing.get('url')}")
            
            lines.append("")
        
        if len(listings) > 10:
            lines.append(f"... –∏ –µ—â–µ {len(listings) - 10} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
            lines.append("")
        
        lines.extend([
            "",
            "=" * 50,
            "",
            "–° —É–≤–∞–∂–µ–Ω–∏–µ–º,",
            "–ö–æ–º–∞–Ω–¥–∞ ITA Rent",
            "",
            "–ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∑–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è."
        ])
        
        return "\n".join(lines)
    
    def _format_listings_html(self, listings: List[dict], filter_name: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ HTML —Ñ–æ—Ä–º–∞—Ç"""
        listings_html = []
        
        for listing in listings[:10]:  # –ú–∞–∫—Å–∏–º—É–º 10 –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            listing_html = f"""
            <div style="border: 1px solid #e0e0e0; border-radius: 8px; padding: 16px; margin-bottom: 16px; background-color: #ffffff;">
                <h3 style="margin: 0 0 8px 0; color: #2563eb;">{listing.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</h3>
                <p style="margin: 4px 0; font-size: 18px; font-weight: bold; color: #1f2937;">‚Ç¨{listing.get('price', 'N/A')}</p>
            """
            
            details = []
            if listing.get('rooms'):
                details.append(f"üö™ {listing.get('rooms')} –∫–æ–º–Ω.")
            if listing.get('area'):
                details.append(f"üìê {listing.get('area')} –º¬≤")
            
            if details:
                listing_html += f'<p style="margin: 4px 0; color: #6b7280;">{" ‚Ä¢ ".join(details)}</p>'
            
            if listing.get('address'):
                listing_html += f'<p style="margin: 4px 0; color: #6b7280;">üìç {listing.get("address")}</p>'
            
            if listing.get('url'):
                listing_html += f'<p style="margin: 8px 0 0 0;"><a href="{listing.get("url")}" style="color: #2563eb; text-decoration: none;">üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ‚Üí</a></p>'
            
            listing_html += "</div>"
            listings_html.append(listing_html)
        
        if len(listings) > 10:
            listings_html.append(f"<p style='text-align: center; color: #6b7280;'>... –∏ –µ—â–µ {len(listings) - 10} –æ–±—ä—è–≤–ª–µ–Ω–∏–π</p>")
        
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
        </head>
        <body style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #1f2937; background-color: #f9fafb; margin: 0; padding: 20px;">
            <div style="max-width: 600px; margin: 0 auto; background-color: #ffffff; border-radius: 12px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); overflow: hidden;">
                <div style="background: linear-gradient(135deg, #2563eb 0%, #1e40af 100%); color: white; padding: 24px; text-align: center;">
                    <h1 style="margin: 0; font-size: 24px;">üè† ITA Rent</h1>
                    <p style="margin: 8px 0 0 0; opacity: 0.9;">–ù–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –≤–∞—Å</p>
                </div>
                
                <div style="padding: 24px;">
                    <p style="margin: 0 0 16px 0; font-size: 16px; color: #374151;">
                        –ü–æ –≤–∞—à–µ–º—É —Ñ–∏–ª—å—Ç—Ä—É <strong>"{filter_name}"</strong> –Ω–∞–π–¥–µ–Ω–æ <strong>{len(listings)} –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π</strong>:
                    </p>
                    
                    {"".join(listings_html)}
                    
                    <div style="border-top: 1px solid #e5e7eb; margin-top: 24px; padding-top: 24px; text-align: center; color: #6b7280; font-size: 14px;">
                        <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br><strong>–ö–æ–º–∞–Ω–¥–∞ ITA Rent</strong></p>
                        <p style="margin-top: 16px;">
                            <a href="https://ita-rent-02.vercel.app/settings" style="color: #2563eb; text-decoration: none;">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏</a>
                        </p>
                    </div>
                </div>
            </div>
        </body>
        </html>
        """
        
        return html
    
    async def send_test_email(self, to_email: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ email
        
        Args:
            to_email: Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        subject = "üß™ ITA Rent: –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
        body = """
–ü—Ä–∏–≤–µ—Ç!

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ ITA Rent.

–ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ –ø–∏—Å—å–º–æ, –∑–Ω–∞—á–∏—Ç email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ! ‚úÖ

–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º –ø–æ–∏—Å–∫–∞.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ ITA Rent

–ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∑–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.
        """
        
        html_body = """
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
        </head>
        <body style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #1f2937; background-color: #f9fafb; margin: 0; padding: 20px;">
            <div style="max-width: 600px; margin: 0 auto; background-color: #ffffff; border-radius: 12px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); overflow: hidden;">
                <div style="background: linear-gradient(135deg, #10b981 0%, #059669 100%); color: white; padding: 24px; text-align: center;">
                    <h1 style="margin: 0; font-size: 28px;">üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</h1>
                </div>
                
                <div style="padding: 24px;">
                    <p style="font-size: 18px; color: #374151;">–ü—Ä–∏–≤–µ—Ç!</p>
                    
                    <p style="color: #6b7280;">–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ <strong>ITA Rent</strong>.</p>
                    
                    <div style="background-color: #d1fae5; border-left: 4px solid #10b981; padding: 16px; margin: 16px 0; border-radius: 4px;">
                        <p style="margin: 0; color: #065f46;">‚úÖ –ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ –ø–∏—Å—å–º–æ, –∑–Ω–∞—á–∏—Ç email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ!</p>
                    </div>
                    
                    <p style="color: #6b7280;">–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º –ø–æ–∏—Å–∫–∞.</p>
                    
                    <div style="border-top: 1px solid #e5e7eb; margin-top: 24px; padding-top: 24px; text-align: center; color: #6b7280; font-size: 14px;">
                        <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br><strong>–ö–æ–º–∞–Ω–¥–∞ ITA Rent</strong></p>
                        <p style="margin-top: 16px;">
                            <a href="https://ita-rent-02.vercel.app/settings" style="color: #2563eb; text-decoration: none;">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏</a>
                        </p>
                    </div>
                </div>
            </div>
        </body>
        </html>
        """
        
        return await self.send_email(to_email, subject, body, html_body)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
email_service = EmailService()

