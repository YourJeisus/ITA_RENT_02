"""
–°–µ—Ä–≤–∏—Å —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è ITA_RENT_BOT
MVP –≤–µ—Ä—Å–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö —á–µ—Ä–µ–∑ Telegram
"""
import asyncio
import logging
from datetime import datetime, timedelta, timezone
from typing import List, Optional, Dict, Any

from sqlalchemy.orm import Session

from src.core.config import settings
from src.db.database import get_db
from src.db.models import User, Filter, Listing, Notification, SentNotification
# from src.crud.crud_user import get_all_active_users  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ MVP
from src.crud.crud_filter import filter as crud_filter
from src.crud.crud_listing import search_listings
from src.services.telegram_bot import send_notification_to_user

logger = logging.getLogger(__name__)


class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self):
        self.db = None
        self._ensure_sent_notifications_table()
    
    def get_db(self) -> Session:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if not self.db:
            self.db = next(get_db())
        return self.db
    
    def _ensure_sent_notifications_table(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É sent_notifications –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
        try:
            from src.db.database import engine, Base
            # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã (–≤–∫–ª—é—á–∞—è SentNotification)
            Base.metadata.create_all(bind=engine)
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ sent_notifications –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞/—Å–æ–∑–¥–∞–Ω–∞")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã sent_notifications: {e}")
    
    def _save_sent_notifications(self, db, user_id: int, filter_id: int, listings: List):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å–∏ –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö —Å —É—á–µ—Ç–æ–º —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏
        """
        from src.core.config import settings
        debug_mode = settings.DEBUG_NOTIFICATIONS
        
        if debug_mode:
            # –í —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏: –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                listing_ids = [listing.id for listing in listings]
                deleted_count = db.query(SentNotification).filter(
                    SentNotification.user_id == user_id,
                    SentNotification.listing_id.in_(listing_ids)
                ).delete(synchronize_session=False)
                
                if deleted_count > 0:
                    logger.debug(f"üêõ [DEBUG] –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏")
                    
            except Exception as e:
                logger.warning(f"üêõ [DEBUG] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
        for listing in listings:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∑–∞–ø–∏—Å—å (–≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ)
                if not debug_mode:
                    existing = db.query(SentNotification).filter(
                        SentNotification.user_id == user_id,
                        SentNotification.listing_id == listing.id
                    ).first()
                    
                    if existing:
                        logger.debug(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ {listing.id} —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                        continue
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                sent_notification = SentNotification(
                    user_id=user_id,
                    filter_id=filter_id,
                    listing_id=listing.id,
                    notification_type="new_listing"
                )
                db.add(sent_notification)
                
            except Exception as e:
                if debug_mode:
                    logger.warning(f"üêõ [DEBUG] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è sent_notification –¥–ª—è listing {listing.id}: {e}")
                else:
                    logger.debug(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è sent_notification –¥–ª—è listing {listing.id}: {e}")
    
    def should_send_notification(self, user: User, filter_obj: Filter) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
        """
        from src.core.config import settings
        
        # –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
        debug_mode = settings.DEBUG_NOTIFICATIONS
        if debug_mode:
            if not filter_obj.is_active:
                logger.info(f"üêõ [DEBUG] –§–∏–ª—å—Ç—Ä {filter_obj.id} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ —Å–≤—è–∑–∏ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞
            has_telegram = bool(
                user.telegram_chat_id and
                user.telegram_notifications_enabled and
                filter_obj.notify_telegram
            )
            has_email = bool(
                (user.notification_email or user.email) and
                user.email_notifications_enabled and
                filter_obj.notify_email
            )
            has_whatsapp = bool(
                user.whatsapp_phone and
                user.whatsapp_enabled and
                settings.WHATSAPP_ENABLED and
                filter_obj.notify_whatsapp
            )
            
            if not has_telegram and not has_email and not has_whatsapp:
                logger.info(f"üêõ [DEBUG] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ {filter_obj.id}")
                return False
            
            logger.info(f"üêõ [DEBUG] –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ {filter_obj.id}")
            return True
        
        # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
        if not filter_obj.is_active:
            logger.info(f"‚ùå –§–∏–ª—å—Ç—Ä {filter_obj.id} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ —Å–≤—è–∑–∏ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞
        has_telegram = bool(
            user.telegram_chat_id and
            user.telegram_notifications_enabled and
            filter_obj.notify_telegram
        )
        has_email = bool(
            (user.notification_email or user.email) and
            user.email_notifications_enabled and
            filter_obj.notify_email
        )
        has_whatsapp = bool(
            user.whatsapp_phone and
            user.whatsapp_enabled and
            settings.WHATSAPP_ENABLED and
            filter_obj.notify_whatsapp
        )
        
        if not has_telegram and not has_email and not has_whatsapp:
            logger.info(f"‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ {filter_obj.id}")
            return False
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Å—Ç–æ—Ç—É –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 24 —á–∞—Å–∞)
        frequency_hours = filter_obj.notification_frequency_hours or 24
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 1 —á–∞—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if frequency_hours < 1:
            frequency_hours = 1
        notification_frequency = timedelta(hours=frequency_hours)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
        if filter_obj.last_notification_sent:
            now = datetime.now(timezone.utc)
            last_sent = filter_obj.last_notification_sent
            
            # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            if last_sent.tzinfo is None and now.tzinfo is not None:
                now = now.replace(tzinfo=None)
            elif last_sent.tzinfo is not None and now.tzinfo is None:
                last_sent = last_sent.replace(tzinfo=None)
            
            time_since_last = now - last_sent
            if time_since_last < notification_frequency:
                logger.info(f"‚è∞ –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ü—Ä–æ—à–ª–æ {time_since_last}, –Ω—É–∂–Ω–æ {notification_frequency}")
                return False
        
        logger.info(f"‚úÖ –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ {filter_obj.id}")
        return True
    
    def get_new_listings_for_filter(self, filter_obj: Filter, user_id: int) -> List[Listing]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ —Ñ–∏–ª—å—Ç—Ä—É —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        
        –õ–æ–≥–∏–∫–∞:
        1. –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —Ñ–∏–ª—å—Ç—Ä–∞ (–Ω–µ—Ç last_notification_sent) - –¥–æ 30 —Å–∞–º—ã—Ö —Å–≤–µ–∂–∏—Ö
        2. –ï—Å–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ - —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞ 24 —á–∞—Å–∞
        3. –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        """
        try:
            from src.core.config import settings
            db = self.get_db()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
            debug_mode = settings.DEBUG_NOTIFICATIONS
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
            is_first_run = filter_obj.last_notification_sent is None
            
            if debug_mode:
                logger.info(f"üêõ [DEBUG] –§–∏–ª—å—Ç—Ä {filter_obj.id}: {'–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫' if is_first_run else '–ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫'}")
            else:
                logger.info(f"üöÄ –§–∏–ª—å—Ç—Ä {filter_obj.id}: {'–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫' if is_first_run else '–ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫'}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞
            search_params = {
                "city": filter_obj.city,
                "min_price": filter_obj.min_price,
                "max_price": filter_obj.max_price,
                "property_type": filter_obj.property_type,
                "min_rooms": filter_obj.min_rooms,
                "max_rooms": filter_obj.max_rooms,
                "min_area": filter_obj.min_area,
                "max_area": filter_obj.max_area,
            }
            
            # –£–¥–∞–ª—è–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è
            search_params = {k: v for k, v in search_params.items() if v is not None}
            
            if debug_mode:
                logger.info(f"üêõ [DEBUG] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞: {search_params}")
            
            # –ò—â–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ CRUD
            from src.crud.crud_listing import listing as crud_listing
            
            if is_first_run or debug_mode:
                # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –∏–ª–∏ —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ - –±–µ—Ä–µ–º –¥–æ 30 —Å–∞–º—ã—Ö —Å–≤–µ–∂–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                all_listings = crud_listing.search(db, limit=30, **search_params)
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
                source_stats = {}
                for listing in all_listings:
                    source = listing.source or 'unknown'
                    source_stats[source] = source_stats.get(source, 0) + 1
                
                if debug_mode:
                    logger.info(f"üêõ [DEBUG] –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: –Ω–∞–π–¥–µ–Ω–æ {len(all_listings)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–ª–∏–º–∏—Ç 30)")
                    logger.info(f"üêõ [DEBUG] –ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º: {source_stats}")
                else:
                    logger.info(f"üîç –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: –Ω–∞–π–¥–µ–Ω–æ {len(all_listings)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–ª–∏–º–∏—Ç 30)")
                    logger.info(f"üìä –ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º: {source_stats}")
            else:
                # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ - —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞ 24 —á–∞—Å–∞
                since_time = datetime.now(timezone.utc) - timedelta(hours=24)
                all_listings = crud_listing.search(db, limit=50, **search_params)
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
                fresh_listings = []
                for listing in all_listings:
                    if listing.created_at:
                        listing_time = listing.created_at
                        compare_time = since_time
                        
                        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
                        if listing_time.tzinfo is None and compare_time.tzinfo is not None:
                            compare_time = compare_time.replace(tzinfo=None)
                        elif listing_time.tzinfo is not None and compare_time.tzinfo is None:
                            listing_time = listing_time.replace(tzinfo=None)
                        
                        if listing_time >= compare_time:
                            fresh_listings.append(listing)

                all_listings = fresh_listings
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
                source_stats = {}
                for listing in all_listings:
                    source = listing.source or 'unknown'
                    source_stats[source] = source_stats.get(source, 0) + 1
                
                logger.info(f"üîç –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫: –Ω–∞–π–¥–µ–Ω–æ {len(all_listings)} –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∑–∞ 24—á")
                logger.info(f"üìä –ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º: {source_stats}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            sent_listing_ids = set(
                row[0] for row in 
                db.query(SentNotification.listing_id)
                .filter(SentNotification.user_id == user_id)
                .all()
            )
            
            # –í–°–ï–ì–î–ê –∏—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            new_listings = [
                listing for listing in all_listings 
                if listing.id not in sent_listing_ids
            ]
            
            if debug_mode:
                logger.info(f"üêõ [DEBUG] –ù–∞–π–¥–µ–Ω–æ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö: {len(sent_listing_ids)}")
                logger.info(f"üêõ [DEBUG] –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ —Ñ–∏–ª—å—Ç—Ä—É: {len(all_listings)}")
                logger.info(f"üêõ [DEBUG] –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {len(new_listings)}")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏
                if new_listings:
                    new_source_stats = {}
                    for listing in new_listings:
                        source = listing.source or 'unknown'
                        new_source_stats[source] = new_source_stats.get(source, 0) + 1
                    logger.info(f"üêõ [DEBUG] –ö –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º: {new_source_stats}")
            else:
                logger.info(f"üìã –ò—Å–∫–ª—é—á–µ–Ω–æ {len(all_listings) - len(new_listings)} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(new_listings)} –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
                if new_listings:
                    final_source_stats = {}
                    for listing in new_listings:
                        source = listing.source or 'unknown'
                        final_source_stats[source] = final_source_stats.get(source, 0) + 1
                    logger.info(f"üìä –ö –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º: {final_source_stats}")
            
            return new_listings
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ {filter_obj.id}: {e}")
            return []
    
    def format_notification_message(self, listings: List[Listing], filter_obj: Filter) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π Markdown —Ä–∞–∑–º–µ—Ç–∫–∏
        """
        if not listings:
            return ""
        
        def clean_text(text: str) -> str:
            """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
            if not text:
                return ""
            return str(text).strip()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏)
        filter_name = clean_text(filter_obj.name)
        message = f"üè† –ù–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n"
        message += f"üîç –§–∏–ª—å—Ç—Ä: {filter_name}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏
        for i, listing in enumerate(listings[:5], 1):  # –ú–∞–∫—Å–∏–º—É–º 5 –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            title = clean_text(listing.title) if listing.title else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            if len(title) > 60:
                title = title[:57] + "..."
            
            address = clean_text(listing.address) if listing.address else "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω"
            if len(address) > 80:
                address = address[:77] + "..."
            
            price_text = f"{listing.price}‚Ç¨/–º–µ—Å" if listing.price else "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            details = []
            if listing.rooms:
                details.append(f"üö™ {listing.rooms} –∫–æ–º–Ω.")
            if listing.area:
                details.append(f"üìê {listing.area} –º¬≤")
            if listing.property_type:
                prop_type = clean_text(listing.property_type)
                details.append(f"üè† {prop_type}")
            
            details_text = " ‚Ä¢ ".join(details) if details else ""
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
            message += f"{i}. {title}\n"
            message += f"üìç {address}\n"
            message += f"üí∞ {price_text}\n"
            
            if details_text:
                message += f"{details_text}\n"
            
            # –°—Å—ã–ª–∫–∞ –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
            if listing.url:
                clean_url = str(listing.url).strip()
                message += f"üîó {clean_url}\n\n"
            else:
                message += "\n"
        
        # –ï—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –±–æ–ª—å—à–µ 5, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º
        if len(listings) > 5:
            message += f"...–∏ –µ—â–µ {len(listings) - 5} –æ–±—ä—è–≤–ª–µ–Ω–∏–π!\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å—Ç—Ä–µ
        if filter_obj.city:
            city = clean_text(filter_obj.city)
            message += f"üìç –ì–æ—Ä–æ–¥: {city}\n"
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–º
        message += f"\n/pause_{filter_obj.id} - –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä\n"
        message += "/filters - –≤—Å–µ –≤–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã"
        
        return message
    
    async def send_notification_for_filter(self, user: User, filter_obj: Filter, listings: List[Listing]) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Telegram, WhatsApp –∏ Email
        """
        try:
            from src.core.config import settings
            
            if not listings:
                return False
            
            telegram_success = False
            whatsapp_success = False
            email_success = False
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Telegram (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –≤ —Ñ–∏–ª—å—Ç—Ä–µ –∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            if (filter_obj.notify_telegram and 
                user.telegram_chat_id and 
                user.telegram_notifications_enabled):
                try:
                    from src.services.telegram_bot import send_listing_notification
                    
                    telegram_count = 0
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ Telegram
                    for listing in listings[:5]:  # –ú–∞–∫—Å–∏–º—É–º 5 –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∑–∞ —Ä–∞–∑
                        try:
                            notification_sent = await send_listing_notification(
                                telegram_chat_id=user.telegram_chat_id,
                                listing=listing,
                                filter_obj=filter_obj
                            )
                            
                            if notification_sent:
                                telegram_count += 1
                                
                            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
                            await asyncio.sleep(2)
                            
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ {listing.id}: {e}")
                            continue
                    
                    telegram_success = telegram_count > 0
                    if telegram_success:
                        logger.info(f"üì± Telegram: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {telegram_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.email}")
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Email (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –≤ —Ñ–∏–ª—å—Ç—Ä–µ –∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            if (filter_obj.notify_email and 
                user.email_notifications_enabled):
                try:
                    from src.services.email_service import email_service
                    from datetime import datetime, timedelta
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º notification_email –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏–Ω–∞—á–µ –æ—Å–Ω–æ–≤–Ω–æ–π email
                    notification_email = user.notification_email or user.email
                    
                    if not notification_email:
                        logger.warning(f"‚ö†Ô∏è User {user.id} has no notification email configured")
                    else:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã –Ω–µ–¥–∞–≤–Ω–æ email (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞)
                        can_send_email = True
                        if user.email_last_sent_at:
                            # –ú–∏–Ω–∏–º—É–º 1 —á–∞—Å –º–µ–∂–¥—É email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
                            time_since_last = datetime.now(timezone.utc).replace(tzinfo=None) - user.email_last_sent_at
                            if time_since_last < timedelta(hours=1):
                                can_send_email = False
                                logger.info(f"‚è∞ Email –¥–ª—è {notification_email} –ø—Ä–æ–ø—É—â–µ–Ω - —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ (–ø—Ä–æ—à–ª–æ {time_since_last})")
                        
                        if can_send_email and email_service.is_enabled():
                            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã Listing –≤ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è email
                            listings_data = []
                            for listing in listings[:10]:  # Email: –º–∞–∫—Å–∏–º—É–º 10 –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                                listings_data.append({
                                    'title': listing.title,
                                    'price': listing.price,
                                    'address': listing.address,
                                    'city': listing.city,
                                    'rooms': listing.rooms,
                                    'area': listing.area,
                                    'url': listing.url,
                                    'source': listing.source
                                })
                            
                            email_sent = await email_service.send_listing_notification_email(
                                to_email=notification_email,
                                listings=listings_data,
                                filter_name=filter_obj.name
                            )
                            
                            email_success = email_sent
                            if email_success:
                                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ email
                                db = self.get_db()
                                user.email_last_sent_at = datetime.now(timezone.utc).replace(tzinfo=None)
                                db.add(user)
                                db.commit()
                                logger.info(f"üìß Email: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å {len(listings_data)} –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ –Ω–∞ {notification_email}")
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ WhatsApp (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –≤ —Ñ–∏–ª—å—Ç—Ä–µ –∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            if (filter_obj.notify_whatsapp and
                user.whatsapp_phone and 
                user.whatsapp_enabled and 
                settings.WHATSAPP_ENABLED):
                try:
                    from src.services.whatsapp_service import send_whatsapp_listing_notification
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã Listing –≤ —Å–ª–æ–≤–∞—Ä–∏
                    listings_data = []
                    for listing in listings[:3]:  # WhatsApp: –º–∞–∫—Å–∏–º—É–º 3 –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                        listings_data.append({
                            'id': listing.id,
                            'title': listing.title,
                            'price': listing.price,
                            'address': listing.address,
                            'city': listing.city,
                            'rooms': listing.rooms,
                            'area': listing.area,
                            'url': listing.url,
                            'source': listing.source,
                            'images': listing.images if hasattr(listing, 'images') and listing.images else [],
                            'furnished': listing.furnished if hasattr(listing, 'furnished') else None,
                            'pets_allowed': listing.pets_allowed if hasattr(listing, 'pets_allowed') else None,
                            'floor': listing.floor if hasattr(listing, 'floor') else None
                        })
                    
                    whatsapp_sent = await send_whatsapp_listing_notification(
                        phone_number=user.whatsapp_phone,
                        listings=listings_data,
                        filter_name=filter_obj.name
                    )
                    
                    whatsapp_success = whatsapp_sent
                    if whatsapp_success:
                        logger.info(f"üì± WhatsApp: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å {len(listings_data)} –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.email}")
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WhatsApp —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            
            # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª —Å—Ä–∞–±–æ—Ç–∞–ª
            success = telegram_success or whatsapp_success or email_success
            
            if success:
                db = self.get_db()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                filter_obj.last_notification_sent = datetime.now(timezone.utc).replace(tzinfo=None)
                db.add(filter_obj)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥–æ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ SentNotification
                self._save_sent_notifications(db, user.id, filter_obj.id, listings)
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—â—É—é –∑–∞–ø–∏—Å—å –≤ Notification –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                try:
                    notification = Notification(
                        user_id=user.id,
                        filter_id=filter_obj.id,
                        listing_id=listings[0].id if listings else None,
                        notification_type="new_listing",
                        status="sent",
                        sent_at=datetime.now(timezone.utc).replace(tzinfo=None),
                        message=f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(listings)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π"
                    )
                    db.add(notification)
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
                
                try:
                    db.commit()
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ
                    channels = []
                    if telegram_success:
                        channels.append("Telegram")
                    if email_success:
                        channels.append("Email")
                    if whatsapp_success:
                        channels.append("WhatsApp")
                    
                    logger.info(f"üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.email} —á–µ—Ä–µ–∑: {', '.join(channels)}")
                    return True
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
                    db.rollback()
                    return False
            
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    async def process_user_notifications(self, user: User) -> int:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        from src.core.config import settings
        debug_mode = settings.DEBUG_NOTIFICATIONS
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ —Å–≤—è–∑–∏
        has_telegram = bool(user.telegram_chat_id and user.telegram_notifications_enabled)
        has_email = bool((user.notification_email or user.email) and user.email_notifications_enabled)
        has_whatsapp = bool(user.whatsapp_phone and user.whatsapp_enabled and settings.WHATSAPP_ENABLED)
        
        if not has_telegram and not has_email and not has_whatsapp:
            if debug_mode:
                logger.info(f"üêõ [DEBUG] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.email} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return 0
        
        sent_count = 0  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            filters = crud_filter.get_by_user(self.get_db(), user_id=user.id)
            active_filters = [f for f in filters if f.is_active]
            
            if debug_mode:
                logger.info(f"üêõ [DEBUG] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.email}: –≤—Å–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤ {len(filters)}, –∞–∫—Ç–∏–≤–Ω—ã—Ö {len(active_filters)}")
                for f in filters:
                    logger.info(f"üêõ [DEBUG] –§–∏–ª—å—Ç—Ä {f.id}: '{f.name}' - {'–∞–∫—Ç–∏–≤–µ–Ω' if f.is_active else '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}")
            
            if not active_filters:
                if debug_mode:
                    logger.info(f"üêõ [DEBUG] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.email} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤")
                return 0
            
            for filter_obj in active_filters:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if not self.should_send_notification(user, filter_obj):
                    if debug_mode:
                        logger.info(f"üêõ [DEBUG] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∏–ª—å—Ç—Ä {filter_obj.id} - —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                    else:
                        logger.info(f"‚è∞ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∏–ª—å—Ç—Ä {filter_obj.id} - —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                new_listings = self.get_new_listings_for_filter(filter_obj, user.id)
                
                if not new_listings:
                    if debug_mode:
                        logger.info(f"üêõ [DEBUG] –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ {filter_obj.id} '{filter_obj.name}' –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    continue
                
                if debug_mode:
                    logger.info(f"üêõ [DEBUG] –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ {filter_obj.id} '{filter_obj.name}' –Ω–∞–π–¥–µ–Ω–æ {len(new_listings)} –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
                    for listing in new_listings[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                        logger.info(f"üêõ [DEBUG]   - {listing.title[:50]}... (ID: {listing.id}, –∏—Å—Ç–æ—á–Ω–∏–∫: {listing.source})")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                success = await self.send_notification_for_filter(user, filter_obj, new_listings)
                
                if success:
                    sent_count += 1
                    if debug_mode:
                        logger.info(f"üêõ [DEBUG] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ {filter_obj.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
                await asyncio.sleep(1)
            
            return sent_count
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.email}: {e}")
            return sent_count
    
    async def process_all_notifications(self) -> Dict[str, int]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        from src.core.config import settings
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
        debug_mode = settings.DEBUG_NOTIFICATIONS
        
        if debug_mode:
            logger.info("üêõ [DEBUG] –ó–∞–ø—É—Å–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏...")
            logger.info("üêõ [DEBUG] –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏:")
            logger.info("üêõ [DEBUG] - –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
            logger.info("üêõ [DEBUG] - –û—Ç–ø—Ä–∞–≤–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞")
            logger.info("üêõ [DEBUG] - –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
        else:
            logger.info("üîî –ó–∞–ø—É—Å–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        
        stats = {
            "users_processed": 0,
            "notifications_sent": 0,
            "errors": 0
        }
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º–∏ Telegram –∏–ª–∏ WhatsApp –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
            from sqlalchemy import or_, and_
            
            users = self.get_db().query(User).filter(
                User.is_active == True,
                or_(
                    User.telegram_chat_id.isnot(None),
                    and_(
                        User.whatsapp_phone.isnot(None),
                        User.whatsapp_enabled == True,
                        settings.WHATSAPP_ENABLED == True
                    )
                )
            ).all()
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ç–∏–ø–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            telegram_users = sum(1 for user in users if user.telegram_chat_id)
            whatsapp_users = sum(1 for user in users if user.whatsapp_phone and user.whatsapp_enabled and settings.WHATSAPP_ENABLED)
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏:")
            logger.info(f"  - Telegram: {telegram_users}")
            logger.info(f"  - WhatsApp: {whatsapp_users}")
            
            for user in users:
                try:
                    if debug_mode:
                        logger.info(f"üêõ [DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.email} (ID: {user.id}, Chat ID: {user.telegram_chat_id})")
                    
                    sent_count = await self.process_user_notifications(user)
                    stats["users_processed"] += 1
                    stats["notifications_sent"] += sent_count
                    
                    if sent_count > 0:
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.email}")
                    elif debug_mode:
                        logger.info(f"üêõ [DEBUG] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.email}")
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è rate limiting
                    await asyncio.sleep(0.5)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.email}: {e}")
                    stats["errors"] += 1
            
            logger.info(
                f"‚úÖ –î–∏—Å–ø–µ—Ç—á–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω. "
                f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users_processed']}, "
                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {stats['notifications_sent']}, "
                f"–û—à–∏–±–æ–∫: {stats['errors']}"
            )
            
            return stats
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            stats["errors"] += 1
            return stats


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
notification_service = NotificationService()


async def run_notification_dispatcher():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ cron –∑–∞–¥–∞—á–∞—Ö –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
    """
    return await notification_service.process_all_notifications()


if __name__ == "__main__":
    """–ó–∞–ø—É—Å–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    import os
    from dotenv import load_dotenv
    
    load_dotenv()
    
    async def main():
        stats = await run_notification_dispatcher()
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {stats}")
    
    asyncio.run(main()) 