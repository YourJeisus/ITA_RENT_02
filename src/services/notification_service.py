"""
–°–µ—Ä–≤–∏—Å —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è ITA_RENT_BOT
MVP –≤–µ—Ä—Å–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö —á–µ—Ä–µ–∑ Telegram
"""
import asyncio
import logging
from datetime import datetime, timedelta, timezone
from typing import List, Optional, Dict, Any

from sqlalchemy.orm import Session

from src.core.config import settings
from src.db.database import get_db
from src.db.models import User, Filter, Listing, Notification, SentNotification
# from src.crud.crud_user import get_all_active_users  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ MVP
from src.crud.crud_filter import filter as crud_filter
from src.crud.crud_listing import search_listings
from src.services.telegram_bot import send_notification_to_user

logger = logging.getLogger(__name__)


class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self):
        self.db = None
        self._ensure_sent_notifications_table()
    
    def get_db(self) -> Session:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if not self.db:
            self.db = next(get_db())
        return self.db
    
    def _ensure_sent_notifications_table(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É sent_notifications –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
        try:
            from src.db.database import engine, Base
            # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã (–≤–∫–ª—é—á–∞—è SentNotification)
            Base.metadata.create_all(bind=engine)
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ sent_notifications –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞/—Å–æ–∑–¥–∞–Ω–∞")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã sent_notifications: {e}")
    
    def should_send_notification(self, user: User, filter_obj: Filter) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
        """
        if not filter_obj.is_active:
            logger.info(f"‚ùå –§–∏–ª—å—Ç—Ä {filter_obj.id} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
            return False
        
        if not user.telegram_chat_id:
            logger.info(f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.email} –Ω–µ—Ç telegram_chat_id")
            return False
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Å—Ç–æ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
        if user.subscription_type == "premium":
            notification_frequency = timedelta(minutes=30)
        else:
            notification_frequency = timedelta(hours=24)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
        if filter_obj.last_notification_sent:
            now = datetime.now(timezone.utc)
            last_sent = filter_obj.last_notification_sent
            
            # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            if last_sent.tzinfo is None and now.tzinfo is not None:
                now = now.replace(tzinfo=None)
            elif last_sent.tzinfo is not None and now.tzinfo is None:
                last_sent = last_sent.replace(tzinfo=None)
            
            time_since_last = now - last_sent
            if time_since_last < notification_frequency:
                logger.info(f"‚è∞ –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ü—Ä–æ—à–ª–æ {time_since_last}, –Ω—É–∂–Ω–æ {notification_frequency}")
                return False
        
        logger.info(f"‚úÖ –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ {filter_obj.id}")
        return True
    
    def get_new_listings_for_filter(self, filter_obj: Filter, user_id: int) -> List[Listing]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ —Ñ–∏–ª—å—Ç—Ä—É —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        
        –õ–æ–≥–∏–∫–∞:
        1. –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —Ñ–∏–ª—å—Ç—Ä–∞ (–Ω–µ—Ç last_notification_sent) - –¥–æ 30 —Å–∞–º—ã—Ö —Å–≤–µ–∂–∏—Ö
        2. –ï—Å–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ - —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞ 24 —á–∞—Å–∞
        3. –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        """
        try:
            db = self.get_db()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
            is_first_run = filter_obj.last_notification_sent is None
            logger.info(f"üöÄ –§–∏–ª—å—Ç—Ä {filter_obj.id}: {'–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫' if is_first_run else '–ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫'}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞
            search_params = {
                "city": filter_obj.city,
                "min_price": filter_obj.min_price,
                "max_price": filter_obj.max_price,
                "property_type": filter_obj.property_type,
                "min_rooms": filter_obj.min_rooms,
                "max_rooms": filter_obj.max_rooms,
                "min_area": filter_obj.min_area,
                "max_area": filter_obj.max_area,
            }
            
            # –£–¥–∞–ª—è–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è
            search_params = {k: v for k, v in search_params.items() if v is not None}
            
            # –ò—â–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ CRUD
            from src.crud.crud_listing import listing as crud_listing
            
            if is_first_run:
                # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –±–µ—Ä–µ–º –¥–æ 30 —Å–∞–º—ã—Ö —Å–≤–µ–∂–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                all_listings = crud_listing.search(db, limit=30, **search_params)
                logger.info(f"üîç –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: –Ω–∞–π–¥–µ–Ω–æ {len(all_listings)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–ª–∏–º–∏—Ç 30)")
            else:
                # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ - —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞ 24 —á–∞—Å–∞
                since_time = datetime.now(timezone.utc) - timedelta(hours=24)
                all_listings = crud_listing.search(db, limit=50, **search_params)
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
                fresh_listings = []
                for listing in all_listings:
                    if listing.created_at:
                        listing_time = listing.created_at
                        compare_time = since_time
                        
                        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
                        if listing_time.tzinfo is None and compare_time.tzinfo is not None:
                            compare_time = compare_time.replace(tzinfo=None)
                        elif listing_time.tzinfo is not None and compare_time.tzinfo is None:
                            listing_time = listing_time.replace(tzinfo=None)
                        
                        if listing_time >= compare_time:
                            fresh_listings.append(listing)
                
                all_listings = fresh_listings
                logger.info(f"üîç –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫: –Ω–∞–π–¥–µ–Ω–æ {len(all_listings)} –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∑–∞ 24—á")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            sent_listing_ids = set(
                row[0] for row in 
                db.query(SentNotification.listing_id)
                .filter(SentNotification.user_id == user_id)
                .all()
            )
            
            # –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            new_listings = [
                listing for listing in all_listings 
                if listing.id not in sent_listing_ids
            ]
            
            logger.info(f"üìã –ò—Å–∫–ª—é—á–µ–Ω–æ {len(all_listings) - len(new_listings)} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(new_listings)} –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            
            return new_listings
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ {filter_obj.id}: {e}")
            return []
    
    def format_notification_message(self, listings: List[Listing], filter_obj: Filter) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö
        """
        if not listings:
            return ""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = f"üè† *–ù–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —Ñ–∏–ª—å—Ç—Ä—É '{filter_obj.name}'*\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏
        for i, listing in enumerate(listings[:5], 1):  # –ú–∞–∫—Å–∏–º—É–º 5 –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            price_text = f"{listing.price}‚Ç¨/–º–µ—Å" if listing.price else "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            details = []
            if listing.rooms:
                details.append(f"üö™ {listing.rooms} –∫–æ–º–Ω.")
            if listing.area:
                details.append(f"üìê {listing.area} –º¬≤")
            if listing.property_type:
                details.append(f"üè† {listing.property_type}")
            
            details_text = " ‚Ä¢ ".join(details) if details else ""
            
            message += f"*{i}. {listing.title[:50]}{'...' if len(listing.title) > 50 else ''}*\n"
            message += f"üìç {listing.address}\n"
            message += f"üí∞ {price_text}\n"
            
            if details_text:
                message += f"{details_text}\n"
            
            message += f"üîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ]({listing.url})\n\n"
        
        # –ï—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –±–æ–ª—å—à–µ 5, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º
        if len(listings) > 5:
            message += f"...–∏ –µ—â–µ {len(listings) - 5} –æ–±—ä—è–≤–ª–µ–Ω–∏–π!\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å—Ç—Ä–µ
        message += f"üîç *–§–∏–ª—å—Ç—Ä:* {filter_obj.name}\n"
        if filter_obj.city:
            message += f"üìç –ì–æ—Ä–æ–¥: {filter_obj.city}\n"
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–º
        message += f"\n/pause_{filter_obj.id} - –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä\n"
        message += "/filters - –≤—Å–µ –≤–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã"
        
        return message
    
    async def send_notification_for_filter(self, user: User, filter_obj: Filter, listings: List[Listing]) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö
        """
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self.format_notification_message(listings, filter_obj)
            
            if not message:
                return False
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            success = await send_notification_to_user(
                telegram_chat_id=user.telegram_chat_id,
                message=message
            )
            
            if success:
                db = self.get_db()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                filter_obj.last_notification_sent = datetime.now(timezone.utc).replace(tzinfo=None)
                db.add(filter_obj)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥–æ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ SentNotification
                for listing in listings:
                    try:
                        sent_notification = SentNotification(
                            user_id=user.id,
                            filter_id=filter_obj.id,
                            listing_id=listing.id,
                            notification_type="new_listing"
                        )
                        db.add(sent_notification)
                    except Exception as e:
                        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å)
                        logger.debug(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ {listing.id} —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—â—É—é –∑–∞–ø–∏—Å—å –≤ Notification –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                try:
                    notification = Notification(
                        user_id=user.id,
                        filter_id=filter_obj.id,
                        listing_id=listings[0].id if listings else None,
                        notification_type="new_listing",
                        status="sent",
                        sent_at=datetime.now(timezone.utc).replace(tzinfo=None),
                        message=f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(listings)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π"
                    )
                    db.add(notification)
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
                
                try:
                    db.commit()
                    logger.info(f"üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.email} –æ {len(listings)} –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö")
                    return True
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
                    db.rollback()
                    return False
            
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    async def process_user_notifications(self, user: User) -> int:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        if not user.telegram_chat_id:
            return 0
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            filters = crud_filter.get_by_user(self.get_db(), user_id=user.id)
            active_filters = [f for f in filters if f.is_active]
            
            if not active_filters:
                return 0
            
            sent_count = 0
            
            for filter_obj in active_filters:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if not self.should_send_notification(user, filter_obj):
                    logger.info(f"‚è∞ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∏–ª—å—Ç—Ä {filter_obj.id} - —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                new_listings = self.get_new_listings_for_filter(filter_obj, user.id)
                
                if not new_listings:
                    continue
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                success = await self.send_notification_for_filter(user, filter_obj, new_listings)
                
                if success:
                    sent_count += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
                await asyncio.sleep(1)
            
            return sent_count
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.email}: {e}")
            return 0
    
    async def process_all_notifications(self) -> Dict[str, int]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        logger.info("üîî –ó–∞–ø—É—Å–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        
        stats = {
            "users_processed": 0,
            "notifications_sent": 0,
            "errors": 0
        }
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º–∏ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
            users = self.get_db().query(User).filter(
                User.is_active == True,
                User.telegram_chat_id.isnot(None)
            ).all()
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º–∏ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏")
            
            for user in users:
                try:
                    sent_count = await self.process_user_notifications(user)
                    stats["users_processed"] += 1
                    stats["notifications_sent"] += sent_count
                    
                    if sent_count > 0:
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.email}")
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è rate limiting
                    await asyncio.sleep(0.5)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.email}: {e}")
                    stats["errors"] += 1
            
            logger.info(
                f"‚úÖ –î–∏—Å–ø–µ—Ç—á–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω. "
                f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users_processed']}, "
                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {stats['notifications_sent']}, "
                f"–û—à–∏–±–æ–∫: {stats['errors']}"
            )
            
            return stats
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            stats["errors"] += 1
            return stats


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
notification_service = NotificationService()


async def run_notification_dispatcher():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ cron –∑–∞–¥–∞—á–∞—Ö –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
    """
    return await notification_service.process_all_notifications()


if __name__ == "__main__":
    """–ó–∞–ø—É—Å–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    import os
    from dotenv import load_dotenv
    
    load_dotenv()
    
    async def main():
        stats = await run_notification_dispatcher()
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {stats}")
    
    asyncio.run(main()) 