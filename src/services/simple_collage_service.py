"""
–ü—Ä–æ—Å—Ç–æ–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–∞–∂–µ–π –∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç URL-based –ø–æ–¥—Ö–æ–¥—ã –±–µ–∑ API –∫–ª—é—á–µ–π
"""
import logging
import hashlib
from typing import List, Optional
from urllib.parse import quote, urlencode

logger = logging.getLogger(__name__)


class SimpleCollageService:
    """
    –ü—Ä–æ—Å—Ç–æ–π —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–∞–∂–µ–π —á–µ—Ä–µ–∑ URL –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏
    """
    
    async def create_property_collage(
        self, 
        image_urls: List[str], 
        max_images: int = 3
    ) -> Optional[str]:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–æ–ª–ª–∞–∂ –∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        
        Args:
            image_urls: –°–ø–∏—Å–æ–∫ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            max_images: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (2-3)
            
        Returns:
            URL —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–ª–∞–∂–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if not image_urls or len(image_urls) < 2:
            logger.debug("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–æ–ª–ª–∞–∂–∞")
            return None
        
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        selected_images = image_urls[:max_images]
        
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–∞–∂–∞
            collage_url = await self._create_collage_via_proxy(selected_images)
            if collage_url:
                return collage_url
            
            # Fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            logger.info("–ö–æ–ª–ª–∞–∂ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return selected_images[0]
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–∞–∂–∞: {e}")
            return selected_images[0] if selected_images else None
    
    async def _create_collage_via_proxy(self, image_urls: List[str]) -> Optional[str]:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–æ–ª–ª–∞–∂ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å htmlcsstoimage.com
        """
        try:
            import aiohttp
            import json
            import base64
            
            # –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è –∫–æ–ª–ª–∞–∂–∞
            html_content = self._generate_collage_html(image_urls)
            css_content = self._generate_collage_css()
            
            # API htmlcsstoimage.com
            api_url = "https://hcti.io/v1/image"
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è API
            data = {
                'html': html_content,
                'css': css_content,
                'device_scale': 2,
                'format': 'jpg',
                'viewport_width': 800,
                'viewport_height': 600
            }
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–µ –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            from src.core.config import settings
            if settings.HTMLCSS_USER_ID and settings.HTMLCSS_API_KEY:
                user_id = settings.HTMLCSS_USER_ID
                api_key = settings.HTMLCSS_API_KEY
                
                logger.info(f"üé® –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–∞–∂ —á–µ—Ä–µ–∑ htmlcsstoimage API...")
                
                # Basic Auth
                credentials = base64.b64encode(f"{user_id}:{api_key}".encode()).decode()
                headers = {
                    'Authorization': f'Basic {credentials}',
                    'Content-Type': 'application/json'
                }
                
                async with aiohttp.ClientSession() as session:
                    async with session.post(
                        api_url, 
                        json=data, 
                        headers=headers,
                        timeout=30
                    ) as response:
                        if response.status == 200:
                            result = await response.json()
                            image_url = result.get('url')
                            if image_url:
                                logger.info(f"‚úÖ –ö–æ–ª–ª–∞–∂ —Å–æ–∑–¥–∞–Ω: {image_url}")
                                return image_url
                        else:
                            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ API htmlcsstoimage: {response.status}")
                            # –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                            error_text = await response.text()
                            logger.warning(f"–û—Ç–≤–µ—Ç API: {error_text}")
            else:
                logger.warning("‚ö†Ô∏è API –∫–ª—é—á–∏ htmlcsstoimage –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            
            return None
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–∞–∂–∞: {e}")
            return None
    
    def _generate_collage_html(self, image_urls: List[str]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML –¥–ª—è –∫–æ–ª–ª–∞–∂–∞ –≤ —Å—Ç–∏–ª–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        """
        if len(image_urls) == 2:
            return f"""
            <div class="collage-container">
                <div class="image-main">
                    <img src="{image_urls[0]}" alt="Main photo" />
                </div>
                <div class="image-secondary">
                    <img src="{image_urls[1]}" alt="Secondary photo" />
                </div>
            </div>
            """
        elif len(image_urls) >= 3:
            return f"""
            <div class="collage-container">
                <div class="image-main">
                    <img src="{image_urls[0]}" alt="Main photo" />
                </div>
                <div class="image-sidebar">
                    <div class="image-small">
                        <img src="{image_urls[1]}" alt="Photo 2" />
                    </div>
                    <div class="image-small">
                        <img src="{image_urls[2]}" alt="Photo 3" />
                    </div>
                </div>
            </div>
            """
        else:
            return f'<img src="{image_urls[0]}" class="single-image" alt="Property photo" />'
    
    def _generate_collage_css(self) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç CSS –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –∫–æ–ª–ª–∞–∂–∞
        """
        return """
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        .collage-container {
            display: flex;
            width: 800px;
            height: 600px;
            gap: 4px;
            background: #f0f0f0;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        }
        
        .image-main {
            flex: 2;
            height: 100%;
        }
        
        .image-main img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .image-secondary {
            flex: 1;
            height: 100%;
        }
        
        .image-secondary img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .image-sidebar {
            flex: 1;
            display: flex;
            flex-direction: column;
            gap: 4px;
        }
        
        .image-small {
            flex: 1;
        }
        
        .image-small img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .single-image {
            width: 800px;
            height: 600px;
            object-fit: cover;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        }
        """


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
simple_collage_service = SimpleCollageService()


async def create_simple_collage(image_urls: List[str]) -> Optional[str]:
    """
    –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–∞–∂–∞
    """
    return await simple_collage_service.create_property_collage(image_urls) 