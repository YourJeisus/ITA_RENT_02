"""
Telegram –±–æ—Ç –¥–ª—è ITA_RENT_BOT
MVP –≤–µ—Ä—Å–∏—è —Å –±–∞–∑–æ–≤—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""
import logging
import asyncio
from typing import Optional, Dict, Any

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, 
    CallbackQueryHandler, ContextTypes, filters
)
from sqlalchemy.orm import Session

from src.core.config import settings
from src.db.database import get_db
from src.crud.crud_user import get_user_by_email, link_telegram, get_by_telegram_chat_id
from src.crud.crud_filter import filter as crud_filter
from src.schemas.user import UserTelegramLink

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class TelegramBotService:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –¥–ª—è MVP"""
    
    def __init__(self):
        if not settings.TELEGRAM_BOT_TOKEN:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        self.token = settings.TELEGRAM_BOT_TOKEN
        self.application = None
        self.db_session = None
    
    def get_db(self) -> Session:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if not self.db_session:
            self.db_session = next(get_db())
        return self.db_session
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        chat_id = str(update.effective_chat.id)
        
        try:
            user = get_by_telegram_chat_id(self.get_db(), telegram_chat_id=chat_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chat_id {chat_id}: {e}")
            user = None
        
        if user:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω
            await update.message.reply_text(
                f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name or '–¥—Ä—É–≥'}!\n\n"
                f"–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ email: {user.email}\n"
                f"üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
            )
        else:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            welcome_text = (
                "üè† *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ITA RENT BOT!*\n\n"
                "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—É—é –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –≤ –ò—Ç–∞–ª–∏–∏ –∏ –±—É–¥—É "
                "–ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö.\n\n"
                "*–ö–∞–∫ –Ω–∞—á–∞—Ç—å:*\n"
                "1Ô∏è‚É£ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ\n"
                "2Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/register email@example.com` –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞\n"
                "3Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!\n\n"
                "üìå *–ö–æ–º–∞–Ω–¥—ã:*\n"
                "/register - —Å–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç\n"
                "/help - —Å–ø—Ä–∞–≤–∫–∞\n"
                "/status - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ"
            )
            
            await update.message.reply_text(
                welcome_text,
                parse_mode='Markdown'
            )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        help_text = (
            "ü§ñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º ITA RENT BOT*\n\n"
            "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "/start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
            "/register email - —Å–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç —Å –≤–∞—à–∏–º email\n"
            "/status - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ö\n"
            "/filters - —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
            "/pause - –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            "/resume - –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
            "*–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n"
            "‚Ä¢ –í –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏: 1 —Ñ–∏–ª—å—Ç—Ä, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–∑ –≤ –¥–µ–Ω—å\n"
            "‚Ä¢ –í Premium: 5 —Ñ–∏–ª—å—Ç—Ä–æ–≤, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç\n\n"
            "üí¨ –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º!"
        )
        
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def register_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /register - —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º –ø–æ email"""
        chat_id = str(update.effective_chat.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ –∞–∫–∫–∞—É–Ω—Ç
        existing_user = get_by_telegram_chat_id(self.get_db(), telegram_chat_id=chat_id)
        if existing_user:
            await update.message.reply_text(
                f"‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ email: {existing_user.email}\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ –≤–∞—à email –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞.\n\n"
                "*–ü—Ä–∏–º–µ—Ä:* `/register your@email.com`\n\n"
                "üìù Email –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Ç–µ–º, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ "
                "–ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ.",
                parse_mode='Markdown'
            )
            return
        
        email = context.args[0].lower().strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç email (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        if '@' not in email or '.' not in email:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n"
                "*–ü—Ä–∏–º–µ—Ä:* `/register your@email.com`",
                parse_mode='Markdown'
            )
            return
        
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user = get_user_by_email(self.get_db(), email=email)
        if not user:
            await update.message.reply_text(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email `{email}` –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                f"üîó –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ, "
                f"–∞ –∑–∞—Ç–µ–º –ø—Ä–∏–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –∑–¥–µ—Å—å.",
                parse_mode='Markdown'
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç –∫ –¥—Ä—É–≥–æ–º—É Telegram
        if user.telegram_chat_id and user.telegram_chat_id != chat_id:
            await update.message.reply_text(
                "‚ùå –≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É Telegram.\n"
                "–ï—Å–ª–∏ —ç—Ç–æ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
            return
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
        try:
            telegram_username = update.effective_user.username
            link_telegram(
                self.get_db(),
                user_id=user.id,
                telegram_chat_id=chat_id,
                telegram_username=telegram_username
            )
            
            await update.message.reply_text(
                f"‚úÖ *–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!*\n\n"
                f"üìß Email: {user.email}\n"
                f"üë§ –ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"üíé –ü–æ–¥–ø–∏—Å–∫–∞: {user.subscription_type.title()}\n\n"
                f"üîî –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö.\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /filters –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞.",
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /status - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö"""
        chat_id = str(update.effective_chat.id)
        user = get_by_telegram_chat_id(self.get_db(), telegram_chat_id=chat_id)
        
        if not user:
            await update.message.reply_text(
                "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/register your@email.com` –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è.",
                parse_mode='Markdown'
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
        filters = crud_filter.get_by_user(self.get_db(), user_id=user.id)
        active_filters = [f for f in filters if f.is_active]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
        if user.subscription_type == "premium":
            max_filters = 5
            notification_frequency = "–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç"
        else:
            max_filters = 1
            notification_frequency = "—Ä–∞–∑ –≤ –¥–µ–Ω—å"
        
        status_text = (
            f"üìä *–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞*\n\n"
            f"üë§ *–ü—Ä–æ—Ñ–∏–ª—å:*\n"
            f"üìß Email: {user.email}\n"
            f"üë§ –ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y')}\n\n"
            f"üíé *–ü–æ–¥–ø–∏—Å–∫–∞:* {user.subscription_type.title()}\n"
            f"üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:* {notification_frequency}\n\n"
            f"üîç *–§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:*\n"
            f"üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_filters)}/{max_filters}\n"
            f"üí§ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(filters) - len(active_filters)}\n\n"
        )
        
        if active_filters:
            status_text += "üìù *–ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:*\n"
            for f in active_filters[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                status_text += f"‚Ä¢ {f.name} ({f.city or '–õ—é–±–æ–π –≥–æ—Ä–æ–¥'})\n"
            
            if len(active_filters) > 3:
                status_text += f"‚Ä¢ ...–∏ –µ—â–µ {len(active_filters) - 3}\n"
        
        status_text += f"\nüì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /filters –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"
        
        await update.message.reply_text(status_text, parse_mode='Markdown')
    
    async def filters_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /filters - —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        chat_id = str(update.effective_chat.id)
        user = get_by_telegram_chat_id(self.get_db(), telegram_chat_id=chat_id)
        
        if not user:
            await update.message.reply_text(
                "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/register your@email.com` –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è.",
                parse_mode='Markdown'
            )
            return
        
        filters = crud_filter.get_by_user(self.get_db(), user_id=user.id)
        
        if not filters:
            await update.message.reply_text(
                "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞.\n\n"
                "üåê –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ "
                "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö!"
            )
            return
        
        filters_text = "üîç *–í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:*\n\n"
        
        for f in filters:
            status_emoji = "üü¢" if f.is_active else "üî¥"
            filters_text += f"{status_emoji} *{f.name}*\n"
            
            if f.city:
                filters_text += f"üìç {f.city}\n"
            
            price_range = ""
            if f.min_price and f.max_price:
                price_range = f"{f.min_price}-{f.max_price}‚Ç¨"
            elif f.min_price:
                price_range = f"–æ—Ç {f.min_price}‚Ç¨"
            elif f.max_price:
                price_range = f"–¥–æ {f.max_price}‚Ç¨"
            
            if price_range:
                filters_text += f"üí∞ {price_range}\n"
            
            if f.property_type:
                filters_text += f"üè† {f.property_type}\n"
            
            filters_text += f"‚è∞ –°–æ–∑–¥–∞–Ω: {f.created_at.strftime('%d.%m.%Y')}\n"
            filters_text += f"/pause_{f.id} - {'–≤–∫–ª—é—á–∏—Ç—å' if not f.is_active else '–æ—Ç–∫–ª—é—á–∏—Ç—å'}\n\n"
        
        filters_text += "üåê –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ"
        
        await update.message.reply_text(filters_text, parse_mode='Markdown')
    
    async def pause_filter_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞"""
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤–∏–¥–∞ /pause_123
        command_text = update.message.text
        if '_' in command_text:
            try:
                filter_id = int(command_text.split('_')[1])
                chat_id = str(update.effective_chat.id)
                user = get_by_telegram_chat_id(self.get_db(), telegram_chat_id=chat_id)
                
                if not user:
                    await update.message.reply_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.")
                    return
                
                filter_obj = crud_filter.get(self.get_db(), id=filter_id)
                
                if not filter_obj or filter_obj.user_id != user.id:
                    await update.message.reply_text("‚ùå –§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return
                
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–∏–ª—å—Ç—Ä–∞
                new_status = not filter_obj.is_active
                filter_obj.is_active = new_status
                self.get_db().commit()
                
                status_text = "–≤–∫–ª—é—á–µ–Ω" if new_status else "–æ—Ç–∫–ª—é—á–µ–Ω"
                await update.message.reply_text(
                    f"‚úÖ –§–∏–ª—å—Ç—Ä *{filter_obj.name}* {status_text}.",
                    parse_mode='Markdown'
                )
                
            except (ValueError, IndexError):
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")
    
    async def unknown_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        await update.message.reply_text(
            "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
        )
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        if not self.application:
            raise ValueError("Application –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("register", self.register_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("filters", self.filters_command))
        self.application.add_handler(CommandHandler("dbtest", self.dbtest_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        self.application.add_handler(MessageHandler(
            filters.Regex(r'^/pause_\d+$'), 
            self.pause_filter_command
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        self.application.add_handler(MessageHandler(
            filters.COMMAND, 
            self.unknown_command
        ))
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.application = Application.builder().token(self.token).build()
        self.setup_handlers()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        await self.application.initialize()
        logger.info("Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        if not self.application:
            await self.initialize()
        
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
        await self.application.start()
        await self.application.updater.start_polling()
        
        try:
            # –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            await asyncio.Event().wait()
        except KeyboardInterrupt:
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        finally:
            await self.application.updater.stop()
            await self.application.stop()
    
    async def dbtest_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /dbtest - —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        chat_id = str(update.effective_chat.id)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db = self.get_db()
            
            # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            from src.db.models import User, Listing
            users_count = db.query(User).count()
            listings_count = db.query(Listing).count()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chat_id
            current_user = get_by_telegram_chat_id(db, telegram_chat_id=chat_id)
            
            response = f"üîç **–¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:**\n\n"
            response += f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: –£—Å–ø–µ—à–Ω–æ\n"
            response += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
            response += f"üè† –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {listings_count}\n"
            response += f"ü§ñ –í–∞—à chat_id: `{chat_id}`\n"
            
            if current_user:
                response += f"‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–∞–π–¥–µ–Ω: {current_user.email}\n"
                response += f"üÜî –í–∞—à ID: {current_user.id}\n"
            else:
                response += f"‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Telegram\n"
            
            await update.message.reply_text(response, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /dbtest –¥–ª—è chat_id {chat_id}: {e}")
            await update.message.reply_text(
                f"‚ùå **–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ë–î:**\n\n"
                f"```\n{str(e)}\n```\n\n"
                f"Chat ID: `{chat_id}`", 
                parse_mode='Markdown'
            )

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        if self.application:
            await self.application.stop()
            logger.info("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
telegram_bot = TelegramBotService()


async def send_notification_to_user(
    telegram_chat_id: str, 
    message: str, 
    parse_mode: str = 'Markdown'
) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    try:
        if not telegram_bot.application:
            await telegram_bot.initialize()
        
        await telegram_bot.application.bot.send_message(
            chat_id=telegram_chat_id,
            text=message,
            parse_mode=parse_mode
        )
        
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_chat_id}")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False


if __name__ == "__main__":
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    import os
    from dotenv import load_dotenv
    
    load_dotenv()
    
    async def main():
        bot = TelegramBotService()
        await bot.start_polling()
    
    asyncio.run(main()) 