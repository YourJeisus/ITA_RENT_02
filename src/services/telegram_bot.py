"""
Telegram –±–æ—Ç –¥–ª—è ITA_RENT_BOT
MVP –≤–µ—Ä—Å–∏—è —Å –±–∞–∑–æ–≤—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""
import logging
import asyncio
from typing import Optional, Dict, Any, List

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, 
    CallbackQueryHandler, ContextTypes, filters
)
from sqlalchemy.orm import Session

from src.core.config import settings
from src.db.database import get_db
from src.crud.crud_user import get_user_by_email, link_telegram, get_by_telegram_chat_id
from src.crud.crud_filter import filter as crud_filter
from src.schemas.user import UserTelegramLink

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class TelegramBotService:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –¥–ª—è MVP"""
    
    def __init__(self):
        if not settings.TELEGRAM_BOT_TOKEN:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        self.token = settings.TELEGRAM_BOT_TOKEN
        self.application = None
        self.db_session = None
    
    def get_db(self) -> Session:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if not self.db_session:
            self.db_session = next(get_db())
        return self.db_session
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        chat_id = str(update.effective_chat.id)
        
        try:
            user = get_by_telegram_chat_id(self.get_db(), telegram_chat_id=chat_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chat_id {chat_id}: {e}")
            user = None
        
        if user:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω
            await update.message.reply_text(
                f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name or '–¥—Ä—É–≥'}!\n\n"
                f"–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ email: {user.email}\n"
                f"üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
            )
        else:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            welcome_text = (
                "üè† *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ITA RENT BOT!*\n\n"
                "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—É—é –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –≤ –ò—Ç–∞–ª–∏–∏ –∏ –±—É–¥—É "
                "–ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö.\n\n"
                "*–ö–∞–∫ –Ω–∞—á–∞—Ç—å:*\n"
                "1Ô∏è‚É£ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ\n"
                "2Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/register email@example.com` –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞\n"
                "3Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!\n\n"
                "üìå *–ö–æ–º–∞–Ω–¥—ã:*\n"
                "/register - —Å–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç\n"
                "/help - —Å–ø—Ä–∞–≤–∫–∞\n"
                "/status - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ"
            )
            
            await update.message.reply_text(
                welcome_text,
                parse_mode='Markdown'
            )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        help_text = (
            "ü§ñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º ITA RENT BOT*\n\n"
            "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "/start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
            "/register email - —Å–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç —Å –≤–∞—à–∏–º email\n"
            "/status - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ö\n"
            "/filters - —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
            "/pause - –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            "/resume - –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
            "*–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n"
            "‚Ä¢ –í –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏: 1 —Ñ–∏–ª—å—Ç—Ä, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–∑ –≤ –¥–µ–Ω—å\n"
            "‚Ä¢ –í Premium: 5 —Ñ–∏–ª—å—Ç—Ä–æ–≤, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç\n\n"
            "üí¨ –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º!"
        )
        
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def register_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /register - —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º –ø–æ email"""
        chat_id = str(update.effective_chat.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ –∞–∫–∫–∞—É–Ω—Ç
        existing_user = get_by_telegram_chat_id(self.get_db(), telegram_chat_id=chat_id)
        if existing_user:
            await update.message.reply_text(
                f"‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ email: {existing_user.email}\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ –≤–∞—à email –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞.\n\n"
                "*–ü—Ä–∏–º–µ—Ä:* `/register your@email.com`\n\n"
                "üìù Email –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Ç–µ–º, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ "
                "–ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ.",
                parse_mode='Markdown'
            )
            return
        
        email = context.args[0].lower().strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç email (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        if '@' not in email or '.' not in email:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n"
                "*–ü—Ä–∏–º–µ—Ä:* `/register your@email.com`",
                parse_mode='Markdown'
            )
            return
        
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user = get_user_by_email(self.get_db(), email=email)
        if not user:
            await update.message.reply_text(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email `{email}` –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                f"üîó –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ, "
                f"–∞ –∑–∞—Ç–µ–º –ø—Ä–∏–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –∑–¥–µ—Å—å.",
                parse_mode='Markdown'
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç –∫ –¥—Ä—É–≥–æ–º—É Telegram
        if user.telegram_chat_id and user.telegram_chat_id != chat_id:
            await update.message.reply_text(
                "‚ùå –≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É Telegram.\n"
                "–ï—Å–ª–∏ —ç—Ç–æ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
            return
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
        try:
            telegram_username = update.effective_user.username
            link_telegram(
                self.get_db(),
                user_id=user.id,
                telegram_chat_id=chat_id,
                telegram_username=telegram_username
            )
            
            await update.message.reply_text(
                f"‚úÖ *–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!*\n\n"
                f"üìß Email: {user.email}\n"
                f"üë§ –ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"üíé –ü–æ–¥–ø–∏—Å–∫–∞: {user.subscription_type.title()}\n\n"
                f"üîî –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö.\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /filters –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞.",
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /status - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö"""
        chat_id = str(update.effective_chat.id)
        user = get_by_telegram_chat_id(self.get_db(), telegram_chat_id=chat_id)
        
        if not user:
            await update.message.reply_text(
                "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/register your@email.com` –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è.",
                parse_mode='Markdown'
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
        filters = crud_filter.get_by_user(self.get_db(), user_id=user.id)
        active_filters = [f for f in filters if f.is_active]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
        if user.subscription_type == "premium":
            max_filters = 5
            notification_frequency = "–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç"
        else:
            max_filters = 1
            notification_frequency = "—Ä–∞–∑ –≤ –¥–µ–Ω—å"
        
        status_text = (
            f"üìä *–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞*\n\n"
            f"üë§ *–ü—Ä–æ—Ñ–∏–ª—å:*\n"
            f"üìß Email: {user.email}\n"
            f"üë§ –ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y')}\n\n"
            f"üíé *–ü–æ–¥–ø–∏—Å–∫–∞:* {user.subscription_type.title()}\n"
            f"üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:* {notification_frequency}\n\n"
            f"üîç *–§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:*\n"
            f"üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_filters)}/{max_filters}\n"
            f"üí§ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(filters) - len(active_filters)}\n\n"
        )
        
        if active_filters:
            status_text += "üìù *–ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:*\n"
            for f in active_filters[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                status_text += f"‚Ä¢ {f.name} ({f.city or '–õ—é–±–æ–π –≥–æ—Ä–æ–¥'})\n"
            
            if len(active_filters) > 3:
                status_text += f"‚Ä¢ ...–∏ –µ—â–µ {len(active_filters) - 3}\n"
        
        status_text += f"\nüì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /filters –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"
        
        await update.message.reply_text(status_text, parse_mode='Markdown')
    
    async def filters_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /filters - —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        chat_id = str(update.effective_chat.id)
        user = get_by_telegram_chat_id(self.get_db(), telegram_chat_id=chat_id)
        
        if not user:
            await update.message.reply_text(
                "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/register your@email.com` –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è.",
                parse_mode='Markdown'
            )
            return
        
        filters = crud_filter.get_by_user(self.get_db(), user_id=user.id)
        
        if not filters:
            await update.message.reply_text(
                "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞.\n\n"
                "üåê –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ "
                "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö!"
            )
            return
        
        filters_text = "üîç *–í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:*\n\n"
        
        for f in filters:
            status_emoji = "üü¢" if f.is_active else "üî¥"
            filters_text += f"{status_emoji} *{f.name}*\n"
            
            if f.city:
                filters_text += f"üìç {f.city}\n"
            
            price_range = ""
            if f.min_price and f.max_price:
                price_range = f"{f.min_price}-{f.max_price}‚Ç¨"
            elif f.min_price:
                price_range = f"–æ—Ç {f.min_price}‚Ç¨"
            elif f.max_price:
                price_range = f"–¥–æ {f.max_price}‚Ç¨"
            
            if price_range:
                filters_text += f"üí∞ {price_range}\n"
            
            if f.property_type:
                filters_text += f"üè† {f.property_type}\n"
            
            filters_text += f"‚è∞ –°–æ–∑–¥–∞–Ω: {f.created_at.strftime('%d.%m.%Y')}\n"
            filters_text += f"/pause_{f.id} - {'–≤–∫–ª—é—á–∏—Ç—å' if not f.is_active else '–æ—Ç–∫–ª—é—á–∏—Ç—å'}\n\n"
        
        filters_text += "üåê –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ"
        
        await update.message.reply_text(filters_text, parse_mode='Markdown')
    
    async def pause_filter_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞"""
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤–∏–¥–∞ /pause_123
        command_text = update.message.text
        if '_' in command_text:
            try:
                filter_id = int(command_text.split('_')[1])
                chat_id = str(update.effective_chat.id)
                user = get_by_telegram_chat_id(self.get_db(), telegram_chat_id=chat_id)
                
                if not user:
                    await update.message.reply_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.")
                    return
                
                filter_obj = crud_filter.get(self.get_db(), id=filter_id)
                
                if not filter_obj or filter_obj.user_id != user.id:
                    await update.message.reply_text("‚ùå –§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return
                
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–∏–ª—å—Ç—Ä–∞
                new_status = not filter_obj.is_active
                filter_obj.is_active = new_status
                self.get_db().commit()
                
                status_text = "–≤–∫–ª—é—á–µ–Ω" if new_status else "–æ—Ç–∫–ª—é—á–µ–Ω"
                await update.message.reply_text(
                    f"‚úÖ –§–∏–ª—å—Ç—Ä *{filter_obj.name}* {status_text}.",
                    parse_mode='Markdown'
                )
                
            except (ValueError, IndexError):
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")
    
    async def unknown_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        await update.message.reply_text(
            "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
        )
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        if not self.application:
            raise ValueError("Application –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("register", self.register_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("filters", self.filters_command))
        self.application.add_handler(CommandHandler("dbtest", self.dbtest_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        self.application.add_handler(MessageHandler(
            filters.Regex(r'^/pause_\d+$'), 
            self.pause_filter_command
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        self.application.add_handler(MessageHandler(
            filters.COMMAND, 
            self.unknown_command
        ))
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.application = Application.builder().token(self.token).build()
        self.setup_handlers()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        await self.application.initialize()
        logger.info("Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        if not self.application:
            await self.initialize()
        
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
        await self.application.start()
        await self.application.updater.start_polling()
        
        try:
            # –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            await asyncio.Event().wait()
        except KeyboardInterrupt:
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        finally:
            await self.application.updater.stop()
            await self.application.stop()
    
    async def dbtest_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /dbtest - —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        chat_id = str(update.effective_chat.id)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db = self.get_db()
            
            # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            from src.db.models import User, Listing
            users_count = db.query(User).count()
            listings_count = db.query(Listing).count()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chat_id
            current_user = get_by_telegram_chat_id(db, telegram_chat_id=chat_id)
            
            response = f"üîç **–¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:**\n\n"
            response += f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: –£—Å–ø–µ—à–Ω–æ\n"
            response += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
            response += f"üè† –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {listings_count}\n"
            response += f"ü§ñ –í–∞—à chat_id: `{chat_id}`\n"
            
            if current_user:
                response += f"‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–∞–π–¥–µ–Ω: {current_user.email}\n"
                response += f"üÜî –í–∞—à ID: {current_user.id}\n"
            else:
                response += f"‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Telegram\n"
            
            await update.message.reply_text(response, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /dbtest –¥–ª—è chat_id {chat_id}: {e}")
            await update.message.reply_text(
                f"‚ùå **–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ë–î:**\n\n"
                f"```\n{str(e)}\n```\n\n"
                f"Chat ID: `{chat_id}`", 
                parse_mode='Markdown'
            )

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        if self.application:
            await self.application.stop()
            logger.info("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
telegram_bot = TelegramBotService()


async def send_notification_to_user(
    telegram_chat_id: str, 
    message: str, 
    parse_mode: str = None
) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    try:
        if not telegram_bot.application:
            await telegram_bot.initialize()
        
        await telegram_bot.application.bot.send_message(
            chat_id=telegram_chat_id,
            text=message,
            parse_mode=parse_mode
        )
        
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_chat_id}")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False


async def send_listing_notification(
    telegram_chat_id: str, 
    listing,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑ type hint —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å circular import
    filter_obj
) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–¥–Ω–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
    –ù–æ–≤–∞—è —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
    """
    try:
        if not telegram_bot.application:
            await telegram_bot.initialize()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        message = format_single_listing_message(listing, filter_obj)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
        if listing.images and len(listing.images) > 0:
            media_group = []
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            for i, image_url in enumerate(listing.images[:3]):
                if image_url and image_url.strip():
                    from telegram import InputMediaPhoto
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–æ—Ç–æ
                    caption = message if i == 0 else None
                    media_group.append(InputMediaPhoto(
                        media=image_url.strip(),
                        caption=caption
                    ))
            
            if media_group:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É —Å –ø–æ–¥–ø–∏—Å—å—é
                await telegram_bot.application.bot.send_media_group(
                    chat_id=telegram_chat_id,
                    media=media_group
                )
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {telegram_chat_id}")
                return True
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
        await telegram_bot.application.bot.send_message(
            chat_id=telegram_chat_id,
            text=message
        )
        
        logger.info(f"–¢–µ–∫—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {telegram_chat_id}")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏: {e}")
        return False


def format_floor_info(floor_data) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç—Ç–∞–∂–µ –∏–∑ Python dict —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ JSON
    """
    import json
    import ast
    
    if not floor_data:
        return ""
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∏ –ø–∞—Ä—Å–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
        if isinstance(floor_data, dict):
            floor_dict = floor_data
        elif isinstance(floor_data, str):
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º ast.literal_eval (–¥–ª—è Python dict —Å—Ç—Ä–æ–∫)
            try:
                floor_dict = ast.literal_eval(floor_data)
            except (ValueError, SyntaxError):
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º json.loads
                try:
                    floor_dict = json.loads(floor_data)
                except json.JSONDecodeError:
                    # Fallback –Ω–∞ –ø—Ä—è–º–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    return str(floor_data).strip()
        else:
            # Fallback –Ω–∞ –ø—Ä—è–º–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            return str(floor_data).strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å
        if not isinstance(floor_dict, dict):
            return str(floor_data).strip()
        
        # –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞–∏–±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        
        # 1. –ï—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–∞—Ç–∫–æ–µ abbreviation - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ (–ª—É—á—à–µ –≤—Å–µ–≥–æ)
        if 'abbreviation' in floor_dict and floor_dict['abbreviation']:
            abbr = str(floor_dict['abbreviation']).strip()
            if abbr and abbr != 'None':
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
                if abbr.upper() == 'T':
                    return "—Ü–æ–∫–æ–ª—å–Ω—ã–π —ç—Ç–∞–∂"
                elif abbr.upper() == 'R':
                    return "–ø—Ä–∏–ø–æ–¥–Ω—è—Ç—ã–π —ç—Ç–∞–∂"
                elif '-' in abbr:
                    return f"{abbr} —ç—Ç–∞–∂–∏"
                else:
                    return f"{abbr} —ç—Ç–∞–∂"
        
        # 2. –ï—Å–ª–∏ –Ω–µ—Ç abbreviation, –∏—Å–ø–æ–ª—å–∑—É–µ–º floorOnlyValue (–±–æ–ª–µ–µ –∫—Ä–∞—Ç–∫–∏–π)
        if 'floorOnlyValue' in floor_dict and floor_dict['floorOnlyValue']:
            floor_only = str(floor_dict['floorOnlyValue']).strip().lower()
            if floor_only and floor_only != 'none':
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —ç—Ç–∞–∂–∞–º–∏
                if ',' in floor_only:
                    parts = [part.strip() for part in floor_only.split(',')]
                    # –£–ø—Ä–æ—â–∞–µ–º: –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —á–∞—Å—Ç–∏
                    simplified_parts = []
                    for part in parts:
                        if 'piano terra' in part:
                            simplified_parts.append('—Ü–æ–∫–æ–ª—å')
                        elif 'piano rialzato' in part:
                            simplified_parts.append('–ø—Ä–∏–ø–æ–¥–Ω—è—Ç—ã–π')
                        elif 'interrato' in part and '(-1)' in part:
                            simplified_parts.append('–ø–æ–¥–≤–∞–ª')
                        elif part.isdigit() or (part.replace(' ', '').replace('-', '').isdigit()):
                            simplified_parts.append(f"{part} —ç—Ç.")
                    
                    if len(simplified_parts) <= 2:
                        return ' + '.join(simplified_parts)
                    elif len(simplified_parts) == 3:
                        return f"3 —ç—Ç–∞–∂–∞"
                    else:
                        return f"–º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è"
                
                # –ü—Ä–æ—Å—Ç—ã–µ —Å–ª—É—á–∞–∏
                if 'piano terra' in floor_only:
                    return "—Ü–æ–∫–æ–ª—å–Ω—ã–π —ç—Ç–∞–∂"
                elif 'piano rialzato' in floor_only:
                    return "–ø—Ä–∏–ø–æ–¥–Ω—è—Ç—ã–π —ç—Ç–∞–∂"
                elif 'interrato' in floor_only:
                    return "–ø–æ–¥–≤–∞–ª"
                elif floor_only.replace(' ', '').replace('-', '').isdigit():
                    return f"{floor_only} —ç—Ç–∞–∂"
                else:
                    return f"{floor_only} —ç—Ç–∞–∂"
        
        # 3. Fallback –Ω–∞ –ø–æ–ª–Ω–æ–µ value (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –¥—Ä—É–≥–æ–≥–æ –Ω–µ—Ç)
        if 'value' in floor_dict and floor_dict['value']:
            value = str(floor_dict['value']).strip()
            if value and len(value) < 30:  # –¢–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
                # –£–ø—Ä–æ—â–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è
                if 'con ascensore' in value:
                    value = value.replace(', con ascensore', '').replace(' con ascensore', '')
                if value.endswith('¬∞'):
                    return f"{value} —ç—Ç–∞–∂"
                return value
        
        return ""
        
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç—Ç–∞–∂–µ: {e}")
        # Fallback –Ω–∞ –ø—Ä—è–º–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        return str(floor_data).strip() if floor_data else ""


def format_single_listing_message(listing, filter_obj) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    """
    def clean_text(text: str) -> str:
        if not text:
            return ""
        return str(text).strip()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    title = clean_text(listing.title) if listing.title else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    if len(title) > 80:
        title = title[:77] + "..."
    
    message = f"üè† {title}\n"
    
    # –ê–¥—Ä–µ—Å
    if listing.address:
        address = clean_text(listing.address)
        if len(address) > 100:
            address = address[:97] + "..."
        message += f"üìç {address}\n"
    
    # –¶–µ–Ω–∞
    if listing.price:
        message += f"üí∞ {listing.price}‚Ç¨/–º–µ—Å\n"
    
    # –î–µ—Ç–∞–ª–∏
    details = []
    if listing.rooms:
        details.append(f"üö™ {listing.rooms} –∫–æ–º–Ω.")
    if listing.area:
        details.append(f"üìê {listing.area} –º¬≤")
    if listing.property_type:
        prop_type = clean_text(listing.property_type)
        details.append(f"üè† {prop_type}")
    if listing.floor:
        floor_info = format_floor_info(listing.floor)
        if floor_info:
            details.append(f"üè¢ {floor_info}")
    
    if details:
        message += " ‚Ä¢ ".join(details) + "\n"
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–¥–æ–±—Å—Ç–≤–∞
    amenities = []
    if listing.furnished:
        amenities.append("ü™ë –ú–µ–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è")
    if listing.pets_allowed:
        amenities.append("üêï –†–∞–∑—Ä–µ—à–µ–Ω—ã –ø–∏—Ç–æ–º—Ü—ã")
    
    if amenities:
        message += " ‚Ä¢ ".join(amenities) + "\n"
    
    message += "\n"
    
    # –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (–ø—Ä—è–º–∞—è –∏–ª–∏ —á–µ—Ä–µ–∑ —Ä–µ–¥–∏—Ä–µ–∫—Ç)
    if listing.url:
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç —á–µ—Ä–µ–∑ –Ω–∞—à —Å–∞–π—Ç –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        # redirect_url = f"https://ita-rent-02.vercel.app/redirect/{listing.id}"
        direct_url = clean_text(listing.url)
        message += f"üîó {direct_url}\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å—Ç—Ä–µ
    message += f"\nüîç –§–∏–ª—å—Ç—Ä: {clean_text(filter_obj.name)}"
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    message += f"\n/pause_{filter_obj.id} - –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä"
    
    return message


async def try_create_collage(image_urls: List[str]) -> Optional[str]:
    """
    üé® –°–ï–†–í–ò–° –ö–û–õ–õ–ê–ñ–ï–ô (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω)
    
    –°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–µ –∫–æ–ª–ª–∞–∂–∏ –∏–∑ 2-3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ htmlcsstoimage.com API.
    –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞. –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è:
    
    1. python toggle_photo_collages.py on
    2. –î–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á–∏ –≤ .env:
       HTMLCSS_USER_ID=your_user_id
       HTMLCSS_API_KEY=your_api_key
    
    –†–µ–∑—É–ª—å—Ç–∞—Ç: –≤–º–µ—Å—Ç–æ 3 –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –æ–¥–∏–Ω –∫—Ä–∞—Å–∏–≤—ã–π –∫–æ–ª–ª–∞–∂
    –∫–∞–∫ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ –∏–∑ –∑–∞–¥–∞–Ω–∏—è.
    
    Args:
        image_urls: –°–ø–∏—Å–æ–∫ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        
    Returns:
        URL –∫–æ–ª–ª–∞–∂–∞ –∏–ª–∏ None (—Å–µ–π—á–∞—Å –≤—Å–µ–≥–¥–∞ None - –æ—Ç–∫–ª—é—á–µ–Ω–æ)
    """
    # üö´ –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ
    return None
    
    # üìù –ö–æ–¥ –Ω–∏–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω:
    # try:
    #     from src.core.config import settings
    #     
    #     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –∫–æ–ª–ª–∞–∂–∏
    #     if not settings.ENABLE_PHOTO_COLLAGES:
    #         logger.debug("–ö–æ–ª–ª–∞–∂–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
    #         return None
    #     
    #     # –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    #     if not image_urls or len(image_urls) < 2:
    #         logger.debug("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–æ–ª–ª–∞–∂–∞")
    #         return None
    #     
    #     # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –∫–æ–ª–ª–∞–∂–µ–π
    #     from src.services.simple_collage_service import create_simple_collage
    #     
    #     # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–∞–∂
    #     collage_url = await create_simple_collage(image_urls)
    #     
    #     if collage_url:
    #         logger.info(f"–ö–æ–ª–ª–∞–∂ —Å–æ–∑–¥–∞–Ω: {collage_url}")
    #         return collage_url
    #     else:
    #         logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–∞–∂")
    #         return None
    #         
    # except Exception as e:
    #     logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–∞–∂–∞: {e}")
#     return None


async def send_filter_confirmation_message(telegram_chat_id: str, filter_obj, is_new: bool = True) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞
    """
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ñ–∏–ª—å—Ç—Ä–∞
        action_text = "—Å–æ–∑–¥–∞–Ω" if is_new else "–æ–±–Ω–æ–≤–ª–µ–Ω"
        message = f"‚úÖ –§–∏–ª—å—Ç—Ä —É—Å–ø–µ—à–Ω–æ {action_text}!\n\n"
        message += f"üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {filter_obj.name}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞
        if filter_obj.city:
            message += f"üìç <b>–ì–æ—Ä–æ–¥:</b> {filter_obj.city}\n"
        
        if filter_obj.min_price or filter_obj.max_price:
            price_range = ""
            if filter_obj.min_price:
                price_range += f"–æ—Ç {filter_obj.min_price}‚Ç¨"
            if filter_obj.max_price:
                if price_range:
                    price_range += f" –¥–æ {filter_obj.max_price}‚Ç¨"
                else:
                    price_range += f"–¥–æ {filter_obj.max_price}‚Ç¨"
            message += f"üí∞ <b>–¶–µ–Ω–∞:</b> {price_range}/–º–µ—Å\n"
        
        if filter_obj.min_rooms or filter_obj.max_rooms:
            rooms_range = ""
            if filter_obj.min_rooms:
                rooms_range += f"–æ—Ç {filter_obj.min_rooms}"
            if filter_obj.max_rooms and filter_obj.min_rooms != filter_obj.max_rooms:
                if rooms_range:
                    rooms_range += f" –¥–æ {filter_obj.max_rooms}"
                else:
                    rooms_range += f"–¥–æ {filter_obj.max_rooms}"
            elif filter_obj.min_rooms:
                rooms_range = str(filter_obj.min_rooms)
            message += f"üö™ <b>–ö–æ–º–Ω–∞—Ç:</b> {rooms_range}\n"
        
        if filter_obj.property_type:
            prop_types = {
                'apartment': '–ö–≤–∞—Ä—Ç–∏—Ä–∞',
                'house': '–î–æ–º',
                'room': '–ö–æ–º–Ω–∞—Ç–∞',
                'studio': '–°—Ç—É–¥–∏—è'
            }
            type_name = prop_types.get(filter_obj.property_type, filter_obj.property_type)
            message += f"üè† <b>–¢–∏–ø:</b> {type_name}\n"
        
        message += f"\nüîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> {'–≤–∫–ª—é—á–µ–Ω—ã' if filter_obj.notification_enabled else '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}\n"
        
        if filter_obj.notification_enabled:
            freq_hours = filter_obj.notification_frequency_hours or 24
            if freq_hours >= 24:
                freq_text = f"{freq_hours // 24} —Ä–∞–∑ –≤ –¥–µ–Ω—å"
            else:
                freq_text = f"–∫–∞–∂–¥—ã–µ {freq_hours} —á–∞—Å–æ–≤"
            message += f"‚è± <b>–ß–∞—Å—Ç–æ—Ç–∞:</b> {freq_text}\n"
        
        message += "\nüéØ –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–∞—à–µ–º—É —Ñ–∏–ª—å—Ç—Ä—É, —è —Å—Ä–∞–∑—É –ø—Ä–∏—à–ª—é –∏—Ö –≤–∞–º!"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        from src.core.config import settings
        import aiohttp
        
        url = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage"
        data = {
            "chat_id": telegram_chat_id,
            "text": message,
            "parse_mode": "HTML"
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=data) as response:
                if response.status == 200:
                    return True
                else:
                    response_text = await response.text()
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ Telegram: {response.status} - {response_text}")
                    return False
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ send_filter_confirmation_message: {e}")
        return False


if __name__ == "__main__":
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    import os
    from dotenv import load_dotenv
    
    load_dotenv()
    
    async def main():
        bot = TelegramBotService()
        await bot.start_polling()
    
    asyncio.run(main()) 