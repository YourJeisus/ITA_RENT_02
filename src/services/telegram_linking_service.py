"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞–º–∏ –ø—Ä–∏–≤—è–∑–∫–∏ Telegram
–•—Ä–∞–Ω–∏—Ç –∫–æ–¥—ã —Å–≤—è–∑–∫–∏ –≤ –ø–∞–º—è—Ç–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ–º
"""
import logging
from datetime import datetime, timedelta
from typing import Optional, Dict, Any

logger = logging.getLogger(__name__)


class TelegramLinkingService:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞–º–∏ –ø—Ä–∏–≤—è–∑–∫–∏ Telegram –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.codes: Dict[str, Dict[str, Any]] = {}
        self.code_ttl_hours = 24  # –ö–æ–¥—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã 24 —á–∞—Å–∞
    
    def store_code(self, code: str, telegram_id: int, telegram_username: Optional[str], chat_id: int) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏
        
        Args:
            code: –ö–æ–¥ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏
            telegram_id: ID Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            telegram_username: Username Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            chat_id: ID —á–∞—Ç–∞ Telegram
        """
        self.codes[code] = {
            'telegram_id': telegram_id,
            'telegram_username': telegram_username,
            'chat_id': chat_id,
            'created_at': datetime.now(),
            'expires_at': datetime.now() + timedelta(hours=self.code_ttl_hours)
        }
        logger.info(f"üìù –ö–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏ —Å–æ–∑–¥–∞–Ω: {code} –¥–ª—è Telegram user {telegram_id}")
    
    def get_code(self, code: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–¥—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏—Å—Ç–µ—á–µ–Ω–∏—è
        
        Args:
            code: –ö–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            –î–∞–Ω–Ω—ã–µ –∫–æ–¥–∞ –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –∏–Ω–∞—á–µ None
        """
        if code not in self.codes:
            logger.warning(f"‚ö†Ô∏è –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω: {code}")
            return None
        
        code_data = self.codes[code]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ
        if datetime.now() > code_data['expires_at']:
            logger.warning(f"‚ö†Ô∏è –ö–æ–¥ –∏—Å—Ç–µ–∫: {code}")
            del self.codes[code]
            return None
        
        logger.info(f"‚úÖ –ö–æ–¥ –Ω–∞–π–¥–µ–Ω –∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: {code}")
        return code_data
    
    def remove_code(self, code: str) -> bool:
        """
        –£–¥–∞–ª–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
        
        Args:
            code: –ö–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ –∫–æ–¥ –±—ã–ª —É–¥–∞–ª–µ–Ω, False –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        if code in self.codes:
            del self.codes[code]
            logger.info(f"üóëÔ∏è –ö–æ–¥ —É–¥–∞–ª–µ–Ω: {code}")
            return True
        
        logger.warning(f"‚ö†Ô∏è –ö–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {code}")
        return False
    
    def cleanup_expired(self) -> int:
        """
        –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ –∫–æ–¥—ã (–º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤
        """
        expired_codes = [
            code for code, data in self.codes.items()
            if datetime.now() > data['expires_at']
        ]
        
        for code in expired_codes:
            del self.codes[code]
        
        if expired_codes:
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤: {len(expired_codes)}")
        
        return len(expired_codes)
    
    def get_stats(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤"""
        return {
            'total_codes': len(self.codes),
            'valid_codes': len([
                code for code, data in self.codes.items()
                if datetime.now() <= data['expires_at']
            ])
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
telegram_linking_service = TelegramLinkingService()
