"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞–º–∏ –ø—Ä–∏–≤—è–∑–∫–∏ Telegram
–•—Ä–∞–Ω–∏—Ç –∫–æ–¥—ã —Å–≤—è–∑–∫–∏ –≤ –ø–∞–º—è—Ç–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ–º
"""
import logging
import time
import json
import os
from typing import Dict, Any, Optional
from pathlib import Path

logger = logging.getLogger(__name__)

class TelegramLinkingService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∫–æ–¥–∞–º–∏ —Å–≤—è–∑–∫–∏ Telegram –∞–∫–∫–∞—É–Ω—Ç–æ–≤.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–¥–æ–≤ (—Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–∂–¥—É –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏).
    """
    def __init__(self, expiry_seconds: int = 86400, storage_dir: str = "/tmp"):  # 24 —á–∞—Å–∞
        self.expiry_seconds = expiry_seconds
        self.storage_dir = Path(storage_dir)
        self.codes_file = self.storage_dir / "telegram_linking_codes.json"
        
        # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        self.storage_dir.mkdir(parents=True, exist_ok=True)
        
        logger.info(f"‚úÖ TelegramLinkingService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –•—Ä–∞–Ω–∏–ª–∏—â–µ: {self.codes_file}")
        logger.info(f"   –ö–æ–¥—ã –∏—Å—Ç–µ–∫–∞—é—Ç —á–µ—Ä–µ–∑ {expiry_seconds} —Å–µ–∫—É–Ω–¥.")
    
    def _load_codes(self) -> Dict[str, Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–¥—ã –∏–∑ —Ñ–∞–π–ª–∞"""
        if self.codes_file.exists():
            try:
                with open(self.codes_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∫–æ–¥–æ–≤: {e}")
                return {}
        return {}
    
    def _save_codes(self, codes: Dict[str, Dict[str, Any]]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–¥—ã –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.codes_file, 'w', encoding='utf-8') as f:
                json.dump(codes, f, indent=2)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∫–æ–¥–æ–≤: {e}")
    
    def _cleanup_expired(self, codes: Dict[str, Dict[str, Any]]) -> Dict[str, Dict[str, Any]]:
        """–£–¥–∞–ª—è–µ—Ç –∏—Å—Ç—ë–∫—à–∏–µ –∫–æ–¥—ã"""
        current_time = time.time()
        valid_codes = {}
        
        for code, data in codes.items():
            if (current_time - data['created_at']) < self.expiry_seconds:
                valid_codes[code] = data
            else:
                logger.debug(f"üóëÔ∏è –ö–æ–¥ '{code}' –∏—Å—Ç–µ–∫ –∏ —É–¥–∞–ª–µ–Ω.")
        
        return valid_codes

    def store_code(self, code: str, telegram_id: int, telegram_username: Optional[str], chat_id: int):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–¥ —Å–≤—è–∑–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram"""
        codes = self._load_codes()
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–¥—ã
        codes = self._cleanup_expired(codes)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
        codes[code] = {
            'telegram_id': telegram_id,
            'telegram_username': telegram_username,
            'chat_id': chat_id,
            'created_at': time.time()
        }
        
        self._save_codes(codes)
        logger.info(f"üîó –ö–æ–¥ —Å–≤—è–∑–∫–∏ '{code}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è Telegram ID: {telegram_id}")

    def get_code(self, code: str) -> Optional[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–¥—É, –µ—Å–ª–∏ –æ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω"""
        codes = self._load_codes()
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–¥—ã
        codes = self._cleanup_expired(codes)
        self._save_codes(codes)
        
        if code in codes:
            data = codes[code]
            return data
        
        logger.warning(f"‚ùå –ö–æ–¥ '{code}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫")
        return None

    def remove_code(self, code: str):
        """–£–¥–∞–ª—è–µ—Ç –∫–æ–¥ —Å–≤—è–∑–∫–∏"""
        codes = self._load_codes()
        
        if code in codes:
            del codes[code]
            self._save_codes(codes)
            logger.info(f"üóëÔ∏è –ö–æ–¥ —Å–≤—è–∑–∫–∏ '{code}' —É–¥–∞–ª–µ–Ω.")

    def find_code_by_telegram_id(self, telegram_id: int) -> Optional[Dict[str, Any]]:
        """–ù–∞—Ö–æ–¥–∏—Ç –∫–æ–¥ —Å–≤—è–∑–∫–∏ –ø–æ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        codes = self._load_codes()
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–¥—ã
        codes = self._cleanup_expired(codes)
        
        for code, data in codes.items():
            if data['telegram_id'] == telegram_id:
                return data
        
        logger.warning(f"‚ùå –ö–æ–¥ —Å–≤—è–∑–∫–∏ –¥–ª—è Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫")
        return None

telegram_linking_service = TelegramLinkingService()
