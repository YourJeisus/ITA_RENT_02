"""
WhatsApp —Å–µ—Ä–≤–∏—Å –¥–ª—è ITA_RENT_BOT
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å WhatsApp Business API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""
import logging
import aiohttp
import asyncio
from typing import Optional, Dict, Any, List
from sqlalchemy.orm import Session

from src.core.config import settings
from src.db.database import get_db
from src.crud.crud_user import get_user_by_whatsapp_phone, link_whatsapp, get_by_whatsapp_phone

# –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Twilio SDK
try:
    from twilio.rest import Client as TwilioClient
    TWILIO_SDK_AVAILABLE = True
except ImportError:
    TwilioClient = None
    TWILIO_SDK_AVAILABLE = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


class WhatsAppService:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å WhatsApp Business API"""
    
    def __init__(self):
        if not settings.WHATSAPP_ENABLED:
            logger.warning("‚ö†Ô∏è WhatsApp —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return
            
        if not all([
            settings.WHATSAPP_API_URL,
            settings.WHATSAPP_API_TOKEN,
            settings.WHATSAPP_PHONE_NUMBER_ID
        ]):
            raise ValueError("‚ùå –ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WhatsApp API –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        self.api_url = settings.WHATSAPP_API_URL
        self.api_token = settings.WHATSAPP_API_TOKEN
        self.phone_number_id = settings.WHATSAPP_PHONE_NUMBER_ID
        self.business_account_id = settings.WHATSAPP_BUSINESS_ACCOUNT_ID
        self.db_session = None
        
        # Headers –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
        self.headers = {
            "Authorization": f"Bearer {self.api_token}",
            "Content-Type": "application/json"
        }
    
    def get_db(self) -> Session:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if not self.db_session:
            self.db_session = next(get_db())
        return self.db_session
    
    async def send_text_message_sdk(self, phone_number: str, message: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Twilio Python SDK (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
        """
        if not TWILIO_SDK_AVAILABLE:
            logger.warning("Twilio SDK –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTP API")
            return await self.send_text_message_http(phone_number, message)
        
        if not settings.WHATSAPP_ENABLED:
            logger.warning("WhatsApp —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
            return False
            
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            clean_phone = ''.join(filter(str.isdigit, phone_number))
            if clean_phone.startswith('7'):  # –†–æ—Å—Å–∏—è
                clean_phone = '7' + clean_phone[1:]
            elif clean_phone.startswith('39'):  # –ò—Ç–∞–ª–∏—è
                clean_phone = '39' + clean_phone[2:]
            elif not clean_phone.startswith(('7', '39', '1', '44', '49', '33')):
                clean_phone = '39' + clean_phone
            
            logger.info(f"üì± –û—Ç–ø—Ä–∞–≤–∫–∞ WhatsApp —á–µ—Ä–µ–∑ Twilio SDK –Ω–∞ –Ω–æ–º–µ—Ä {clean_phone[:3]}***{clean_phone[-3:]}")
            
            # –°–æ–∑–¥–∞–µ–º Twilio –∫–ª–∏–µ–Ω—Ç
            client = TwilioClient(
                settings.WHATSAPP_BUSINESS_ACCOUNT_ID,
                settings.WHATSAPP_API_TOKEN
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            twilio_message = client.messages.create(
                from_=settings.WHATSAPP_PHONE_NUMBER_ID,
                to=f"whatsapp:+{clean_phone}",
                body=message
            )
            
            logger.info(f"‚úÖ Twilio SDK: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ (SID: {twilio_message.sid})")
            logger.info(f"üìä –°—Ç–∞—Ç—É—Å: {twilio_message.status}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Twilio SDK: {e}")
            # Fallback –Ω–∞ HTTP API
            return await self.send_text_message_http(phone_number, message)

    async def send_text_message_http(self, phone_number: str, message: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WhatsApp Business API
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Meta Business API –∏ Twilio API
        
        Args:
            phone_number: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–±–µ–∑ +)
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        if not settings.WHATSAPP_ENABLED:
            logger.warning("WhatsApp —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
            return False
            
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—É–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä)
            clean_phone = ''.join(filter(str.isdigit, phone_number))
            
            # WhatsApp API —Ç—Ä–µ–±—É–µ—Ç –Ω–æ–º–µ—Ä –±–µ–∑ + –∏ —Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã
            if clean_phone.startswith('7'):  # –†–æ—Å—Å–∏—è
                clean_phone = '7' + clean_phone[1:]
            elif clean_phone.startswith('39'):  # –ò—Ç–∞–ª–∏—è
                clean_phone = '39' + clean_phone[2:]
            elif not clean_phone.startswith(('7', '39', '1', '44', '49', '33')):
                # –ï—Å–ª–∏ –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –ò—Ç–∞–ª–∏–∏
                clean_phone = '39' + clean_phone
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø API –ø–æ URL
            is_twilio = 'twilio.com' in self.api_url.lower()
            
            if is_twilio:
                # Twilio API —Ñ–æ—Ä–º–∞—Ç
                payload = {
                    "From": self.phone_number_id,  # whatsapp:+14155238886
                    "To": f"whatsapp:+{clean_phone}",
                    "Body": message
                }
                
                # Twilio –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Basic Auth
                import base64
                auth_string = f"{settings.WHATSAPP_BUSINESS_ACCOUNT_ID}:{self.api_token}"
                auth_bytes = auth_string.encode('ascii')
                auth_b64 = base64.b64encode(auth_bytes).decode('ascii')
                
                headers = {
                    "Authorization": f"Basic {auth_b64}",
                    "Content-Type": "application/x-www-form-urlencoded"
                }
                
                url = self.api_url
                
                logger.info(f"üì± –û—Ç–ø—Ä–∞–≤–∫–∞ Twilio WhatsApp —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–æ–º–µ—Ä {clean_phone[:3]}***{clean_phone[-3:]}")
                
                async with aiohttp.ClientSession() as session:
                    async with session.post(
                        url,
                        data=payload,  # Twilio –ø—Ä–∏–Ω–∏–º–∞–µ—Ç form data
                        headers=headers,
                        timeout=aiohttp.ClientTimeout(total=30)
                    ) as response:
                        
                        if response.status in [200, 201]:
                            result = await response.json()
                            message_sid = result.get("sid")
                            logger.info(f"‚úÖ Twilio WhatsApp —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ (SID: {message_sid})")
                            return True
                        else:
                            error_text = await response.text()
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Twilio WhatsApp: {response.status} - {error_text}")
                            return False
            else:
                # Meta Business API —Ñ–æ—Ä–º–∞—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
                url = f"{self.api_url}/{self.phone_number_id}/messages"
                
                payload = {
                    "messaging_product": "whatsapp",
                    "to": clean_phone,
                    "type": "text",
                    "text": {
                        "body": message
                    }
                }
                
                logger.info(f"üì± –û—Ç–ø—Ä–∞–≤–∫–∞ Meta WhatsApp —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–æ–º–µ—Ä {clean_phone[:3]}***{clean_phone[-3:]}")
                
                async with aiohttp.ClientSession() as session:
                    async with session.post(
                        url,
                        json=payload,
                        headers=self.headers,
                        timeout=aiohttp.ClientTimeout(total=30)
                    ) as response:
                        
                        if response.status == 200:
                            result = await response.json()
                            message_id = result.get("messages", [{}])[0].get("id")
                            logger.info(f"‚úÖ Meta WhatsApp —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ (ID: {message_id})")
                            return True
                        else:
                            error_text = await response.text()
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Meta WhatsApp: {response.status} - {error_text}")
                            return False
                        
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ WhatsApp —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False

    async def send_text_message(self, phone_number: str, message: str) -> bool:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ - —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ—Ç SDK, –ø–æ—Ç–æ–º HTTP
        """
        if TWILIO_SDK_AVAILABLE:
            return await self.send_text_message_sdk(phone_number, message)
        else:
            return await self.send_text_message_http(phone_number, message)

    async def send_media_message(self, phone_number: str, message: str, media_url: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ Twilio SDK
        """
        if not TWILIO_SDK_AVAILABLE:
            logger.warning("Twilio SDK –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return await self.send_text_message_http(phone_number, message)
        
        if not settings.WHATSAPP_ENABLED:
            logger.warning("WhatsApp —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
            return False
            
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            clean_phone = ''.join(filter(str.isdigit, phone_number))
            if clean_phone.startswith('7'):  # –†–æ—Å—Å–∏—è
                clean_phone = '7' + clean_phone[1:]
            elif clean_phone.startswith('39'):  # –ò—Ç–∞–ª–∏—è
                clean_phone = '39' + clean_phone[2:]
            elif not clean_phone.startswith(('7', '39', '1', '44', '49', '33')):
                clean_phone = '39' + clean_phone
            
            logger.info(f"üì±üñºÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ WhatsApp —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –Ω–∞ –Ω–æ–º–µ—Ä {clean_phone[:3]}***{clean_phone[-3:]}")
            
            # –°–æ–∑–¥–∞–µ–º Twilio –∫–ª–∏–µ–Ω—Ç
            client = TwilioClient(
                settings.WHATSAPP_BUSINESS_ACCOUNT_ID,
                settings.WHATSAPP_API_TOKEN
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞
            twilio_message = client.messages.create(
                from_=settings.WHATSAPP_PHONE_NUMBER_ID,
                to=f"whatsapp:+{clean_phone}",
                body=message,
                media_url=[media_url]  # Twilio –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            )
            
            logger.info(f"‚úÖ Twilio SDK: –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ (SID: {twilio_message.sid})")
            logger.info(f"üìä –°—Ç–∞—Ç—É—Å: {twilio_message.status}")
            logger.info(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {media_url}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ —á–µ—Ä–µ–∑ Twilio SDK: {e}")
            # Fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.info("üîÑ Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return await self.send_text_message(phone_number, message)

    def format_single_listing_message(self, listing: Dict, filter_name: str = "–í–∞—à —Ñ–∏–ª—å—Ç—Ä") -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–∫–∞–∫ –≤ Telegram)
        """
        def clean_text(text) -> str:
            return str(text).strip() if text else ""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = clean_text(listing.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
        if len(title) > 60:
            title = title[:57] + "..."
        
        message_parts = [
            f"üè† *{title}*",
            ""
        ]
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        price = listing.get('price')
        if price:
            price_line = f"üí∞ *{price}‚Ç¨/–º–µ—Å—è—Ü*"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            details = []
            if listing.get('rooms'):
                details.append(f"üö™ {listing['rooms']} –∫–æ–º–Ω.")
            if listing.get('area'):
                details.append(f"üìê {listing['area']} –º¬≤")
            
            if details:
                price_line += " ‚Ä¢ " + " ‚Ä¢ ".join(details)
            
            message_parts.append(price_line)
        
        # –ê–¥—Ä–µ—Å
        address = clean_text(listing.get('address', ''))
        city = clean_text(listing.get('city', ''))
        if address:
            location = f"üìç {address}"
            if city and city not in address:
                location += f", {city}"
            message_parts.append(location)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        extras = []
        if listing.get('furnished'):
            extras.append("ü™ë –ú–µ–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è")
        if listing.get('pets_allowed'):
            extras.append("üêï –ü–∏—Ç–æ–º—Ü—ã –û–ö")
        if listing.get('floor') is not None:
            extras.append(f"üè¢ {listing['floor']} —ç—Ç–∞–∂")
        
        if extras:
            message_parts.append(" ‚Ä¢ ".join(extras))
        
        # –°—Å—ã–ª–∫–∞
        if listing.get('url'):
            url = clean_text(listing['url'])
            domain = url.split('/')[2] if '/' in url else listing.get('source', '–∏—Å—Ç–æ—á–Ω–∏–∫')
            message_parts.append(f"üîó {domain}")
        
        message_parts.append("")
        message_parts.append(f"üìç _–§–∏–ª—å—Ç—Ä: {filter_name}_")
        message_parts.append("üì± *ITA_RENT_BOT*")
        
        return "\n".join(message_parts)

    async def send_individual_listings(self, phone_number: str, listings: List[Dict], filter_name: str) -> int:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∂–¥–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        successful_count = 0
        
        logger.info(f"üì± –û—Ç–ø—Ä–∞–≤–∫–∞ {len(listings)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –Ω–æ–º–µ—Ä {phone_number}")
        
        for i, listing in enumerate(listings[:5], 1):  # –ú–∞–∫—Å–∏–º—É–º 5 –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            try:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                message = self.format_single_listing_message(listing, filter_name)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                images = listing.get('images', [])
                
                success = False
                if images and len(images) > 0:
                    # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å –ø–µ—Ä–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                    first_image = images[0]
                    if first_image and (first_image.startswith('http://') or first_image.startswith('https://')):
                        logger.info(f"üì∏ –û–±—ä—è–≤–ª–µ–Ω–∏–µ {i}: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")
                        success = await self.send_media_message(phone_number, message, first_image)
                
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –Ω–µ–≥–æ
                if not success:
                    logger.info(f"üìù –û–±—ä—è–≤–ª–µ–Ω–∏–µ {i}: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                    success = await self.send_text_message(phone_number, message)
                
                if success:
                    successful_count += 1
                    logger.info(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ {i}/{len(listings)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ {i}")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (—á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å)
                if i < len(listings):
                    await asyncio.sleep(2)
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {i}: {e}")
                continue
        
        logger.info(f"üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {successful_count} –∏–∑ {len(listings)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        return successful_count

    async def send_listing_with_images(self, phone_number: str, listings: List[Dict], filter_name: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π - –∫–∞–∂–¥–æ–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å —Ñ–æ—Ç–æ (–∫–∞–∫ –≤ Telegram)
        """
        try:
            if not listings:
                return False
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
            successful_count = await self.send_individual_listings(phone_number, listings, filter_name)
            
            # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            return successful_count > 0
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {e}")
            return False
    
    async def send_template_message(self, phone_number: str, template_name: str, 
                                  language_code: str = "ru", parameters: List[str] = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —à–∞–±–ª–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WhatsApp Business API
        
        Args:
            phone_number: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            template_name: –ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
            language_code: –ö–æ–¥ —è–∑—ã–∫–∞ (ru, en, it)
            parameters: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ —à–∞–±–ª–æ–Ω
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        if not settings.WHATSAPP_ENABLED:
            return False
            
        try:
            clean_phone = ''.join(filter(str.isdigit, phone_number))
            
            url = f"{self.api_url}/{self.phone_number_id}/messages"
            
            payload = {
                "messaging_product": "whatsapp",
                "to": clean_phone,
                "type": "template",
                "template": {
                    "name": template_name,
                    "language": {"code": language_code}
                }
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if parameters:
                payload["template"]["components"] = [{
                    "type": "body",
                    "parameters": [{"type": "text", "text": param} for param in parameters]
                }]
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    url,
                    json=payload,
                    headers=self.headers,
                    timeout=aiohttp.ClientTimeout(total=30)
                ) as response:
                    
                    if response.status == 200:
                        result = await response.json()
                        message_id = result.get("messages", [{}])[0].get("id")
                        logger.info(f"‚úÖ WhatsApp —à–∞–±–ª–æ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ (ID: {message_id})")
                        return True
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WhatsApp —à–∞–±–ª–æ–Ω–∞: {response.status} - {error_text}")
                        return False
                        
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ WhatsApp —à–∞–±–ª–æ–Ω–∞: {e}")
            return False
    
    def format_listing_message(self, listings: List[Dict], filter_name: str = "–í–∞—à —Ñ–∏–ª—å—Ç—Ä") -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ –¥–ª—è WhatsApp
        
        Args:
            listings: –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            filter_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        if not listings:
            return "–ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –≤–∞—à–µ–º—É —Ñ–∏–ª—å—Ç—Ä—É –ø–æ–∫–∞ –Ω–µ—Ç."
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 3 –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (WhatsApp –ª–∏–º–∏—Ç)
        listings_to_show = listings[:3]
        count = len(listings)
        
        message = f"üè† *–ù–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è!*\n\n"
        message += f"üìç –§–∏–ª—å—Ç—Ä: _{filter_name}_\n"
        message += f"üìä –ù–∞–π–¥–µ–Ω–æ: {count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n\n"
        
        for i, listing in enumerate(listings_to_show, 1):
            price = listing.get('price', '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
            title = listing.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:80]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
            address = listing.get('address', listing.get('city', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'))[:60]
            source = listing.get('source', '').upper()
            rooms = listing.get('rooms')
            area = listing.get('area')
            
            message += f"*{i}. {title}*\n"
            message += f"üí∞ {price}‚Ç¨/–º–µ—Å"
            
            if rooms:
                message += f" ‚Ä¢ üö™ {rooms} –∫–æ–º–Ω."
            if area:
                message += f" ‚Ä¢ üìê {area} –º¬≤"
            
            message += f"\nüìç {address}\n"
            message += f"üîó {listing.get('url', '–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')}\n"
            message += f"üì± –ò—Å—Ç–æ—á–Ω–∏–∫: {source}\n\n"
        
        if count > 3:
            message += f"... –∏ –µ—â–µ {count - 3} –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n\n"
        
        message += "üí° _–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ_"
        
        return message
    
    async def verify_phone_number(self, phone_number: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –Ω–æ–º–µ—Ä
        
        Args:
            phone_number: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            bool: –ú–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä
        """
        if not settings.WHATSAPP_ENABLED:
            return False
            
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            test_message = "–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WhatsApp —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ITA_RENT_BOT"
            return await self.send_text_message(phone_number, test_message)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–º–µ—Ä–∞ WhatsApp {phone_number}: {e}")
            return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
whatsapp_service = None

def get_whatsapp_service() -> Optional[WhatsAppService]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ WhatsApp —Å–µ—Ä–≤–∏—Å–∞"""
    global whatsapp_service
    
    if not settings.WHATSAPP_ENABLED:
        return None
        
    if whatsapp_service is None:
        try:
            whatsapp_service = WhatsAppService()
            logger.info("‚úÖ WhatsApp —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WhatsApp —Å–µ—Ä–≤–∏—Å–∞: {e}")
            return None
    
    return whatsapp_service


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ telegram_bot.py)
async def send_whatsapp_notification(
    phone_number: str, 
    message: str
) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ WhatsApp —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    Args:
        phone_number: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        
    Returns:
        bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
    service = get_whatsapp_service()
    if not service:
        logger.warning("WhatsApp —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False
    
    return await service.send_text_message(phone_number, message)


async def send_whatsapp_listing_notification(
    phone_number: str,
    listings: List[Dict],
    filter_name: str = "–í–∞—à —Ñ–∏–ª—å—Ç—Ä"
) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ —á–µ—Ä–µ–∑ WhatsApp —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    
    Args:
        phone_number: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        listings: –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        filter_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
        
    Returns:
        bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
    service = get_whatsapp_service()
    if not service:
        return False
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    return await service.send_listing_with_images(phone_number, listings, filter_name) 