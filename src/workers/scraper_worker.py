#!/usr/bin/env python3
"""
ü§ñ –í–û–†–ö–ï–† –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ü–ê–†–°–ò–ù–ì–ê

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
–†–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –Ω–∞ Railway
"""
import asyncio
import logging
import signal
import sys
from datetime import datetime, timedelta
from typing import Optional
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, '/app')

from src.services.scraping_service import ScrapingService
from src.db.database import SessionLocal, engine
from src.db.models import Base
from src.core.config import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(sys.stdout),
    ]
)
logger = logging.getLogger(__name__)


class ScraperWorker:
    """–í–æ—Ä–∫–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤"""
    
    def __init__(self):
        self.scraping_service = ScrapingService()
        self.is_running = True
        # –ß–∏—Ç–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.interval_hours = settings.SCRAPER_WORKER_INTERVAL_HOURS
        self.max_pages = settings.SCRAPER_WORKER_MAX_PAGES
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
        self.is_running = False
        
    async def ensure_database_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ë–î –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
        try:
            logger.info("üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
            Base.metadata.create_all(bind=engine)
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –ë–î –≥–æ—Ç–æ–≤—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –ë–î: {e}")
            raise
            
    async def run_scraping_cycle(self) -> bool:
        """
        –ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ
        """
        try:
            logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ü–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥–∞...")
            
            # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–ø–æ–∫–∞ –ø–∞—Ä—Å–∏–º –†–∏–º)
            filters = {
                "city": "roma",
                "property_type": "apartment"
            }
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
            db = SessionLocal()
            
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                result = await self.scraping_service.scrape_and_save(
                    filters=filters,
                    db=db,
                    max_pages=self.max_pages
                )
                
                if result["success"]:
                    logger.info(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ:")
                    logger.info(f"   üìã –°–ø–∞—Ä—à–µ–Ω–æ: {result['scraped_count']} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
                    logger.info(f"   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {result['saved_count']} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
                    logger.info(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {result['elapsed_time']:.2f} —Å–µ–∫")
                    return True
                else:
                    logger.error(f"‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {result['message']}")
                    return False
                    
            finally:
                db.close()
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return False
            
    async def run_worker(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤–æ—Ä–∫–µ—Ä–∞"""
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞")
        logger.info(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–∞—Ä—Å–∏–Ω–≥–∞: –∫–∞–∂–¥—ã–µ {self.interval_hours} —á–∞—Å–æ–≤")
        logger.info(f"üìÑ –ú–∞–∫—Å–∏–º—É–º —Å—Ç—Ä–∞–Ω–∏—Ü –∑–∞ —Ü–∏–∫–ª: {self.max_pages}")
        logger.info(f"üîë ScraperAPI: {'‚úÖ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' if settings.SCRAPERAPI_KEY else '‚ùå –ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
        logger.info(f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {settings.DATABASE_URL[:50]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if not settings.SCRAPERAPI_KEY:
            logger.error("‚ùå SCRAPERAPI_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –í–æ—Ä–∫–µ—Ä –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
            return
            
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ë–î –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        await self.ensure_database_tables()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Ü–∏–∫–ª —Å—Ä–∞–∑—É
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Ü–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ä–∞–∑—É...")
        await self.run_scraping_cycle()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å —Ç–∞–π–º–µ—Ä–æ–º
        while self.is_running:
            try:
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                next_run = datetime.now() + timedelta(hours=self.interval_hours)
                logger.info(f"üò¥ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {next_run.strftime('%Y-%m-%d %H:%M:%S')}")
                
                # –°–ø–∏–º –ø–æ —á–∞—Å—Ç—è–º, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø—Ä–µ—Ä–≤–∞—Ç—å
                sleep_seconds = self.interval_hours * 3600
                for _ in range(sleep_seconds):
                    if not self.is_running:
                        break
                    await asyncio.sleep(1)
                
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É, –≤—ã—Ö–æ–¥–∏–º
                if not self.is_running:
                    break
                    
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–µ—Ä–µ–¥–Ω–æ–π —Ü–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥–∞
                logger.info(f"‚è∞ –í—Ä–µ–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞!")
                await self.run_scraping_cycle()
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ –≤–æ—Ä–∫–µ—Ä–∞: {e}")
                # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
                await asyncio.sleep(300)
                
        logger.info("üõë –í–æ—Ä–∫–µ—Ä –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    async def health_check(self):
        """Health check –¥–ª—è Railway"""
        return {
            "status": "healthy",
            "worker_type": "scraper",
            "interval_hours": self.interval_hours,
            "is_running": self.is_running,
            "timestamp": datetime.now().isoformat()
        }


async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –≤–æ—Ä–∫–µ—Ä–∞"""
    logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ—Ä–∫–µ—Ä–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
    
    worker = ScraperWorker()
    
    try:
        await worker.run_worker()
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞: {e}")
        sys.exit(1)
    finally:
        logger.info("üëã –í–æ—Ä–∫–µ—Ä –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–∏–ø–∞ –≤–æ—Ä–∫–µ—Ä–∞
    worker_type = os.getenv("WORKER_TYPE", "")
    
    if worker_type != "scraper":
        logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –≤–æ—Ä–∫–µ—Ä–∞: {worker_type}. –û–∂–∏–¥–∞–µ—Ç—Å—è: scraper")
        sys.exit(1)
        
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä
    asyncio.run(main()) 