#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
"""
import subprocess
import sys
import os
import time
import signal
from pathlib import Path

def print_section(title):
    print(f"\n{'='*60}")
    print(f"  {title}")
    print(f"{'='*60}")

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print_section("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –ø–∞–∫–µ—Ç—ã
    try:
        import uvicorn
        import fastapi
        import sqlalchemy
        print("‚úÖ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except ImportError as e:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {e}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Node.js
    try:
        result = subprocess.run(["node", "--version"], capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ Node.js —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result.stdout.strip()}")
        else:
            print("‚ùå Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    except FileNotFoundError:
        print("‚ùå Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º npm
    try:
        result = subprocess.run(["npm", "--version"], capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ npm —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result.stdout.strip()}")
        else:
            print("‚ùå npm –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    except FileNotFoundError:
        print("‚ùå npm –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    return True

def setup_database():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print_section("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    try:
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
        print("–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...")
        result = subprocess.run(["alembic", "upgrade", "head"], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: {result.stderr}")
            return False
    except FileNotFoundError:
        print("‚ùå Alembic –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    return True

def install_frontend_deps():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
    print_section("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞")
    
    frontend_path = Path("frontend")
    if not frontend_path.exists():
        print("‚ùå –ü–∞–ø–∫–∞ frontend –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    try:
        os.chdir(frontend_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ node_modules
        if not Path("node_modules").exists():
            print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ npm –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
            result = subprocess.run(["npm", "install"], capture_output=True, text=True)
            if result.returncode == 0:
                print("‚úÖ npm –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ npm –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {result.stderr}")
                return False
        else:
            print("‚úÖ npm –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        os.chdir("..")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        os.chdir("..")
        return False

def start_backend():
    """–ó–∞–ø—É—Å–∫ –±—ç–∫–µ–Ω–¥–∞"""
    print_section("–ó–∞–ø—É—Å–∫ –±—ç–∫–µ–Ω–¥–∞")
    
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://localhost:8000")
        backend_process = subprocess.Popen([
            sys.executable, "-m", "uvicorn", 
            "src.main:app", 
            "--reload", 
            "--host", "0.0.0.0", 
            "--port", "8000"
        ])
        return backend_process
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—ç–∫–µ–Ω–¥–∞: {e}")
        return None

def start_frontend():
    """–ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
    print_section("–ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞")
    
    try:
        os.chdir("frontend")
        print("üöÄ –ó–∞–ø—É—Å–∫ React —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://localhost:5173")
        frontend_process = subprocess.Popen([
            "npm", "run", "dev"
        ])
        os.chdir("..")
        return frontend_process
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞: {e}")
        os.chdir("..")
        return None

def wait_for_services():
    """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print_section("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤")
    
    import requests
    
    # –ñ–¥–µ–º –±—ç–∫–µ–Ω–¥
    print("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –±—ç–∫–µ–Ω–¥–∞...")
    for i in range(30):  # 30 —Å–µ–∫—É–Ω–¥
        try:
            response = requests.get("http://localhost:8000/health", timeout=2)
            if response.status_code == 200:
                print("‚úÖ –ë—ç–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç")
                break
        except:
            pass
        time.sleep(1)
        print(f"  –ü–æ–ø—ã—Ç–∫–∞ {i+1}/30...")
    else:
        print("‚ùå –ë—ç–∫–µ–Ω–¥ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥")
        return False
    
    # –ñ–¥–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
    print("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...")
    for i in range(30):  # 30 —Å–µ–∫—É–Ω–¥
        try:
            response = requests.get("http://localhost:5173", timeout=2)
            if response.status_code == 200:
                print("‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç")
                break
        except:
            pass
        time.sleep(1)
        print(f"  –ü–æ–ø—ã—Ç–∫–∞ {i+1}/30...")
    else:
        print("‚ùå –§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥")
        return False
    
    return True

def main():
    print("üöÄ ITA_RENT_BOT - –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not check_requirements():
        print("\n‚ùå –ù–µ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
        return 1
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if not setup_database():
        print("\n‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
        return 1
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    if not install_frontend_deps():
        print("\n‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
        return 1
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
    backend_process = start_backend()
    if not backend_process:
        return 1
    
    time.sleep(3)  # –î–∞–µ–º –±—ç–∫–µ–Ω–¥—É –≤—Ä–µ–º—è –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    
    frontend_process = start_frontend()
    if not frontend_process:
        backend_process.terminate()
        return 1
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    if not wait_for_services():
        backend_process.terminate()
        frontend_process.terminate()
        return 1
    
    print_section("üéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!")
    print("üì± –§—Ä–æ–Ω—Ç–µ–Ω–¥: http://localhost:5173")
    print("üîß API: http://localhost:8000")
    print("üìö API Docs: http://localhost:8000/docs")
    print("\nüí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    def signal_handler(sig, frame):
        print_section("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤")
        print("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—ç–∫–µ–Ω–¥–∞...")
        backend_process.terminate()
        print("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...")
        frontend_process.terminate()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        backend_process.wait()
        frontend_process.wait()
        
        print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        backend_process.wait()
        frontend_process.wait()
    except KeyboardInterrupt:
        signal_handler(None, None)
    
    return 0

if __name__ == "__main__":
    sys.exit(main()) 