#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API endpoints
"""
import asyncio
import requests
import json
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = "http://localhost:8000/api/v1"
TEST_USER_EMAIL = "test@example.com"
TEST_USER_PASSWORD = "testpassword123"

def print_section(title):
    print(f"\n{'='*50}")
    print(f"  {title}")
    print(f"{'='*50}")

def print_response(response):
    print(f"Status: {response.status_code}")
    try:
        data = response.json()
        print(f"Response: {json.dumps(data, indent=2, ensure_ascii=False)}")
    except:
        print(f"Response: {response.text}")
    print("-" * 30)

def test_health():
    print_section("1. Health Check")
    try:
        response = requests.get(f"{API_BASE_URL}/../health", timeout=10)
        print_response(response)
        return response.status_code == 200
    except Exception as e:
        print(f"Error: {e}")
        return False

def test_auth():
    print_section("2. Authentication")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    print("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    register_data = {
        "email": TEST_USER_EMAIL,
        "password": TEST_USER_PASSWORD,
        "first_name": "Test",
        "last_name": "User"
    }
    
    try:
        response = requests.post(f"{API_BASE_URL}/auth/register", json=register_data, timeout=10)
        print_response(response)
        
        if response.status_code == 422:
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–±—É–µ–º –≤–æ–π—Ç–∏...")
        
        # –í—Ö–æ–¥
        print("–í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        login_data = {
            "username": TEST_USER_EMAIL,  # FastAPI OAuth2 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç username
            "password": TEST_USER_PASSWORD
        }
        
        response = requests.post(f"{API_BASE_URL}/auth/login", data=login_data, timeout=10)
        print_response(response)
        
        if response.status_code == 200:
            token_data = response.json()
            return token_data.get("access_token")
        
    except Exception as e:
        print(f"Error: {e}")
    
    return None

def test_listings(token=None):
    print_section("3. Listings API")
    
    headers = {}
    if token:
        headers["Authorization"] = f"Bearer {token}"
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤
    print("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤:")
    try:
        response = requests.get(f"{API_BASE_URL}/listings/suggestions/cities", headers=headers, timeout=10)
        print_response(response)
    except Exception as e:
        print(f"Error: {e}")
    
    # –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    print("–ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:")
    search_params = {
        "city": "Roma",
        "min_price": 500,
        "max_price": 2000,
        "limit": 5
    }
    
    try:
        response = requests.get(f"{API_BASE_URL}/listings/", params=search_params, headers=headers, timeout=30)
        print_response(response)
    except Exception as e:
        print(f"Error: {e}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    try:
        response = requests.get(f"{API_BASE_URL}/listings/stats/database", headers=headers, timeout=10)
        print_response(response)
    except Exception as e:
        print(f"Error: {e}")

def test_filters(token):
    if not token:
        print("–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤")
        return
    
    print_section("4. Filters API")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    try:
        response = requests.get(f"{API_BASE_URL}/filters/", headers=headers, timeout=10)
        print_response(response)
    except Exception as e:
        print(f"Error: {e}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
    print("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞:")
    filter_data = {
        "name": "–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä",
        "city": "Roma",
        "min_price": 800,
        "max_price": 1500,
        "min_rooms": 2,
        "property_type": "apartment",
        "notification_enabled": True
    }
    
    try:
        response = requests.post(f"{API_BASE_URL}/filters/", json=filter_data, headers=headers, timeout=10)
        print_response(response)
        
        if response.status_code == 200:
            filter_id = response.json().get("id")
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
            if filter_id:
                print(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ {filter_id}:")
                response = requests.post(f"{API_BASE_URL}/filters/{filter_id}/test", headers=headers, timeout=10)
                print_response(response)
        
    except Exception as e:
        print(f"Error: {e}")

def test_scraping():
    print_section("5. Scraping API")
    
    # –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
    print("–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞:")
    scraping_data = {
        "sources": ["idealista"],
        "city": "Roma",
        "max_pages": 1
    }
    
    try:
        response = requests.post(f"{API_BASE_URL}/scraping/run", json=scraping_data, timeout=60)
        print_response(response)
    except Exception as e:
        print(f"Error: {e}")
    
    # –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–∏–Ω–≥–∞
    print("–°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–∏–Ω–≥–∞:")
    try:
        response = requests.get(f"{API_BASE_URL}/scraping/status", timeout=10)
        print_response(response)
    except Exception as e:
        print(f"Error: {e}")

def main():
    print(f"üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API: {API_BASE_URL}")
    print(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # 1. Health check
    if not test_health():
        print("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
        return
    
    print("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω!")
    
    # 2. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    token = test_auth()
    if token:
        print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏!")
    
    # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ listings
    test_listings(token)
    
    # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (—Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
    if token:
        test_filters(token)
    
    # 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
    test_scraping()
    
    print_section("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")

if __name__ == "__main__":
    main() 