#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –ü–ï–†–ï–ó–ê–ü–ò–°–ò –§–ò–õ–¨–¢–†–û–í

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Ç–æ—Ä–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–µ—Ä–≤—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è
"""
import sys
import os
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from src.crud.crud_filter import filter as crud_filter
from src.crud.crud_user import user as crud_user
from src.schemas.filter import FilterCreate
import sqlalchemy
from sqlalchemy.orm import sessionmaker

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ–Ω–ª–∞–π–Ω –ë–î Railway
DATABASE_URL = 'postgresql://postgres:TAkDvHCdDTxVzutQsNNfJgbcSttzrgzN@caboose.proxy.rlwy.net:15179/railway'
engine = sqlalchemy.create_engine(DATABASE_URL, echo=False)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

def test_filter_overwrite(user_email: str = "your@jeisus.ru"):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å —Ñ–∏–ª—å—Ç—Ä–æ–≤
    """
    print("üß™ –¢–ï–°–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –ü–ï–†–ï–ó–ê–ü–ò–°–ò –§–ò–õ–¨–¢–†–û–í")
    print("=" * 60)
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_email}")
    print("=" * 60)
    
    db = SessionLocal()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = crud_user.get_by_email(db, email=user_email)
        if not user:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_email} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.email} ({user.subscription_type})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
        existing_filters = crud_filter.get_by_user(db=db, user_id=user.id)
        print(f"üìä –¢–µ–∫—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤: {len(existing_filters)}")
        
        if existing_filters:
            for i, f in enumerate(existing_filters, 1):
                print(f"   {i}. ID {f.id}: {f.name} | {f.city} | {f.property_type}")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä
        print(f"\nüîÑ –°–æ–∑–¥–∞–µ–º –ù–û–í–´–ô —Ñ–∏–ª—å—Ç—Ä...")
        new_filter_data = FilterCreate(
            name="–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä - –ú–∏–ª–∞–Ω",
            city="Milano",
            min_price=1000,
            max_price=2500,
            property_type="house",  # –º–µ–Ω—è–µ–º –Ω–∞ –¥–æ–º–∞
            min_rooms=3,
            max_rooms=5,
            notification_enabled=True
        )
        
        if len(existing_filters) >= 1:
            # –î–æ–ª–∂–Ω–∞ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å
            print(f"   üìù –û–∂–∏–¥–∞–µ—Ç—Å—è –ü–ï–†–ï–ó–ê–ü–ò–°–¨ —Ñ–∏–ª—å—Ç—Ä–∞ ID {existing_filters[0].id}")
            old_filter = existing_filters[0]
            updated_filter = crud_filter.update(
                db=db,
                db_obj=old_filter,
                obj_in=new_filter_data
            )
            print(f"   ‚úÖ –§–∏–ª—å—Ç—Ä ID {updated_filter.id} –æ–±–Ω–æ–≤–ª–µ–Ω")
        else:
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ
            print(f"   üìù –°–æ–∑–¥–∞–µ—Ç—Å—è –ù–û–í–´–ô —Ñ–∏–ª—å—Ç—Ä")
            new_filter = crud_filter.create_with_owner(
                db=db,
                obj_in=new_filter_data,
                user_id=user.id
            )
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∏–ª—å—Ç—Ä ID {new_filter.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        updated_filters = crud_filter.get_by_user(db=db, user_id=user.id)
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(f"   üìà –§–∏–ª—å—Ç—Ä–æ–≤ –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: {len(updated_filters)}")
        
        if updated_filters:
            for i, f in enumerate(updated_filters, 1):
                print(f"   {i}. ID {f.id}: {f.name}")
                print(f"      üìç {f.city} | üè† {f.property_type} | üí∞ {f.min_price}-{f.max_price}‚Ç¨")
                print(f"      üö™ {f.min_rooms}-{f.max_rooms} –∫–æ–º–Ω | üìÖ {f.updated_at}")
        
        success = len(updated_filters) == 1
        
        if success:
            print(f"\n‚úÖ –¢–ï–°–¢ –ü–†–û–®–ï–õ: –º–∞–∫—Å–∏–º—É–º 1 —Ñ–∏–ª—å—Ç—Ä –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        else:
            print(f"\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–®–ï–õ: –Ω–∞–π–¥–µ–Ω–æ {len(updated_filters)} —Ñ–∏–ª—å—Ç—Ä–æ–≤!")
        
        return success
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False
    finally:
        db.close()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description="–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤")
    parser.add_argument("--email", type=str, default="your@jeisus.ru", 
                       help="Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    args = parser.parse_args()
    
    try:
        result = test_filter_overwrite(args.email)
        if result:
            print(f"\nüéâ –í–°–ï –†–ê–ë–û–¢–ê–ï–¢! –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        else:
            print(f"\n‚ö†Ô∏è  –ù–£–ñ–ù–ê –î–û–†–ê–ë–û–¢–ö–ê. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")
        
        sys.exit(0 if result else 1)
        
    except KeyboardInterrupt:
        print(f"\n‚èπÔ∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 