#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è WhatsApp –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
2. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∞–ø–∏–Ω–≥
3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""
import os
import sys
import asyncio
import logging
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def load_environment():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    try:
        from dotenv import load_dotenv
        load_dotenv()
        logger.info("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except ImportError:
        logger.info("üìù python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")

def create_test_filter():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è WhatsApp –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞...")
    
    try:
        from src.db.database import get_db
        from src.db.models import User, Filter
        
        db = next(get_db())
        
        # –ù–∞—Ö–æ–¥–∏–º WhatsApp –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter(
            User.whatsapp_phone.isnot(None),
            User.whatsapp_enabled == True
        ).first()
        
        if not user:
            logger.error("‚ùå WhatsApp –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        logger.info(f"üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.email}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ñ–∏–ª—å—Ç—Ä
        existing_filter = db.query(Filter).filter(
            Filter.user_id == user.id,
            Filter.is_active == True
        ).first()
        
        if existing_filter:
            logger.info(f"‚úÖ –§–∏–ª—å—Ç—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: '{existing_filter.name}' (ID: {existing_filter.id})")
            return True
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä
        test_filter = Filter(
            user_id=user.id,
            name="–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π WhatsApp",
            city="Roma",
            min_price=800,
            max_price=2000,
            min_rooms=2,
            max_rooms=4,
            property_type="apartment",
            is_active=True,
            notification_enabled=True,
            notification_frequency_hours=1  # –ö–∞–∂–¥—ã–π —á–∞—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        )
        
        db.add(test_filter)
        db.commit()
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä ID: {test_filter.id}")
        logger.info(f"   - –ù–∞–∑–≤–∞–Ω–∏–µ: {test_filter.name}")
        logger.info(f"   - –ì–æ—Ä–æ–¥: {test_filter.city}")
        logger.info(f"   - –¶–µ–Ω–∞: {test_filter.min_price}-{test_filter.max_price}‚Ç¨")
        logger.info(f"   - –ö–æ–º–Ω–∞—Ç—ã: {test_filter.min_rooms}-{test_filter.max_rooms}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞: {e}")
        return False

async def run_scraping():
    """–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üï∑Ô∏è –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
        from src.parsers.run_scraping import main as run_scraping_main
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∞–ø–∏–Ω–≥ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü
        logger.info("üîç –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∞–ø–∏–Ω–≥ Idealista...")
        await run_scraping_main()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        from src.db.database import get_db
        from src.db.models import Listing
        
        db = next(get_db())
        listings_count = db.query(Listing).filter(
            Listing.is_active == True
        ).count()
        
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {listings_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        
        if listings_count > 0:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
            recent_listings = db.query(Listing).filter(
                Listing.is_active == True
            ).order_by(Listing.created_at.desc()).limit(3).all()
            
            logger.info("üìã –ü—Ä–∏–º–µ—Ä—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π:")
            for listing in recent_listings:
                logger.info(f"   - {listing.title[:50]}... (ID: {listing.id}, {listing.price}‚Ç¨)")
        
        return listings_count > 0
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞: {e}")
        return False

async def test_notification_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    logger.info("üîî –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    
    try:
        from src.services.notification_service import run_notification_dispatcher
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        result = await run_notification_dispatcher()
        
        if result:
            logger.info("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
            logger.info(f"   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result.get('users_processed', 0)}")
            logger.info(f"   - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {result.get('notifications_sent', 0)}")
            logger.info(f"   - –û—à–∏–±–æ–∫: {result.get('errors', 0)}")
            
            if result.get('notifications_sent', 0) > 0:
                logger.info("üéâ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
            else:
                logger.info("‚ÑπÔ∏è –ù–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            return True
        else:
            logger.warning("‚ö†Ô∏è –î–∏—Å–ø–µ—Ç—á–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            return False
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üß™ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ç–æ–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    logger.info("=" * 80)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_environment()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    from src.core.config import settings
    
    logger.info("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    logger.info(f"   - DEBUG_NOTIFICATIONS: {settings.DEBUG_NOTIFICATIONS}")
    logger.info(f"   - WHATSAPP_ENABLED: {settings.WHATSAPP_ENABLED}")
    logger.info(f"   - TELEGRAM_BOT_TOKEN: {'‚úÖ' if settings.TELEGRAM_BOT_TOKEN else '‚ùå'}")
    
    if not settings.WHATSAPP_ENABLED:
        logger.error("‚ùå WhatsApp —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. –í–∫–ª—é—á–∏—Ç–µ WHATSAPP_ENABLED=true")
        return
    
    # –≠—Ç–∞–ø 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
    logger.info("\n" + "="*50)
    logger.info("üìã –≠–¢–ê–ü 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞")
    logger.info("="*50)
    
    filter_created = create_test_filter()
    if not filter_created:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä")
        return
    
    # –≠—Ç–∞–ø 2: –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
    logger.info("\n" + "="*50)
    logger.info("üï∑Ô∏è –≠–¢–ê–ü 2: –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞")
    logger.info("="*50)
    
    scraping_success = await run_scraping()
    if not scraping_success:
        logger.warning("‚ö†Ô∏è –°–∫—Ä–∞–ø–∏–Ω–≥ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    # –≠—Ç–∞–ø 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    logger.info("\n" + "="*50)
    logger.info("üîî –≠–¢–ê–ü 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    logger.info("="*50)
    
    notification_success = await test_notification_system()
    
    # –ò—Ç–æ–≥–∏
    logger.info("\n" + "="*50)
    logger.info("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    logger.info("="*50)
    
    logger.info(f"‚úÖ –§–∏–ª—å—Ç—Ä —Å–æ–∑–¥–∞–Ω: {'–î–∞' if filter_created else '–ù–µ—Ç'}")
    logger.info(f"‚úÖ –°–∫—Ä–∞–ø–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω: {'–î–∞' if scraping_success else '–ß–∞—Å—Ç–∏—á–Ω–æ'}")
    logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç: {'–î–∞' if notification_success else '–ù–µ—Ç'}")
    
    if filter_created and notification_success:
        logger.info("\nüéâ –í–°–ï –°–ò–°–¢–ï–ú–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        logger.info("üöÄ Notification worker –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É")
    else:
        logger.info("\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 