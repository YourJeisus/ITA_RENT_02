#!/usr/bin/env python3
"""
üß™ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–¶–ï–ù–ê–†–ò–Ø ITA_RENT_BOT

–≠—Ç–∞–ø—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ Premium
2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å—Ç–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ 2 –º–∏–Ω—É—Ç—ã  
3. –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∞–ø–µ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
"""
import sys
import os
import time
import asyncio
import subprocess
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

def print_step(step_num: int, description: str):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —ç—Ç–∞–ø–∞"""
    print("\n" + "="*60)
    print(f"üîÑ –≠–¢–ê–ü {step_num}: {description}")
    print("="*60)

def run_command(command: str, description: str = "") -> bool:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    if description:
        print(f"‚ö° {description}")
    
    print(f"üíª –í—ã–ø–æ–ª–Ω—è–µ–º: {command}")
    
    try:
        result = subprocess.run(
            command.split(),
            capture_output=True,
            text=True,
            timeout=300  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
        )
        
        if result.returncode == 0:
            print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            if result.stdout:
                print(f"üìù –í—ã–≤–æ–¥:\n{result.stdout}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã (–∫–æ–¥: {result.returncode})")
            if result.stderr:
                print(f"üö® –û—à–∏–±–∫–∞:\n{result.stderr}")
            return False
            
    except subprocess.TimeoutExpired:
        print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã (300 —Å–µ–∫—É–Ω–¥)")
        return False
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
        return False

def update_user_to_premium():
    """–≠—Ç–∞–ø 1: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ Premium"""
    print_step(1, "–û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –î–û PREMIUM")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    return run_command(
        "python update_user_to_premium.py",
        "–û–±–Ω–æ–≤–ª—è–µ–º Your@jeisus.ru –¥–æ Premium —Å—Ç–∞—Ç—É—Å–∞"
    )

def update_railway_variables():
    """–≠—Ç–∞–ø 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö Railway"""
    print_step(2, "–ù–ê–°–¢–†–û–ô–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• RAILWAY")
    
    variables = {
        "DEBUG_NOTIFICATIONS": "true",
        "NOTIFICATION_INTERVAL_SECONDS": "120"  # 2 –º–∏–Ω—É—Ç—ã
    }
    
    success = True
    for var_name, var_value in variables.items():
        success &= run_command(
            f"railway variables set {var_name}={var_value}",
            f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {var_name}={var_value}"
        )
    
    return success

def trigger_scraper():
    """–≠—Ç–∞–ø 3: –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∞–ø–µ—Ä–∞ —á–µ—Ä–µ–∑ Railway"""
    print_step(3, "–ó–ê–ü–£–°–ö –°–ö–†–ê–ü–ï–†–ê")
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∞–ø–µ—Ä–∞
    commands = [
        ("railway run python src/parsers/run_scraping.py", "–ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ —Å–∫—Ä–∞–ø–µ—Ä–∞"),
        ("railway run python cron_scraper.py", "–ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ cron_scraper"),
    ]
    
    for command, description in commands:
        print(f"\nüîÑ –ü–æ–ø—ã—Ç–∫–∞: {description}")
        if run_command(command, description):
            print("‚úÖ –°–∫—Ä–∞–ø–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            return True
        print("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é...")
    
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∞–ø–µ—Ä –Ω–∏ –æ–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º")
    return False

def check_notifications():
    """–≠—Ç–∞–ø 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    print_step(4, "–ü–†–û–í–ï–†–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô")
    
    print("üì± –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    print("‚è∞ –ñ–¥–µ–º 3 –º–∏–Ω—É—Ç—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–∏–∫–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ª–æ–≥–∏ notification worker
    for i in range(3):
        print(f"‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ {i+1}/3 (—á–µ—Ä–µ–∑ {(i+1)*60} —Å–µ–∫—É–Ω–¥)...")
        time.sleep(60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏
        print("üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ notification worker...")
        run_command(
            "railway logs --service telegram-bot-notifications",
            "–ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏"
        )
    
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!")
    return True

def restart_services():
    """–≠—Ç–∞–ø 0: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print_step(0, "–ü–ï–†–ï–ó–ê–ü–£–°–ö –°–ï–†–í–ò–°–û–í")
    
    services = [
        "telegram-bot-notifications",
        "SCRAPPER",
        "telegram-bot"
    ]
    
    success = True
    for service in services:
        print(f"\nüîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å: {service}")
        # Railway restart command
        success &= run_command(
            f"railway service restart --service {service}",
            f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ {service}"
        )
    
    if success:
        print("‚è∞ –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        time.sleep(30)
    
    return success

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ITA_RENT_BOT")
    print(f"üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –≠—Ç–∞–ø 0: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
    if not restart_services():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã!")
        return False
    
    # –≠—Ç–∞–ø 1: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not update_user_to_premium():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ Premium!")
        return False
    
    # –≠—Ç–∞–ø 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if not update_railway_variables():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Railway!")
        return False
    
    # –ñ–¥–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    print("‚è∞ –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö...")
    time.sleep(60)
    
    # –≠—Ç–∞–ø 3: –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∞–ø–µ—Ä–∞
    if not trigger_scraper():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∞–ø–µ—Ä!")
        return False
    
    # –≠—Ç–∞–ø 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if not check_notifications():
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!")
        return False
    
    print("\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print("üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö")
    print("üìã –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ Railway Dashboard")
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 