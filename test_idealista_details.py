#!/usr/bin/env python3
"""
üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Idealista
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç:
- property_type –ø–æ–ª–µ
- rooms –ø–∞—Ä—Å–∏–Ω–≥
- –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
"""
import sys
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from src.parsers.idealista_scraper import IdealistaScraper
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)


async def test_idealista_fields():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π Idealista"""
    print("üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê IDEALISTA")
    print("=" * 50)
    
    scraper = IdealistaScraper()
    
    try:
        # –ü–∞—Ä—Å–∏–º 1 —Å—Ç—Ä–∞–Ω–∏—Ü—É
        print("üöÄ –ü–∞—Ä—Å–∏–Ω–≥ 1 —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
        listings = await scraper.scrape_multiple_pages(max_pages=1)
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(listings)}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
        property_type_count = 0
        rooms_count = 0
        price_count = 0
        
        print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó {min(5, len(listings))} –û–ë–™–Ø–í–õ–ï–ù–ò–ô:")
        
        for i, listing in enumerate(listings[:5], 1):
            print(f"\n{i}. {listing.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:50]}...")
            print(f"   üí∞ –¶–µ–Ω–∞: {listing.get('price', '–ù–ï–¢')}")
            print(f"   üè† –¢–∏–ø: {listing.get('property_type', '–ù–ï–¢')}")
            print(f"   üö™ –ö–æ–º–Ω–∞—Ç—ã: {listing.get('rooms', '–ù–ï–¢')}")
            print(f"   üìç –ì–æ—Ä–æ–¥: {listing.get('city', '–ù–ï–¢')}")
            print(f"   üîó URL: {listing.get('url', '–ù–ï–¢')[:60]}...")
            
            # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            if listing.get('property_type'):
                property_type_count += 1
            if listing.get('rooms'):
                rooms_count += 1
            if listing.get('price'):
                price_count += 1
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total = len(listings)
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ê–ß–ï–°–¢–í–ê –î–ê–ù–ù–´–•:")
        print(f"   üè† property_type: {property_type_count}/{total} ({property_type_count/total*100:.1f}%)")
        print(f"   üö™ rooms: {rooms_count}/{total} ({rooms_count/total*100:.1f}%)")
        print(f"   üí∞ price: {price_count}/{total} ({price_count/total*100:.1f}%)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –∫–æ–º–Ω–∞—Ç –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        print(f"\nüîç –ê–ù–ê–õ–ò–ó –¢–ò–ü–û–í –ö–û–ú–ù–ê–¢ –ò–ó –ó–ê–ì–û–õ–û–í–ö–û–í:")
        room_types = {}
        for listing in listings:
            title = listing.get('title', '').lower()
            if 'monolocale' in title:
                room_types['monolocale'] = room_types.get('monolocale', 0) + 1
            elif 'bilocale' in title:
                room_types['bilocale'] = room_types.get('bilocale', 0) + 1
            elif 'trilocale' in title:
                room_types['trilocale'] = room_types.get('trilocale', 0) + 1
            elif 'quadrilocale' in title:
                room_types['quadrilocale'] = room_types.get('quadrilocale', 0) + 1
        
        for room_type, count in room_types.items():
            print(f"   üìå {room_type}: {count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        
        return listings
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        return []


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    print("üß™ –¢–ï–°–¢ –ö–ê–ß–ï–°–¢–í–ê –î–ê–ù–ù–´–• IDEALISTA")
    print("=" * 50)
    
    await test_idealista_fields()
    
    print("\n‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")


if __name__ == "__main__":
    asyncio.run(main()) 