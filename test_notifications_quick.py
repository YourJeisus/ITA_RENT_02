#!/usr/bin/env python3
"""
üß™ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô

–ó–∞–ø—É—Å–∫–∞–µ—Ç notification service –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""
import sys
import os
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

# –ò–º–ø–æ—Ä—Ç—ã
from src.services.notification_service import NotificationService
from src.crud.crud_user import user as crud_user
import sqlalchemy
from sqlalchemy.orm import sessionmaker

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ–Ω–ª–∞–π–Ω –ë–î Railway
DATABASE_URL = 'postgresql://postgres:TAkDvHCdDTxVzutQsNNfJgbcSttzrgzN@caboose.proxy.rlwy.net:15179/railway'
engine = sqlalchemy.create_engine(DATABASE_URL, echo=False)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

async def test_notifications_now(user_email: str = "your@jeisus.ru"):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    print("üß™ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô")
    print("=" * 60)
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_email}")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notification_service = NotificationService()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db = SessionLocal()
        user = crud_user.get_by_email(db, email=user_email)
        
        if not user:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_email} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
            
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.email} ({user.subscription_type})")
        print(f"üì± Telegram chat_id: {user.telegram_chat_id}")
        
        if not user.telegram_chat_id:
            print(f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ Telegram!")
            return False
        
        # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
        print(f"\nüêõ –í–ö–õ–Æ–ß–ê–ï–ú –†–ï–ñ–ò–ú –û–¢–õ–ê–î–ö–ò –¥–ª—è —Ç–µ—Å—Ç–∞...")
        os.environ["DEBUG_NOTIFICATIONS"] = "true"
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        from src.core.config import settings
        from importlib import reload
        import src.core.config
        reload(src.core.config)
        
        print(f"üîß DEBUG_NOTIFICATIONS = {settings.DEBUG_NOTIFICATIONS}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f"\nüîî –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        sent_count = await notification_service.process_user_notifications(user)
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(f"   üì± –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {sent_count}")
        
        if sent_count > 0:
            print(f"   ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram!")
            print(f"   üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–∞—Ç —Å –±–æ—Ç–æ–º")
        else:
            print(f"   ‚ö†Ô∏è  –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
            print(f"   üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print(f"      - –ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
            print(f"      - –í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
            print(f"      - –ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ–∏–ª—å—Ç—Ä–æ–º")
        
        db.close()
        return sent_count > 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description="–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    parser.add_argument("--email", type=str, default="your@jeisus.ru", 
                       help="Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    args = parser.parse_args()
    
    try:
        result = asyncio.run(test_notifications_now(args.email))
        if result:
            print(f"\nüéâ –¢–ï–°–¢ –£–°–ü–ï–®–ï–ù! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram –±–æ—Ç–∞.")
        else:
            print(f"\n‚ö†Ô∏è  –¢–ï–°–¢ –ù–ï –ü–†–û–®–ï–õ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")
        
        sys.exit(0 if result else 1)
        
    except KeyboardInterrupt:
        print(f"\n‚èπÔ∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 