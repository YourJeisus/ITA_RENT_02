#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è production API –≤ Railway
"""
import requests
import json
import sys
from datetime import datetime

def print_section(title):
    print(f"\n{'='*60}")
    print(f"  {title}")
    print(f"{'='*60}")

def print_response(response):
    print(f"Status: {response.status_code}")
    try:
        data = response.json()
        print(f"Response: {json.dumps(data, indent=2, ensure_ascii=False)}")
    except:
        print(f"Response: {response.text[:500]}...")
    print("-" * 40)

def test_backend_health(backend_url):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check backend"""
    print_section("Backend Health Check")
    
    try:
        response = requests.get(f"{backend_url}/health", timeout=10)
        print_response(response)
        
        if response.status_code == 200:
            data = response.json()
            if data.get("status") == "ok":
                print("‚úÖ Backend —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                return True
            else:
                print("‚ùå Backend –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
                return False
        else:
            print("‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ backend: {e}")
        return False

def test_frontend(frontend_url):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ frontend"""
    print_section("Frontend Check")
    
    try:
        response = requests.get(frontend_url, timeout=10)
        print(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            content = response.text
            if "<title>" in content and "ITA Rent" in content:
                print("‚úÖ Frontend –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                return True
            else:
                print("‚ö†Ô∏è  Frontend –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–º")
                print(f"Title –Ω–∞–π–¥–µ–Ω: {'<title>' in content}")
                return True
        else:
            print("‚ùå Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ frontend: {e}")
        return False

def test_api_endpoints(backend_url):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö API endpoints"""
    print_section("API Endpoints Test")
    
    endpoints = [
        ("/", "Root endpoint"),
        ("/docs", "API Documentation"),
        ("/api/v1/listings/suggestions/cities", "Cities list"),
        ("/api/v1/listings/stats/database", "Database stats"),
    ]
    
    results = []
    
    for endpoint, description in endpoints:
        try:
            print(f"\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {description}")
            response = requests.get(f"{backend_url}{endpoint}", timeout=15)
            print(f"  Status: {response.status_code}")
            
            if response.status_code in [200, 307]:  # 307 –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤ docs
                print(f"  ‚úÖ {description} —Ä–∞–±–æ—Ç–∞–µ—Ç")
                results.append(True)
            else:
                print(f"  ‚ùå {description} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                results.append(False)
                
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {description}: {e}")
            results.append(False)
    
    return all(results)

def test_cors(backend_url, frontend_url):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CORS –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    print_section("CORS Configuration Test")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CORS headers
        response = requests.options(f"{backend_url}/api/v1/listings/", 
                                  headers={
                                      "Origin": frontend_url,
                                      "Access-Control-Request-Method": "GET"
                                  }, timeout=10)
        
        print(f"CORS preflight status: {response.status_code}")
        
        cors_headers = {
            "Access-Control-Allow-Origin": response.headers.get("Access-Control-Allow-Origin"),
            "Access-Control-Allow-Methods": response.headers.get("Access-Control-Allow-Methods"),
            "Access-Control-Allow-Headers": response.headers.get("Access-Control-Allow-Headers"),
        }
        
        print("CORS Headers:")
        for header, value in cors_headers.items():
            if value:
                print(f"  ‚úÖ {header}: {value}")
            else:
                print(f"  ‚ùå {header}: Not set")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ frontend URL —Ä–∞–∑—Ä–µ—à–µ–Ω
        allowed_origin = cors_headers["Access-Control-Allow-Origin"]
        if allowed_origin == "*" or frontend_url in str(allowed_origin):
            print("‚úÖ CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è frontend")
            return True
        else:
            print("‚ùå CORS –º–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã —Å frontend")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ CORS: {e}")
        return False

def test_database_connection(backend_url):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print_section("Database Connection Test")
    
    try:
        response = requests.get(f"{backend_url}/api/v1/listings/stats/database", timeout=15)
        print_response(response)
        
        if response.status_code == 200:
            data = response.json()
            if data.get("success") and "stats" in data:
                stats = data["stats"]
                print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
                print(f"  –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {stats.get('total_listings', 'N/A')}")
                print(f"  –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {stats.get('active_listings', 'N/A')}")
                return True
            else:
                print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞")
                return False
        else:
            print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def main():
    if len(sys.argv) != 3:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python test_production_api.py <backend_url> <frontend_url>")
        print("–ü—Ä–∏–º–µ—Ä: python test_production_api.py https://backend.railway.app https://frontend.railway.app")
        return 1
    
    backend_url = sys.argv[1].rstrip('/')
    frontend_url = sys.argv[2].rstrip('/')
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Production API –≤ Railway")
    print("=" * 60)
    print(f"Backend URL: {backend_url}")
    print(f"Frontend URL: {frontend_url}")
    print(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    tests = [
        ("Backend Health Check", lambda: test_backend_health(backend_url)),
        ("Frontend Check", lambda: test_frontend(frontend_url)),
        ("API Endpoints", lambda: test_api_endpoints(backend_url)),
        ("CORS Configuration", lambda: test_cors(backend_url, frontend_url)),
        ("Database Connection", lambda: test_database_connection(backend_url)),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
    
    print_section("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\n–ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! Production API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
        print("2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏")
        print("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–ª–µ—Ä—Ç—ã")
        return 0
    else:
        print(f"\n‚ùå {total - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        print("\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–µ–ø–ª–æ—è –≤ Railway Dashboard")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 