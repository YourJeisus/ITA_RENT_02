#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Twilio WhatsApp –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
"""
import os
import sys
import asyncio
import logging
import aiohttp
import base64
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def load_environment():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    try:
        from dotenv import load_dotenv
        load_dotenv()
        logger.info("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except ImportError:
        logger.info("üìù python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")

def check_twilio_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Twilio"""
    logger.info("üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Twilio...")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    enabled = os.getenv("WHATSAPP_ENABLED", "false").lower() == "true"
    api_url = os.getenv("WHATSAPP_API_URL", "")
    api_token = os.getenv("WHATSAPP_API_TOKEN", "")
    phone_id = os.getenv("WHATSAPP_PHONE_NUMBER_ID", "")
    account_sid = os.getenv("WHATSAPP_BUSINESS_ACCOUNT_ID", "")
    
    logger.info(f"   WHATSAPP_ENABLED: {enabled}")
    logger.info(f"   WHATSAPP_API_URL: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if api_url else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    logger.info(f"   WHATSAPP_API_TOKEN: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if api_token else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    logger.info(f"   WHATSAPP_PHONE_NUMBER_ID: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if phone_id else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    logger.info(f"   WHATSAPP_BUSINESS_ACCOUNT_ID: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if account_sid else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ Twilio
    is_twilio = 'twilio.com' in api_url.lower() if api_url else False
    logger.info(f"   –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {'‚úÖ Twilio' if is_twilio else '‚ùå –ù–µ Twilio'}")
    
    if not enabled:
        logger.error("   ‚ùå WhatsApp –æ—Ç–∫–ª—é—á–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ WHATSAPP_ENABLED=true")
        return False
    
    if not all([api_url, api_token, phone_id, account_sid]):
        logger.error("   ‚ùå –ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!")
        return False
    
    if not is_twilio:
        logger.error("   ‚ùå URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'twilio.com'!")
        return False
    
    logger.info("   ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Twilio –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    return True

async def test_twilio_api_direct(test_phone: str = None):
    """–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç Twilio API"""
    logger.info("üß™ –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç Twilio API...")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    api_url = os.getenv("WHATSAPP_API_URL")
    api_token = os.getenv("WHATSAPP_API_TOKEN")
    phone_id = os.getenv("WHATSAPP_PHONE_NUMBER_ID")
    account_sid = os.getenv("WHATSAPP_BUSINESS_ACCOUNT_ID")
    
    # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if not test_phone:
        test_phone = input("üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, +393401234567): ").strip()
    
    # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä
    clean_phone = ''.join(filter(str.isdigit, test_phone))
    if not clean_phone.startswith(('7', '39', '1', '44', '49', '33')):
        clean_phone = '39' + clean_phone  # –ò—Ç–∞–ª–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    logger.info(f"   –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –Ω–æ–º–µ—Ä: +{clean_phone}")
    
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Twilio
        payload = {
            "From": phone_id,  # whatsapp:+14155238886
            "To": f"whatsapp:+{clean_phone}",
            "Body": "üè† –¢–µ—Å—Ç WhatsApp —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ITA_RENT_BOT —á–µ—Ä–µ–∑ Twilio!\n\n–ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ! ‚úÖ"
        }
        
        # Twilio Basic Auth
        auth_string = f"{account_sid}:{api_token}"
        auth_bytes = auth_string.encode('ascii')
        auth_b64 = base64.b64encode(auth_bytes).decode('ascii')
        
        headers = {
            "Authorization": f"Basic {auth_b64}",
            "Content-Type": "application/x-www-form-urlencoded"
        }
        
        logger.info("   üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Twilio...")
        
        async with aiohttp.ClientSession() as session:
            async with session.post(
                api_url,
                data=payload,
                headers=headers,
                timeout=aiohttp.ClientTimeout(total=30)
            ) as response:
                
                response_text = await response.text()
                
                if response.status in [200, 201]:
                    try:
                        result = await response.json()
                        message_sid = result.get("sid")
                        status = result.get("status")
                        logger.info(f"   ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                        logger.info(f"   üìù SID: {message_sid}")
                        logger.info(f"   üìä –°—Ç–∞—Ç—É—Å: {status}")
                        return True
                    except:
                        logger.info(f"   ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (—Å—Ç–∞—Ç—É—Å {response.status})")
                        logger.info(f"   üìù –û—Ç–≤–µ—Ç: {response_text[:200]}")
                        return True
                else:
                    logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status}")
                    logger.error(f"   üìù –û—Ç–≤–µ—Ç: {response_text}")
                    return False
                    
    except Exception as e:
        logger.error(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        return False

async def test_whatsapp_service():
    """–¢–µ—Å—Ç —á–µ—Ä–µ–∑ –Ω–∞—à WhatsApp —Å–µ—Ä–≤–∏—Å"""
    logger.info("üß™ –¢–µ—Å—Ç —á–µ—Ä–µ–∑ WhatsApp —Å–µ—Ä–≤–∏—Å...")
    
    try:
        from src.services.whatsapp_service import get_whatsapp_service
        
        service = get_whatsapp_service()
        if not service:
            logger.error("   ‚ùå WhatsApp —Å–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_phone = input("üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +393401234567): ").strip()
        
        # –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        test_message = (
            "üè† *–¢–µ—Å—Ç WhatsApp —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ITA_RENT_BOT*\n\n"
            "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–∞—à —Å–µ—Ä–≤–∏—Å.\n"
            "–ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç! ‚úÖ\n\n"
            "üí° _–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö._"
        )
        
        logger.info("   üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ WhatsApp —Å–µ—Ä–≤–∏—Å...")
        success = await service.send_text_message(test_phone, test_message)
        
        if success:
            logger.info("   ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å!")
            return True
        else:
            logger.error("   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å")
            return False
            
    except Exception as e:
        logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞: {e}")
        return False

def show_twilio_setup_instructions():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Twilio"""
    logger.info("üìã –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ù–ê–°–¢–†–û–ô–ö–ï TWILIO:")
    logger.info("")
    logger.info("1. üåê –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ https://www.twilio.com/")
    logger.info("2. üì± –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Messaging ‚Üí Try it out ‚Üí Send a WhatsApp message")
    logger.info("3. üîß –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ WhatsApp Sandbox:")
    logger.info("   - –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä")
    logger.info("   - –¢–µ–∫—Å—Ç: 'join <–≤–∞—à-–∫–æ–¥>' (–∫–æ–¥ –ø–æ–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Å–æ–ª–∏)")
    logger.info("4. üîë –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á–∏ –≤ Account ‚Üí API keys & tokens:")
    logger.info("   - Account SID (–Ω–∞–ø—Ä–∏–º–µ—Ä: AC1234...)")
    logger.info("   - Auth Token (–Ω–∞–∂–º–∏—Ç–µ 'reveal')")
    logger.info("5. ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π—Ç–µ .env —Ñ–∞–π–ª:")
    logger.info("   WHATSAPP_ENABLED=true")
    logger.info("   WHATSAPP_API_URL=https://api.twilio.com/2010-04-01/Accounts/YOUR_ACCOUNT_SID/Messages.json")
    logger.info("   WHATSAPP_API_TOKEN=–≤–∞—à_auth_token")
    logger.info("   WHATSAPP_PHONE_NUMBER_ID=whatsapp:+14155238886")
    logger.info("   WHATSAPP_BUSINESS_ACCOUNT_ID=–≤–∞—à_account_sid")
    logger.info("")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Twilio WhatsApp –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    logger.info("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_environment()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_ok = check_twilio_config()
    
    if not config_ok:
        logger.info("")
        show_twilio_setup_instructions()
        return False
    
    logger.info("")
    logger.info("üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç:")
    logger.info("1. –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç Twilio API")
    logger.info("2. –¢–µ—Å—Ç —á–µ—Ä–µ–∑ –Ω–∞—à WhatsApp —Å–µ—Ä–≤–∏—Å")
    logger.info("3. –û–±–∞ —Ç–µ—Å—Ç–∞")
    
    choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ").strip()
    
    results = []
    
    if choice in ['1', '3']:
        logger.info("")
        logger.info("üß™ –ü–†–Ø–ú–û–ô –¢–ï–°–¢ TWILIO API")
        logger.info("-" * 30)
        result1 = await test_twilio_api_direct()
        results.append(("–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç Twilio API", result1))
    
    if choice in ['2', '3']:
        logger.info("")
        logger.info("üß™ –¢–ï–°–¢ –ß–ï–†–ï–ó WHATSAPP –°–ï–†–í–ò–°")
        logger.info("-" * 30)
        result2 = await test_whatsapp_service()
        results.append(("–¢–µ—Å—Ç WhatsApp —Å–µ—Ä–≤–∏—Å–∞", result2))
    
    # –ò—Ç–æ–≥–∏
    logger.info("")
    logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    logger.info("=" * 50)
    
    all_passed = True
    for test_name, result in results:
        status = "‚úÖ –£–°–ü–ï–•" if result else "‚ùå –û–®–ò–ë–ö–ê"
        logger.info(f"   {test_name}: {status}")
        if not result:
            all_passed = False
    
    logger.info("")
    if all_passed:
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        logger.info("   Twilio WhatsApp –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        logger.info("")
        logger.info("üìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        logger.info("1. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ WhatsApp worker: python run_whatsapp_worker.py")
        logger.info("2. üåê –ó–∞–ø—É—Å—Ç–∏—Ç–µ API —Å–µ—Ä–≤–µ—Ä: uvicorn src.main:app --reload")
        logger.info("3. üì± –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ API")
    else:
        logger.info("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´!")
        logger.info("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ç–µ—Å—Ç.")
    
    return all_passed

if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        logger.info("üõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 