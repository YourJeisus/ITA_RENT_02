#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ WhatsApp –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π WhatsApp
"""
import os
import sys
import asyncio
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def load_environment():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    try:
        from dotenv import load_dotenv
        load_dotenv()
        logger.info("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except ImportError:
        logger.info("üìù python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")

async def test_whatsapp_config():
    """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WhatsApp"""
    logger.info("üß™ –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WhatsApp")
    
    try:
        from src.core.config import settings
        
        logger.info(f"   WHATSAPP_ENABLED: {settings.WHATSAPP_ENABLED}")
        logger.info(f"   WHATSAPP_API_URL: {'*' * 20 if settings.WHATSAPP_API_URL else '–ù–ï –ù–ê–°–¢–†–û–ï–ù'}")
        logger.info(f"   WHATSAPP_API_TOKEN: {'*' * 20 if settings.WHATSAPP_API_TOKEN else '–ù–ï –ù–ê–°–¢–†–û–ï–ù'}")
        logger.info(f"   WHATSAPP_PHONE_NUMBER_ID: {'*' * 10 if settings.WHATSAPP_PHONE_NUMBER_ID else '–ù–ï –ù–ê–°–¢–†–û–ï–ù'}")
        
        if not settings.WHATSAPP_ENABLED:
            logger.warning("   ‚ö†Ô∏è WhatsApp –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return False
        
        if not all([settings.WHATSAPP_API_URL, settings.WHATSAPP_API_TOKEN, settings.WHATSAPP_PHONE_NUMBER_ID]):
            logger.error("   ‚ùå –ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WhatsApp –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return False
        
        logger.info("   ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WhatsApp –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
        
    except Exception as e:
        logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

async def test_whatsapp_service():
    """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ WhatsApp —Å–µ—Ä–≤–∏—Å–∞"""
    logger.info("üß™ –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ WhatsApp —Å–µ—Ä–≤–∏—Å–∞")
    
    try:
        from src.services.whatsapp_service import get_whatsapp_service
        
        service = get_whatsapp_service()
        if not service:
            logger.error("   ‚ùå WhatsApp —Å–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        logger.info("   ‚úÖ WhatsApp —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        test_listings = [
            {
                'id': 1,
                'title': '–¢–µ—Å—Ç–æ–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ',
                'price': 1800,
                'address': 'Via del Corso, 123',
                'city': 'Roma',
                'rooms': 3,
                'area': 85,
                'url': 'https://example.com/listing/1',
                'source': 'idealista'
            }
        ]
        
        message = service.format_listing_message(test_listings, "–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä")
        logger.info("   ‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
        logger.info(f"   üìù –ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:\n{message[:200]}...")
        
        return True
        
    except Exception as e:
        logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WhatsApp —Å–µ—Ä–≤–∏—Å–∞: {e}")
        return False

async def test_database_fields():
    """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π WhatsApp –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üß™ –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π WhatsApp –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    
    try:
        from src.db.database import get_db
        from src.db.models import User
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
        db = next(get_db())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π –≤ –º–æ–¥–µ–ª–∏
        user_fields = [attr for attr in dir(User) if not attr.startswith('_')]
        whatsapp_fields = ['whatsapp_phone', 'whatsapp_instance_id', 'whatsapp_enabled']
        
        missing_fields = []
        for field in whatsapp_fields:
            if field not in user_fields:
                missing_fields.append(field)
        
        if missing_fields:
            logger.error(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –≤ –º–æ–¥–µ–ª–∏ User: {missing_fields}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        count = db.query(User).count()
        logger.info(f"   üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: {count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º WhatsApp –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        whatsapp_users = db.query(User).filter(User.whatsapp_phone.isnot(None)).count()
        logger.info(f"   üì± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å WhatsApp: {whatsapp_users}")
        
        db.close()
        logger.info("   ‚úÖ –ü–æ–ª—è WhatsApp –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

async def test_crud_operations():
    """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è WhatsApp"""
    logger.info("üß™ –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è WhatsApp")
    
    try:
        from src.crud.crud_user import (
            get_by_whatsapp_phone, 
            link_whatsapp, 
            unlink_whatsapp, 
            toggle_whatsapp_notifications
        )
        
        logger.info("   ‚úÖ –í—Å–µ CRUD —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è WhatsApp –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ –≤—ã–∑—ã–≤–∞–µ–º—ã
        crud_functions = [
            get_by_whatsapp_phone,
            link_whatsapp,
            unlink_whatsapp,
            toggle_whatsapp_notifications
        ]
        
        for func in crud_functions:
            if not callable(func):
                logger.error(f"   ‚ùå –§—É–Ω–∫—Ü–∏—è {func.__name__} –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º–∞")
                return False
        
        logger.info("   ‚úÖ –í—Å–µ CRUD —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è WhatsApp –¥–æ—Å—Ç—É–ø–Ω—ã")
        return True
        
    except Exception as e:
        logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π: {e}")
        return False

async def test_api_endpoints():
    """–¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    logger.info("üß™ –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤")
    
    try:
        from src.api.v1.whatsapp import router
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–æ—É—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω
        if not router:
            logger.error("   ‚ùå WhatsApp —Ä–æ—É—Ç–µ—Ä –Ω–µ —Å–æ–∑–¥–∞–Ω")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤
        routes = [route for route in router.routes]
        route_paths = [route.path for route in routes]
        
        expected_paths = ['/status', '/link', '/unlink', '/toggle', '/test', '/settings']
        
        missing_paths = []
        for path in expected_paths:
            if path not in route_paths:
                missing_paths.append(path)
        
        if missing_paths:
            logger.error(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–∞—Ä—à—Ä—É—Ç—ã: {missing_paths}")
            return False
        
        logger.info(f"   üìä –ù–∞–π–¥–µ–Ω–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {len(routes)}")
        logger.info(f"   üìã –ú–∞—Ä—à—Ä—É—Ç—ã: {route_paths}")
        logger.info("   ‚úÖ –í—Å–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è WhatsApp –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return True
        
    except Exception as e:
        logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤: {e}")
        return False

async def test_notification_service_integration():
    """–¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å NotificationService"""
    logger.info("üß™ –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å NotificationService")
    
    try:
        from src.services.notification_service import NotificationService
        
        service = NotificationService()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç–æ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ WhatsApp
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        class MockUser:
            def __init__(self):
                self.id = 1
                self.email = "test@example.com"
                self.telegram_chat_id = None
                self.whatsapp_phone = None
                self.whatsapp_enabled = False
        
        class MockFilter:
            def __init__(self):
                self.id = 1
                self.is_active = True
                self.name = "–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä"
        
        user = MockUser()
        filter_obj = MockFilter()
        
        # –¢–µ—Å—Ç 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ —Å–ø–æ—Å–æ–±–æ–≤ —Å–≤—è–∑–∏
        result = service.should_send_notification(user, filter_obj)
        if result:
            logger.error("   ‚ùå should_send_notification –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Å–ø–æ—Å–æ–±–æ–≤ —Å–≤—è–∑–∏")
            return False
        
        # –¢–µ—Å—Ç 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ —Å WhatsApp
        user.whatsapp_phone = "+393401234567"
        user.whatsapp_enabled = True
        
        from src.core.config import settings
        if settings.WHATSAPP_ENABLED:
            result = service.should_send_notification(user, filter_obj)
            if not result:
                logger.error("   ‚ùå should_send_notification –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å WhatsApp")
                return False
        
        logger.info("   ‚úÖ NotificationService –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç WhatsApp")
        return True
        
    except Exception as e:
        logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ NotificationService: {e}")
        return False

async def test_whatsapp_api_connection():
    """–¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WhatsApp API (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)"""
    logger.info("üß™ –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WhatsApp API")
    
    try:
        from src.core.config import settings
        
        if not settings.WHATSAPP_ENABLED:
            logger.info("   ‚è≠Ô∏è WhatsApp –æ—Ç–∫–ª—é—á–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç API")
            return True
        
        if not all([settings.WHATSAPP_API_URL, settings.WHATSAPP_API_TOKEN]):
            logger.info("   ‚è≠Ô∏è API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –ø–æ–ª–Ω—ã–µ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            return True
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ URL –∏ —Ç–æ–∫–µ–Ω–∞
        import aiohttp
        
        headers = {
            "Authorization": f"Bearer {settings.WHATSAPP_API_TOKEN}",
            "Content-Type": "application/json"
        }
        
        # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
        if settings.WHATSAPP_API_URL and settings.WHATSAPP_API_TOKEN:
            logger.info("   ‚úÖ API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–≥–ª—è–¥—è—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            logger.info("   ‚ÑπÔ∏è –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ POST /api/v1/whatsapp/test")
            return True
        
        return True
        
    except Exception as e:
        logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ WhatsApp API: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WhatsApp –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è ITA_RENT_BOT")
    logger.info("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_environment()
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
    tests = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WhatsApp", test_whatsapp_config),
        ("WhatsApp —Å–µ—Ä–≤–∏—Å", test_whatsapp_service),
        ("–ü–æ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", test_database_fields),
        ("CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏", test_crud_operations),
        ("API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã", test_api_endpoints),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è NotificationService", test_notification_service_integration),
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WhatsApp API", test_whatsapp_api_connection),
    ]
    
    results = []
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
    for test_name, test_func in tests:
        try:
            result = await test_func()
            results.append((test_name, result))
            
            if result:
                logger.info(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
            else:
                logger.error(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
                
        except Exception as e:
            logger.error(f"üí• {test_name}: –û–®–ò–ë–ö–ê - {e}")
            results.append((test_name, False))
        
        logger.info("-" * 60)
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    logger.info("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    logger.info(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
    logger.info(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    logger.info(f"   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}")
    logger.info(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed/total)*100:.1f}%")
    
    if passed == total:
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! WhatsApp –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
    else:
        logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏.")
    
    logger.info("=" * 60)
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–∞–ª—å–Ω–µ–π—à–∏–º –¥–µ–π—Å—Ç–≤–∏—è–º
    logger.info("üìã –î–ê–õ–¨–ù–ï–ô–®–ò–ï –î–ï–ô–°–¢–í–ò–Ø:")
    logger.info("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ WhatsApp Business API —É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞")
    logger.info("2. –û–±–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env —Ñ–∞–π–ª–µ")
    logger.info("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ WhatsApp worker: python scripts/run_whatsapp_worker.py")
    logger.info("4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —á–µ—Ä–µ–∑ API: POST /api/v1/whatsapp/test")
    logger.info("5. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    
    return passed == total

if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        logger.info("üõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 