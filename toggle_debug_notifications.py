#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
–ò–∑–º–µ–Ω—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é DEBUG_NOTIFICATIONS –≤ .env —Ñ–∞–π–ª–µ
"""
import os
import sys
from pathlib import Path

def read_env_file():
    """–ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .env —Ñ–∞–π–ª–∞"""
    env_path = Path(".env")
    if not env_path.exists():
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None
    
    with open(env_path, 'r', encoding='utf-8') as f:
        return f.readlines()

def write_env_file(lines):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ .env —Ñ–∞–π–ª"""
    env_path = Path(".env")
    with open(env_path, 'w', encoding='utf-8') as f:
        f.writelines(lines)

def toggle_debug_mode():
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏"""
    lines = read_env_file()
    if lines is None:
        return False
    
    # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å DEBUG_NOTIFICATIONS
    debug_line_index = None
    current_value = "false"
    
    for i, line in enumerate(lines):
        if line.strip().startswith("DEBUG_NOTIFICATIONS="):
            debug_line_index = i
            current_value = line.strip().split("=")[1].lower()
            break
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (Pydantic –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
    new_value = "false" if current_value.lower() in ["true", "1", "yes"] else "true"
    new_line = f"DEBUG_NOTIFICATIONS={new_value}\n"
    
    if debug_line_index is not None:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
        lines[debug_line_index] = new_line
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
        if lines and not lines[-1].endswith('\n'):
            lines.append('\n')
        lines.append(new_line)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
    write_env_file(lines)
    
    print(f"‚úÖ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {new_value.upper()}")
    
    if new_value == "true":
        print("üêõ –í–ö–õ–Æ–ß–ï–ù —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏:")
        print("   - –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        print("   - –ò–Ω—Ç–µ—Ä–≤–∞–ª: 60 —Å–µ–∫—É–Ω–¥")
        print("   - –û—Ç–ø—Ä–∞–≤–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤–∫–ª—é—á–µ–Ω–∞")
        print("   - –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏")
    else:
        print("‚úÖ –í–´–ö–õ–Æ–ß–ï–ù —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏:")
        print("   - –û–±—ã—á–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è")
        print("   - –ò–Ω—Ç–µ—Ä–≤–∞–ª: 30 –º–∏–Ω—É—Ç")
        print("   - –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
        print("   - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ª–æ–≥–∏")
    
    print("\nüí° –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π:")
    print("   docker-compose restart notification-worker")
    
    return True

def show_current_status():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏"""
    lines = read_env_file()
    if lines is None:
        return
    
    current_value = "false"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    for line in lines:
        if line.strip().startswith("DEBUG_NOTIFICATIONS="):
            current_value = line.strip().split("=")[1].lower()
            break
    
    print(f"üìä –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {current_value.upper()}")
    
    if current_value == "true":
        print("üêõ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –í–ö–õ–Æ–ß–ï–ù")
    else:
        print("‚úÖ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) > 1:
        action = sys.argv[1].lower()
        
        if action in ['status', 's']:
            show_current_status()
        elif action in ['on', 'enable', 'true']:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º
            lines = read_env_file()
            if lines is None:
                return
                
            debug_line_index = None
            for i, line in enumerate(lines):
                if line.strip().startswith("DEBUG_NOTIFICATIONS="):
                    debug_line_index = i
                    break
            
            new_line = "DEBUG_NOTIFICATIONS=true\n"
            if debug_line_index is not None:
                lines[debug_line_index] = new_line
            else:
                if lines and not lines[-1].endswith('\n'):
                    lines.append('\n')
                lines.append(new_line)
            
            write_env_file(lines)
            print("üêõ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –í–ö–õ–Æ–ß–ï–ù")
            
        elif action in ['off', 'disable', 'false']:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∫–ª—é—á–∞–µ–º
            lines = read_env_file()
            if lines is None:
                return
                
            debug_line_index = None
            for i, line in enumerate(lines):
                if line.strip().startswith("DEBUG_NOTIFICATIONS="):
                    debug_line_index = i
                    break
            
            new_line = "DEBUG_NOTIFICATIONS=false\n"
            if debug_line_index is not None:
                lines[debug_line_index] = new_line
            else:
                if lines and not lines[-1].endswith('\n'):
                    lines.append('\n')
                lines.append(new_line)
            
            write_env_file(lines)
            print("‚úÖ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –í–´–ö–õ–Æ–ß–ï–ù")
            
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: on, off, status, toggle")
    else:
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞
        toggle_debug_mode()

if __name__ == "__main__":
    main() 